
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00002f8e  00003022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001c8  008001c8  0000318a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000318a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000422  00000000  00000000  000031ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000016c5  00000000  00000000  0000360c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000074a  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001f5e  00000000  00000000  0000541b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  0000737c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054d  00000000  00000000  0000769c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000108c  00000000  00000000  00007be9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a8 02 	jmp	0x550	; 0x550 <__ctors_end>
       4:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
       8:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
       c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      10:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      14:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      18:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      1c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      20:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      24:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      28:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      2c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      30:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      34:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      38:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      3c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      40:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      44:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      48:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      4c:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>
      50:	0c 94 c5 02 	jmp	0x58a	; 0x58a <__bad_interrupt>

00000054 <font>:
      54:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      64:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      74:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
      84:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
      94:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
      a4:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
      b4:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
      c4:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
      d4:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
      e4:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
      f4:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     104:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     114:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     124:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     134:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     144:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     154:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     164:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     174:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     184:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     194:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     1a4:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     1b4:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     1c4:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1d4:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1e4:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     1f4:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     204:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     214:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     224:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     234:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     244:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     254:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     264:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     274:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     284:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     294:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     2a4:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     2b4:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     2c4:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     2d4:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     2e4:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     2f4:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     304:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     314:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     324:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     334:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     344:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     354:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     364:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     374:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     384:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     394:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     3a4:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     3b4:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     3c4:	aa 00 55 00 aa aa 55 aa 55 aa 00 00 00 ff 00 10     ..U...U.U.......
     3d4:	10 10 ff 00 14 14 14 ff 00 10 10 ff 00 ff 10 10     ................
     3e4:	f0 10 f0 14 14 14 fc 00 14 14 f7 00 ff 00 00 ff     ................
     3f4:	00 ff 14 14 f4 04 fc 14 14 17 10 1f 10 10 1f 10     ................
     404:	1f 14 14 14 1f 00 10 10 10 f0 00 00 00 00 1f 10     ................
     414:	10 10 10 1f 10 10 10 10 f0 10 00 00 00 ff 10 10     ................
     424:	10 10 10 10 10 10 10 ff 10 00 00 00 ff 14 00 00     ................
     434:	ff 00 ff 00 00 1f 10 17 00 00 fc 04 f4 14 14 17     ................
     444:	10 17 14 14 f4 04 f4 00 00 ff 00 f7 14 14 14 14     ................
     454:	14 14 14 f7 00 f7 14 14 14 17 14 10 10 1f 10 1f     ................
     464:	14 14 14 f4 14 10 10 f0 10 f0 00 00 1f 10 1f 00     ................
     474:	00 00 1f 14 00 00 00 fc 14 00 00 f0 10 f0 10 10     ................
     484:	ff 10 ff 14 14 14 ff 14 10 10 10 1f 00 00 00 00     ................
     494:	f0 10 ff ff ff ff ff f0 f0 f0 f0 f0 ff ff ff 00     ................
     4a4:	00 00 00 00 ff ff 0f 0f 0f 0f 0f 38 44 44 38 44     ...........8DD8D
     4b4:	fc 4a 4a 4a 34 7e 02 02 06 06 02 7e 02 7e 02 63     .JJJ4~.....~.~.c
     4c4:	55 49 41 63 38 44 44 3c 04 40 7e 20 1e 20 06 02     UIAc8DD<.@~ . ..
     4d4:	7e 02 02 99 a5 e7 a5 99 1c 2a 49 2a 1c 4c 72 01     ~........*I*.Lr.
     4e4:	72 4c 30 4a 4d 4d 30 30 48 78 48 30 bc 62 5a 46     rL0JMM00HxH0.bZF
     4f4:	3d 3e 49 49 49 00 7e 01 01 01 7e 2a 2a 2a 2a 2a     =>III.~...~*****
     504:	44 44 5f 44 44 40 51 4a 44 40 40 44 4a 51 40 00     DD_DD@QJD@@DJQ@.
     514:	00 ff 01 03 e0 80 ff 00 00 08 08 6b 6b 08 36 12     ...........kk.6.
     524:	36 24 36 06 0f 09 0f 06 00 00 18 18 00 00 00 10     6$6.............
     534:	10 00 30 40 ff 01 01 00 1f 01 01 1e 00 19 1d 17     ..0@............
     544:	12 00 3c 3c 3c 3c 00 00 00 00 00 00                 ..<<<<......

00000550 <__ctors_end>:
     550:	11 24       	eor	r1, r1
     552:	1f be       	out	0x3f, r1	; 63
     554:	cf e5       	ldi	r28, 0x5F	; 95
     556:	d8 e0       	ldi	r29, 0x08	; 8
     558:	de bf       	out	0x3e, r29	; 62
     55a:	cd bf       	out	0x3d, r28	; 61

0000055c <__do_copy_data>:
     55c:	11 e0       	ldi	r17, 0x01	; 1
     55e:	a0 e6       	ldi	r26, 0x60	; 96
     560:	b0 e0       	ldi	r27, 0x00	; 0
     562:	ee e8       	ldi	r30, 0x8E	; 142
     564:	ff e2       	ldi	r31, 0x2F	; 47
     566:	02 c0       	rjmp	.+4      	; 0x56c <.do_copy_data_start>

00000568 <.do_copy_data_loop>:
     568:	05 90       	lpm	r0, Z+
     56a:	0d 92       	st	X+, r0

0000056c <.do_copy_data_start>:
     56c:	a8 3c       	cpi	r26, 0xC8	; 200
     56e:	b1 07       	cpc	r27, r17
     570:	d9 f7       	brne	.-10     	; 0x568 <.do_copy_data_loop>

00000572 <__do_clear_bss>:
     572:	11 e0       	ldi	r17, 0x01	; 1
     574:	a8 ec       	ldi	r26, 0xC8	; 200
     576:	b1 e0       	ldi	r27, 0x01	; 1
     578:	01 c0       	rjmp	.+2      	; 0x57c <.do_clear_bss_start>

0000057a <.do_clear_bss_loop>:
     57a:	1d 92       	st	X+, r1

0000057c <.do_clear_bss_start>:
     57c:	a7 3d       	cpi	r26, 0xD7	; 215
     57e:	b1 07       	cpc	r27, r17
     580:	e1 f7       	brne	.-8      	; 0x57a <.do_clear_bss_loop>
     582:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <main>
     586:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <_exit>

0000058a <__bad_interrupt>:
     58a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000058e <check_overflow>:

	return;
}

uint16_t check_overflow(uint16_t a, uint16_t b, uint16_t c)
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	fc 01       	movw	r30, r24
     594:	eb 01       	movw	r28, r22
	if (c > 9)
     596:	4a 30       	cpi	r20, 0x0A	; 10
     598:	51 05       	cpc	r21, r1
     59a:	b8 f0       	brcs	.+46     	; 0x5ca <check_overflow+0x3c>
	{
		uint16_t temp = (c - b) / 10;

		if (temp >= a)
     59c:	ca 01       	movw	r24, r20
     59e:	86 1b       	sub	r24, r22
     5a0:	97 0b       	sbc	r25, r23
     5a2:	6a e0       	ldi	r22, 0x0A	; 10
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	0e 94 b3 14 	call	0x2966	; 0x2966 <__udivmodhi4>
     5aa:	6e 17       	cp	r22, r30
     5ac:	7f 07       	cpc	r23, r31
     5ae:	e8 f0       	brcs	.+58     	; 0x5ea <check_overflow+0x5c>
			return (10 * a + b);
     5b0:	cf 01       	movw	r24, r30
     5b2:	b3 e0       	ldi	r27, 0x03	; 3
     5b4:	88 0f       	add	r24, r24
     5b6:	99 1f       	adc	r25, r25
     5b8:	ba 95       	dec	r27
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <check_overflow+0x26>
     5bc:	ee 0f       	add	r30, r30
     5be:	ff 1f       	adc	r31, r31
     5c0:	e8 0f       	add	r30, r24
     5c2:	f9 1f       	adc	r31, r25
     5c4:	ec 0f       	add	r30, r28
     5c6:	fd 1f       	adc	r31, r29
     5c8:	10 c0       	rjmp	.+32     	; 0x5ea <check_overflow+0x5c>
	}
	else
	{
		if (10 * a + b <= c)
     5ca:	9c 01       	movw	r18, r24
     5cc:	22 0f       	add	r18, r18
     5ce:	33 1f       	adc	r19, r19
     5d0:	63 e0       	ldi	r22, 0x03	; 3
     5d2:	88 0f       	add	r24, r24
     5d4:	99 1f       	adc	r25, r25
     5d6:	6a 95       	dec	r22
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <check_overflow+0x44>
     5da:	28 0f       	add	r18, r24
     5dc:	39 1f       	adc	r19, r25
     5de:	2c 0f       	add	r18, r28
     5e0:	3d 1f       	adc	r19, r29
     5e2:	42 17       	cp	r20, r18
     5e4:	53 07       	cpc	r21, r19
     5e6:	08 f0       	brcs	.+2      	; 0x5ea <check_overflow+0x5c>
     5e8:	f9 01       	movw	r30, r18
			return (10 * a + b);
	}
	return a;
}
     5ea:	cf 01       	movw	r24, r30
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <eeprom_write>:
	}
	return;
}

void eeprom_write(uint16_t write_addr, uint8_t write_data)
{
     5f2:	9c 01       	movw	r18, r24
	SREG &= 0x7F;
     5f4:	8f b7       	in	r24, 0x3f	; 63
     5f6:	8f 77       	andi	r24, 0x7F	; 127
     5f8:	8f bf       	out	0x3f, r24	; 63
	while (EECR & (1 << 1)); // EEWE
     5fa:	e1 99       	sbic	0x1c, 1	; 28
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <eeprom_write+0x8>
	EEAR = write_addr;
     5fe:	3f bb       	out	0x1f, r19	; 31
     600:	2e bb       	out	0x1e, r18	; 30
	EEDR = write_data;
     602:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1 << 2);
     604:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= (1 << 1);
     606:	e1 9a       	sbi	0x1c, 1	; 28
	SREG |= (1 << 7);
     608:	8f b7       	in	r24, 0x3f	; 63
     60a:	80 68       	ori	r24, 0x80	; 128
     60c:	8f bf       	out	0x3f, r24	; 63
	return;
}
     60e:	08 95       	ret

00000610 <write_item>:
	}
	return;
}

void write_item(type_item *x)
{
     610:	8f 92       	push	r8
     612:	9f 92       	push	r9
     614:	af 92       	push	r10
     616:	bf 92       	push	r11
     618:	cf 92       	push	r12
     61a:	df 92       	push	r13
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	8c 01       	movw	r16, r24
     628:	c0 e0       	ldi	r28, 0x00	; 0
     62a:	d0 e0       	ldi	r29, 0x00	; 0
     62c:	23 c0       	rjmp	.+70     	; 0x674 <write_item+0x64>
	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
		{
			if (j == 0)
     62e:	ff 20       	and	r15, r15
     630:	21 f4       	brne	.+8      	; 0x63a <write_item+0x2a>
				eeprom_write(4 * i + j, x[i].code[1]);
     632:	ce 01       	movw	r24, r28
     634:	f8 01       	movw	r30, r16
     636:	61 81       	ldd	r22, Z+1	; 0x01
     638:	11 c0       	rjmp	.+34     	; 0x65c <write_item+0x4c>
			else if (j == 1)
     63a:	f1 e0       	ldi	r31, 0x01	; 1
     63c:	ff 16       	cp	r15, r31
     63e:	21 f4       	brne	.+8      	; 0x648 <write_item+0x38>
				eeprom_write(4 * i + j, x[i].code[0]);
     640:	c4 01       	movw	r24, r8
     642:	f8 01       	movw	r30, r16
     644:	60 81       	ld	r22, Z
     646:	0a c0       	rjmp	.+20     	; 0x65c <write_item+0x4c>
			else if (j == 2)
     648:	f2 e0       	ldi	r31, 0x02	; 2
     64a:	ff 16       	cp	r15, r31
     64c:	21 f4       	brne	.+8      	; 0x656 <write_item+0x46>
				eeprom_write(4 * i + j, x[i].quantity);
     64e:	c5 01       	movw	r24, r10
     650:	f8 01       	movw	r30, r16
     652:	62 81       	ldd	r22, Z+2	; 0x02
     654:	03 c0       	rjmp	.+6      	; 0x65c <write_item+0x4c>
			else if (j == 3)
				eeprom_write(4 * i + j, x[i].price);
     656:	c6 01       	movw	r24, r12
     658:	f8 01       	movw	r30, r16
     65a:	63 81       	ldd	r22, Z+3	; 0x03
     65c:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <eeprom_write>

void write_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
     660:	f3 94       	inc	r15
     662:	f4 e0       	ldi	r31, 0x04	; 4
     664:	ff 16       	cp	r15, r31
     666:	19 f7       	brne	.-58     	; 0x62e <write_item+0x1e>
     668:	24 96       	adiw	r28, 0x04	; 4
     66a:	0c 5f       	subi	r16, 0xFC	; 252
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
	return;
}

void write_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
     66e:	c0 35       	cpi	r28, 0x50	; 80
     670:	d1 05       	cpc	r29, r1
     672:	81 f0       	breq	.+32     	; 0x694 <write_item+0x84>
     674:	4e 01       	movw	r8, r28
     676:	08 94       	sec
     678:	81 1c       	adc	r8, r1
     67a:	91 1c       	adc	r9, r1
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	a9 2e       	mov	r10, r25
     680:	b1 2c       	mov	r11, r1
     682:	ac 0e       	add	r10, r28
     684:	bd 1e       	adc	r11, r29
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	c8 2e       	mov	r12, r24
     68a:	d1 2c       	mov	r13, r1
     68c:	cc 0e       	add	r12, r28
     68e:	dd 1e       	adc	r13, r29
     690:	ff 24       	eor	r15, r15
     692:	cd cf       	rjmp	.-102    	; 0x62e <write_item+0x1e>
			else if (j == 3)
				eeprom_write(4 * i + j, x[i].price);
		}
	}
	return;
}
     694:	df 91       	pop	r29
     696:	cf 91       	pop	r28
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	bf 90       	pop	r11
     6a4:	af 90       	pop	r10
     6a6:	9f 90       	pop	r9
     6a8:	8f 90       	pop	r8
     6aa:	08 95       	ret

000006ac <eeprom_read>:
	SREG |= (1 << 7);
	return;
}

uint16_t eeprom_read(uint16_t read_addr)
{
     6ac:	9c 01       	movw	r18, r24
	SREG &= 0x7F;
     6ae:	8f b7       	in	r24, 0x3f	; 63
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	8f bf       	out	0x3f, r24	; 63
	while (EECR & (1 << 1)); //EEWE
     6b4:	e1 99       	sbic	0x1c, 1	; 28
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <eeprom_read+0x8>
	EEAR = read_addr;
     6b8:	3f bb       	out	0x1f, r19	; 31
     6ba:	2e bb       	out	0x1e, r18	; 30
	EECR |= (1 << 0); //EERE
     6bc:	e0 9a       	sbi	0x1c, 0	; 28
	SREG |= (1 << 7);
     6be:	8f b7       	in	r24, 0x3f	; 63
     6c0:	80 68       	ori	r24, 0x80	; 128
     6c2:	8f bf       	out	0x3f, r24	; 63
	return EEDR;
     6c4:	8d b3       	in	r24, 0x1d	; 29
}
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	08 95       	ret

000006ca <get_item>:
	}
	return a;
}

void get_item(type_item *x)
{
     6ca:	8f 92       	push	r8
     6cc:	9f 92       	push	r9
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ff 92       	push	r15
     6d8:	0f 93       	push	r16
     6da:	1f 93       	push	r17
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	8c 01       	movw	r16, r24
     6e2:	c0 e0       	ldi	r28, 0x00	; 0
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	29 c0       	rjmp	.+82     	; 0x73a <get_item+0x70>
	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
		{
			if (j == 0)
     6e8:	ff 20       	and	r15, r15
     6ea:	31 f4       	brne	.+12     	; 0x6f8 <get_item+0x2e>
				x[i].code[1] = eeprom_read(4 * i + j);
     6ec:	ce 01       	movw	r24, r28
     6ee:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     6f2:	f8 01       	movw	r30, r16
     6f4:	81 83       	std	Z+1, r24	; 0x01
     6f6:	17 c0       	rjmp	.+46     	; 0x726 <get_item+0x5c>
			else if (j == 1)
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	ff 16       	cp	r15, r31
     6fc:	31 f4       	brne	.+12     	; 0x70a <get_item+0x40>
				x[i].code[0] = eeprom_read(4 * i + j);
     6fe:	c4 01       	movw	r24, r8
     700:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     704:	f8 01       	movw	r30, r16
     706:	80 83       	st	Z, r24
     708:	0e c0       	rjmp	.+28     	; 0x726 <get_item+0x5c>
			else if (j == 2)
     70a:	f2 e0       	ldi	r31, 0x02	; 2
     70c:	ff 16       	cp	r15, r31
     70e:	31 f4       	brne	.+12     	; 0x71c <get_item+0x52>
				x[i].quantity = eeprom_read(4 * i + j);
     710:	c5 01       	movw	r24, r10
     712:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     716:	f8 01       	movw	r30, r16
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	05 c0       	rjmp	.+10     	; 0x726 <get_item+0x5c>
			else if (j == 3)
				x[i].price = eeprom_read(4 * i + j);
     71c:	c6 01       	movw	r24, r12
     71e:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     722:	f8 01       	movw	r30, r16
     724:	83 83       	std	Z+3, r24	; 0x03

void get_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
     726:	f3 94       	inc	r15
     728:	f4 e0       	ldi	r31, 0x04	; 4
     72a:	ff 16       	cp	r15, r31
     72c:	e9 f6       	brne	.-70     	; 0x6e8 <get_item+0x1e>
     72e:	24 96       	adiw	r28, 0x04	; 4
     730:	0c 5f       	subi	r16, 0xFC	; 252
     732:	1f 4f       	sbci	r17, 0xFF	; 255
	return a;
}

void get_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
     734:	c0 35       	cpi	r28, 0x50	; 80
     736:	d1 05       	cpc	r29, r1
     738:	81 f0       	breq	.+32     	; 0x75a <get_item+0x90>
     73a:	4e 01       	movw	r8, r28
     73c:	08 94       	sec
     73e:	81 1c       	adc	r8, r1
     740:	91 1c       	adc	r9, r1
     742:	32 e0       	ldi	r19, 0x02	; 2
     744:	a3 2e       	mov	r10, r19
     746:	b1 2c       	mov	r11, r1
     748:	ac 0e       	add	r10, r28
     74a:	bd 1e       	adc	r11, r29
     74c:	23 e0       	ldi	r18, 0x03	; 3
     74e:	c2 2e       	mov	r12, r18
     750:	d1 2c       	mov	r13, r1
     752:	cc 0e       	add	r12, r28
     754:	dd 1e       	adc	r13, r29
     756:	ff 24       	eor	r15, r15
     758:	c7 cf       	rjmp	.-114    	; 0x6e8 <get_item+0x1e>
			else if (j == 3)
				x[i].price = eeprom_read(4 * i + j);
		}
	}
	return;
}
     75a:	df 91       	pop	r29
     75c:	cf 91       	pop	r28
     75e:	1f 91       	pop	r17
     760:	0f 91       	pop	r16
     762:	ff 90       	pop	r15
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	bf 90       	pop	r11
     76a:	af 90       	pop	r10
     76c:	9f 90       	pop	r9
     76e:	8f 90       	pop	r8
     770:	08 95       	ret

00000772 <init_led>:
	write_price(payment - x);
	return;
}

void init_led(void)
{
     772:	1f 93       	push	r17
	DDRA = 0xFF;
     774:	8f ef       	ldi	r24, 0xFF	; 255
     776:	8a bb       	out	0x1a, r24	; 26
	PORTA &= ~_BV(0);
     778:	d8 98       	cbi	0x1b, 0	; 27
	PORTA &= ~_BV(1);
     77a:	d9 98       	cbi	0x1b, 1	; 27
	PORTA &= ~_BV(2);
     77c:	da 98       	cbi	0x1b, 2	; 27
	PORTA &= ~_BV(3);
     77e:	db 98       	cbi	0x1b, 3	; 27

	uint8_t row = 0;
	//jika stock kurang dari atau sama dengan 30, lampu menyala
	//ROW1-----------------------------------------------------
	if (eeprom_read(0x02) <= 30)
     780:	82 e0       	ldi	r24, 0x02	; 2
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     788:	10 e0       	ldi	r17, 0x00	; 0
     78a:	4f 97       	sbiw	r24, 0x1f	; 31
     78c:	08 f4       	brcc	.+2      	; 0x790 <init_led+0x1e>
     78e:	11 e0       	ldi	r17, 0x01	; 1
	else
	{
		row &= 0b11111110;
	}

	if (eeprom_read(0x06) <= 30)
     790:	86 e0       	ldi	r24, 0x06	; 6
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     798:	4f 97       	sbiw	r24, 0x1f	; 31
     79a:	10 f4       	brcc	.+4      	; 0x7a0 <init_led+0x2e>
	{
		row |= 0b00000010;
     79c:	12 60       	ori	r17, 0x02	; 2
     79e:	01 c0       	rjmp	.+2      	; 0x7a2 <init_led+0x30>
	}
	else
	{
		row &= 0b11111101;
     7a0:	1d 7f       	andi	r17, 0xFD	; 253
	}

	if (eeprom_read(0x0A) <= 30)
     7a2:	8a e0       	ldi	r24, 0x0A	; 10
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     7aa:	4f 97       	sbiw	r24, 0x1f	; 31
     7ac:	10 f4       	brcc	.+4      	; 0x7b2 <init_led+0x40>
	{
		row |= 0b00000100;
     7ae:	14 60       	ori	r17, 0x04	; 4
     7b0:	01 c0       	rjmp	.+2      	; 0x7b4 <init_led+0x42>
	}
	else
	{
		row &= 0b11111011;
     7b2:	1b 7f       	andi	r17, 0xFB	; 251
	}

	if (eeprom_read(0x0E) <= 30)
     7b4:	8e e0       	ldi	r24, 0x0E	; 14
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     7bc:	4f 97       	sbiw	r24, 0x1f	; 31
     7be:	10 f4       	brcc	.+4      	; 0x7c4 <init_led+0x52>
	{
		row |= 0b00001000;
     7c0:	18 60       	ori	r17, 0x08	; 8
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <init_led+0x54>
	}
	else
	{
		row &= 0b11110111;
     7c4:	17 7f       	andi	r17, 0xF7	; 247
	}
	PORTA = row;
     7c6:	1b bb       	out	0x1b, r17	; 27
	PORTA &= ~_BV(4);	//Clock ON
     7c8:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     7ca:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     7cc:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= _BV(7);
     7ce:	df 9a       	sbi	0x1b, 7	; 27

	PORTA &= ~_BV(4); //Clock OFF
     7d0:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     7d2:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     7d4:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~_BV(7);
     7d6:	df 98       	cbi	0x1b, 7	; 27

	//ROW2-----------------------------------------------------
	if (eeprom_read(0x12) <= 30)
     7d8:	82 e1       	ldi	r24, 0x12	; 18
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     7e0:	4f 97       	sbiw	r24, 0x1f	; 31
     7e2:	10 f4       	brcc	.+4      	; 0x7e8 <init_led+0x76>
	{
		row |= 0b00000001;
     7e4:	11 60       	ori	r17, 0x01	; 1
     7e6:	01 c0       	rjmp	.+2      	; 0x7ea <init_led+0x78>
	}
	else
	{
		row &= 0b11111110;
     7e8:	1e 7f       	andi	r17, 0xFE	; 254
	}

	if (eeprom_read(0x16) <= 30)
     7ea:	86 e1       	ldi	r24, 0x16	; 22
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     7f2:	4f 97       	sbiw	r24, 0x1f	; 31
     7f4:	10 f4       	brcc	.+4      	; 0x7fa <init_led+0x88>
	{
		row |= 0b00000010;
     7f6:	12 60       	ori	r17, 0x02	; 2
     7f8:	01 c0       	rjmp	.+2      	; 0x7fc <init_led+0x8a>
	}
	else
	{
		row &= 0b11111101;
     7fa:	1d 7f       	andi	r17, 0xFD	; 253
	}

	if (eeprom_read(0x1A) <= 30)
     7fc:	8a e1       	ldi	r24, 0x1A	; 26
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     804:	4f 97       	sbiw	r24, 0x1f	; 31
     806:	10 f4       	brcc	.+4      	; 0x80c <init_led+0x9a>
	{
		row |= 0b00000100;
     808:	14 60       	ori	r17, 0x04	; 4
     80a:	01 c0       	rjmp	.+2      	; 0x80e <init_led+0x9c>
	}
	else
	{
		row &= 0b11111011;
     80c:	1b 7f       	andi	r17, 0xFB	; 251
	}

	if (eeprom_read(0x1E) <= 30)
     80e:	8e e1       	ldi	r24, 0x1E	; 30
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     816:	4f 97       	sbiw	r24, 0x1f	; 31
     818:	10 f4       	brcc	.+4      	; 0x81e <init_led+0xac>
	{
		row |= 0b00001000;
     81a:	18 60       	ori	r17, 0x08	; 8
     81c:	01 c0       	rjmp	.+2      	; 0x820 <init_led+0xae>
	}
	else
	{
		row &= 0b11110111;
     81e:	17 7f       	andi	r17, 0xF7	; 247
	}
	PORTA = row;
     820:	1b bb       	out	0x1b, r17	; 27
	PORTA |= _BV(4);	//Clock ON
     822:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     824:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     826:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= _BV(7);
     828:	df 9a       	sbi	0x1b, 7	; 27

	PORTA |= _BV(4); //Clock OFF
     82a:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     82c:	dd 98       	cbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     82e:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~_BV(7);
     830:	df 98       	cbi	0x1b, 7	; 27

	//ROW3-----------------------------------------------------
	if (eeprom_read(0x22) <= 30)
     832:	82 e2       	ldi	r24, 0x22	; 34
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     83a:	4f 97       	sbiw	r24, 0x1f	; 31
     83c:	10 f4       	brcc	.+4      	; 0x842 <init_led+0xd0>
	{
		row |= 0b00000001;
     83e:	11 60       	ori	r17, 0x01	; 1
     840:	01 c0       	rjmp	.+2      	; 0x844 <init_led+0xd2>
	}
	else
	{
		row &= 0b11111110;
     842:	1e 7f       	andi	r17, 0xFE	; 254
	}

	if (eeprom_read(0x26) <= 30)
     844:	86 e2       	ldi	r24, 0x26	; 38
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     84c:	4f 97       	sbiw	r24, 0x1f	; 31
     84e:	10 f4       	brcc	.+4      	; 0x854 <init_led+0xe2>
	{
		row |= 0b00000010;
     850:	12 60       	ori	r17, 0x02	; 2
     852:	01 c0       	rjmp	.+2      	; 0x856 <init_led+0xe4>
	}
	else
	{
		row &= 0b11111101;
     854:	1d 7f       	andi	r17, 0xFD	; 253
	}

	if (eeprom_read(0x2A) <= 30)
     856:	8a e2       	ldi	r24, 0x2A	; 42
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     85e:	4f 97       	sbiw	r24, 0x1f	; 31
     860:	10 f4       	brcc	.+4      	; 0x866 <__stack+0x7>
	{
		row |= 0b00000100;
     862:	14 60       	ori	r17, 0x04	; 4
     864:	01 c0       	rjmp	.+2      	; 0x868 <__stack+0x9>
	}
	else
	{
		row &= 0b11111011;
     866:	1b 7f       	andi	r17, 0xFB	; 251
	}

	if (eeprom_read(0x2E) <= 30)
     868:	8e e2       	ldi	r24, 0x2E	; 46
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     870:	4f 97       	sbiw	r24, 0x1f	; 31
     872:	10 f4       	brcc	.+4      	; 0x878 <__stack+0x19>
	{
		row |= 0b00001000;
     874:	18 60       	ori	r17, 0x08	; 8
     876:	01 c0       	rjmp	.+2      	; 0x87a <__stack+0x1b>
	}
	else
	{
		row &= 0b11110111;
     878:	17 7f       	andi	r17, 0xF7	; 247
	}
	PORTA = row;
     87a:	1b bb       	out	0x1b, r17	; 27
	PORTA &= ~_BV(4);	//Clock ON
     87c:	dc 98       	cbi	0x1b, 4	; 27
	PORTA |= _BV(5);
     87e:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     880:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= _BV(7);
     882:	df 9a       	sbi	0x1b, 7	; 27

	PORTA &= ~_BV(4); //Clock OFF
     884:	dc 98       	cbi	0x1b, 4	; 27
	PORTA |= _BV(5);
     886:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     888:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~_BV(7);
     88a:	df 98       	cbi	0x1b, 7	; 27

	//ROW4-----------------------------------------------------
	if (eeprom_read(0x32) <= 30)
     88c:	82 e3       	ldi	r24, 0x32	; 50
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     894:	4f 97       	sbiw	r24, 0x1f	; 31
     896:	10 f4       	brcc	.+4      	; 0x89c <__stack+0x3d>
	{
		row |= 0b00000001;
     898:	11 60       	ori	r17, 0x01	; 1
     89a:	01 c0       	rjmp	.+2      	; 0x89e <__stack+0x3f>
	}
	else
	{
		row &= 0b11111110;
     89c:	1e 7f       	andi	r17, 0xFE	; 254
	}

	if (eeprom_read(0x36) <= 30)
     89e:	86 e3       	ldi	r24, 0x36	; 54
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     8a6:	4f 97       	sbiw	r24, 0x1f	; 31
     8a8:	10 f4       	brcc	.+4      	; 0x8ae <__stack+0x4f>
	{
		row |= 0b00000010;
     8aa:	12 60       	ori	r17, 0x02	; 2
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__stack+0x51>
	}
	else
	{
		row &= 0b11111101;
     8ae:	1d 7f       	andi	r17, 0xFD	; 253
	}

	if (eeprom_read(0x3A) <= 30)
     8b0:	8a e3       	ldi	r24, 0x3A	; 58
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     8b8:	4f 97       	sbiw	r24, 0x1f	; 31
     8ba:	10 f4       	brcc	.+4      	; 0x8c0 <__stack+0x61>
	{
		row |= 0b00000100;
     8bc:	14 60       	ori	r17, 0x04	; 4
     8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__stack+0x63>
	}
	else
	{
		row &= 0b11111011;
     8c0:	1b 7f       	andi	r17, 0xFB	; 251
	}

	if (eeprom_read(0x3E) <= 30)
     8c2:	8e e3       	ldi	r24, 0x3E	; 62
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     8ca:	4f 97       	sbiw	r24, 0x1f	; 31
     8cc:	10 f4       	brcc	.+4      	; 0x8d2 <__stack+0x73>
	{
		row |= 0b00001000;
     8ce:	18 60       	ori	r17, 0x08	; 8
     8d0:	01 c0       	rjmp	.+2      	; 0x8d4 <__stack+0x75>
	}
	else
	{
		row &= 0b11110111;
     8d2:	17 7f       	andi	r17, 0xF7	; 247
	}
	PORTA = row;
     8d4:	1b bb       	out	0x1b, r17	; 27
	PORTA |= _BV(4);	//Clock ON
     8d6:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA |= _BV(5);
     8d8:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     8da:	de 98       	cbi	0x1b, 6	; 27
	PORTA |= _BV(7);
     8dc:	df 9a       	sbi	0x1b, 7	; 27

	PORTA |= _BV(4); //Clock OFF
     8de:	dc 9a       	sbi	0x1b, 4	; 27
	PORTA |= _BV(5);
     8e0:	dd 9a       	sbi	0x1b, 5	; 27
	PORTA &= ~_BV(6);
     8e2:	de 98       	cbi	0x1b, 6	; 27
	PORTA &= ~_BV(7);
     8e4:	df 98       	cbi	0x1b, 7	; 27

	//ROW5-----------------------------------------------------
	if (eeprom_read(0x42) <= 30)
     8e6:	82 e4       	ldi	r24, 0x42	; 66
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     8ee:	4f 97       	sbiw	r24, 0x1f	; 31
     8f0:	10 f4       	brcc	.+4      	; 0x8f6 <__stack+0x97>
	{
		row |= 0b00000001;
     8f2:	11 60       	ori	r17, 0x01	; 1
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <__stack+0x99>
	}
	else
	{
		row &= 0b11111110;
     8f6:	1e 7f       	andi	r17, 0xFE	; 254
	}

	if (eeprom_read(0x46) <= 30)
     8f8:	86 e4       	ldi	r24, 0x46	; 70
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     900:	4f 97       	sbiw	r24, 0x1f	; 31
     902:	10 f4       	brcc	.+4      	; 0x908 <__stack+0xa9>
	{
		row |= 0b00000010;
     904:	12 60       	ori	r17, 0x02	; 2
     906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xab>
	}
	else
	{
		row &= 0b11111101;
     908:	1d 7f       	andi	r17, 0xFD	; 253
	}

	if (eeprom_read(0x4A) <= 30)
     90a:	8a e4       	ldi	r24, 0x4A	; 74
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     912:	4f 97       	sbiw	r24, 0x1f	; 31
     914:	10 f4       	brcc	.+4      	; 0x91a <__stack+0xbb>
	{
		row |= 0b00000100;
     916:	14 60       	ori	r17, 0x04	; 4
     918:	01 c0       	rjmp	.+2      	; 0x91c <__stack+0xbd>
	}
	else
	{
		row &= 0b11111011;
     91a:	1b 7f       	andi	r17, 0xFB	; 251
	}

	if (eeprom_read(0x4E) <= 30)
     91c:	8e e4       	ldi	r24, 0x4E	; 78
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 56 03 	call	0x6ac	; 0x6ac <eeprom_read>
     924:	4f 97       	sbiw	r24, 0x1f	; 31
     926:	18 f4       	brcc	.+6      	; 0x92e <__stack+0xcf>
	{
		row |= 0b00001000;
     928:	81 2f       	mov	r24, r17
     92a:	88 60       	ori	r24, 0x08	; 8
     92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
	}
	else
	{
		row &= 0b11110111;
     92e:	81 2f       	mov	r24, r17
     930:	87 7f       	andi	r24, 0xF7	; 247
	}
	PORTA = row;
     932:	8b bb       	out	0x1b, r24	; 27
	PORTA &= ~_BV(4);	//Clock ON
     934:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     936:	dd 98       	cbi	0x1b, 5	; 27
	PORTA |= _BV(6);
     938:	de 9a       	sbi	0x1b, 6	; 27
	PORTA |= _BV(7);
     93a:	df 9a       	sbi	0x1b, 7	; 27

	PORTA &= ~_BV(4); //Clock OFF
     93c:	dc 98       	cbi	0x1b, 4	; 27
	PORTA &= ~_BV(5);
     93e:	dd 98       	cbi	0x1b, 5	; 27
	PORTA |= _BV(6);
     940:	de 9a       	sbi	0x1b, 6	; 27
	PORTA &= ~_BV(7);
     942:	df 98       	cbi	0x1b, 7	; 27

	return;
}
     944:	1f 91       	pop	r17
     946:	08 95       	ret

00000948 <init_keypad>:
	return EEDR;
}

void init_keypad(void)
{
	DDRC = 0x03;
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	84 bb       	out	0x14, r24	; 20
	PORTC = 0xFC;
     94c:	8c ef       	ldi	r24, 0xFC	; 252
     94e:	85 bb       	out	0x15, r24	; 21
     950:	80 e0       	ldi	r24, 0x00	; 0

	for (uint8_t i = 0; i < 4; i++)
	{
		PORTC |= _BV(0); //ABCD
     952:	a8 9a       	sbi	0x15, 0	; 21
		PORTC |= _BV(1); //1000 -> 1111
     954:	a9 9a       	sbi	0x15, 1	; 21
		PORTC &= ~_BV(1);
     956:	a9 98       	cbi	0x15, 1	; 21
void init_keypad(void)
{
	DDRC = 0x03;
	PORTC = 0xFC;

	for (uint8_t i = 0; i < 4; i++)
     958:	8f 5f       	subi	r24, 0xFF	; 255
     95a:	84 30       	cpi	r24, 0x04	; 4
     95c:	d1 f7       	brne	.-12     	; 0x952 <init_keypad+0xa>
		PORTC |= _BV(0); //ABCD
		PORTC |= _BV(1); //1000 -> 1111
		PORTC &= ~_BV(1);
	}
	return;
}
     95e:	08 95       	ret

00000960 <scan_keypad>:

int8_t scan_keypad(void)
{
	PORTC &= ~_BV(0); //ABCD
     960:	a8 98       	cbi	0x15, 0	; 21
	PORTC |= _BV(1);  //0111
     962:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~_BV(1);
     964:	a9 98       	cbi	0x15, 1	; 21
     966:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 100; i++)
	{
		if (bit_is_clear(PINC, 2))
     968:	9a 99       	sbic	0x13, 2	; 19
     96a:	04 c0       	rjmp	.+8      	; 0x974 <scan_keypad+0x14>
		{
			//1
			while (bit_is_clear(PINC, 2));
     96c:	9a 9b       	sbis	0x13, 2	; 19
     96e:	fe cf       	rjmp	.-4      	; 0x96c <scan_keypad+0xc>
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	08 95       	ret
			return 1;
		}else if (bit_is_clear(PINC, 3))
     974:	9b 99       	sbic	0x13, 3	; 19
     976:	04 c0       	rjmp	.+8      	; 0x980 <scan_keypad+0x20>
		{
			//2
			while (bit_is_clear(PINC, 3));
     978:	9b 9b       	sbis	0x13, 3	; 19
     97a:	fe cf       	rjmp	.-4      	; 0x978 <scan_keypad+0x18>
     97c:	82 e0       	ldi	r24, 0x02	; 2
     97e:	08 95       	ret
			return 2;
		}else if (bit_is_clear(PINC, 4))
     980:	9c 99       	sbic	0x13, 4	; 19
     982:	04 c0       	rjmp	.+8      	; 0x98c <scan_keypad+0x2c>
		{
			//3
			while (bit_is_clear(PINC, 4));
     984:	9c 9b       	sbis	0x13, 4	; 19
     986:	fe cf       	rjmp	.-4      	; 0x984 <scan_keypad+0x24>
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	08 95       	ret
			return 3;
		}else if (bit_is_clear(PINC, 5))
     98c:	9d 99       	sbic	0x13, 5	; 19
     98e:	04 c0       	rjmp	.+8      	; 0x998 <scan_keypad+0x38>
		{
			//DEL
			while (bit_is_clear(PINC, 5));
     990:	9d 9b       	sbis	0x13, 5	; 19
     992:	fe cf       	rjmp	.-4      	; 0x990 <scan_keypad+0x30>
     994:	8a e0       	ldi	r24, 0x0A	; 10
     996:	08 95       	ret
			return 10;
		}else if (bit_is_clear(PINC, 6))
     998:	9e 99       	sbic	0x13, 6	; 19
     99a:	04 c0       	rjmp	.+8      	; 0x9a4 <scan_keypad+0x44>
		{
			//UP
			while (bit_is_clear(PINC, 6));
     99c:	9e 9b       	sbis	0x13, 6	; 19
     99e:	fe cf       	rjmp	.-4      	; 0x99c <scan_keypad+0x3c>
     9a0:	8b e0       	ldi	r24, 0x0B	; 11
     9a2:	08 95       	ret
int8_t scan_keypad(void)
{
	PORTC &= ~_BV(0); //ABCD
	PORTC |= _BV(1);  //0111
	PORTC &= ~_BV(1);
	for (uint8_t i = 0; i < 100; i++)
     9a4:	8f 5f       	subi	r24, 0xFF	; 255
     9a6:	84 36       	cpi	r24, 0x64	; 100
     9a8:	f9 f6       	brne	.-66     	; 0x968 <scan_keypad+0x8>
			while (bit_is_clear(PINC, 7));
			return 16;
		}*/
	}

	PORTC |= _BV(0); //ABCD
     9aa:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= _BV(1); //1011
     9ac:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~_BV(1);
     9ae:	a9 98       	cbi	0x15, 1	; 21
     9b0:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 100; i++)
	{
		if (bit_is_clear(PINC, 2))
     9b2:	9a 99       	sbic	0x13, 2	; 19
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <scan_keypad+0x5e>
		{
			//4
			while (bit_is_clear(PINC, 2));
     9b6:	9a 9b       	sbis	0x13, 2	; 19
     9b8:	fe cf       	rjmp	.-4      	; 0x9b6 <scan_keypad+0x56>
     9ba:	84 e0       	ldi	r24, 0x04	; 4
     9bc:	08 95       	ret
			return 4;
		}else if (bit_is_clear(PINC, 3))
     9be:	9b 99       	sbic	0x13, 3	; 19
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <scan_keypad+0x6a>
		{
			//5
			while (bit_is_clear(PINC, 3));
     9c2:	9b 9b       	sbis	0x13, 3	; 19
     9c4:	fe cf       	rjmp	.-4      	; 0x9c2 <scan_keypad+0x62>
     9c6:	85 e0       	ldi	r24, 0x05	; 5
     9c8:	08 95       	ret
			return 5;
		}else if (bit_is_clear(PINC, 4))
     9ca:	9c 99       	sbic	0x13, 4	; 19
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <scan_keypad+0x76>
		{
			//6
			while (bit_is_clear(PINC, 4));
     9ce:	9c 9b       	sbis	0x13, 4	; 19
     9d0:	fe cf       	rjmp	.-4      	; 0x9ce <scan_keypad+0x6e>
     9d2:	86 e0       	ldi	r24, 0x06	; 6
     9d4:	08 95       	ret
			return 6;
		}else if (bit_is_clear(PINC, 5))
     9d6:	9d 99       	sbic	0x13, 5	; 19
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <scan_keypad+0x82>
		{
			//LEFT
			while (bit_is_clear(PINC, 5));
     9da:	9d 9b       	sbis	0x13, 5	; 19
     9dc:	fe cf       	rjmp	.-4      	; 0x9da <scan_keypad+0x7a>
     9de:	8c e0       	ldi	r24, 0x0C	; 12
     9e0:	08 95       	ret
			return 12;
		}else if (bit_is_clear(PINC, 6))
     9e2:	9e 99       	sbic	0x13, 6	; 19
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <scan_keypad+0x8e>
		{
			//DOWN
			while (bit_is_clear(PINC, 6));
     9e6:	9e 9b       	sbis	0x13, 6	; 19
     9e8:	fe cf       	rjmp	.-4      	; 0x9e6 <scan_keypad+0x86>
     9ea:	8d e0       	ldi	r24, 0x0D	; 13
     9ec:	08 95       	ret
			return 13;
		}else if (bit_is_clear(PINC, 7))
     9ee:	9f 99       	sbic	0x13, 7	; 19
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <scan_keypad+0x9a>
		{
			//RIGHT
			while (bit_is_clear(PINC, 7));
     9f2:	9f 9b       	sbis	0x13, 7	; 19
     9f4:	fe cf       	rjmp	.-4      	; 0x9f2 <scan_keypad+0x92>
     9f6:	8e e0       	ldi	r24, 0x0E	; 14
     9f8:	08 95       	ret
	}

	PORTC |= _BV(0); //ABCD
	PORTC |= _BV(1); //1011
	PORTC &= ~_BV(1);
	for (uint8_t i = 0; i < 100; i++)
     9fa:	8f 5f       	subi	r24, 0xFF	; 255
     9fc:	84 36       	cpi	r24, 0x64	; 100
     9fe:	c9 f6       	brne	.-78     	; 0x9b2 <scan_keypad+0x52>
			return 14;
		}
	}
	//delay_ms(1000);

	PORTC |= _BV(0); //ABCD
     a00:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= _BV(1); //1101
     a02:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~_BV(1);
     a04:	a9 98       	cbi	0x15, 1	; 21
     a06:	80 e0       	ldi	r24, 0x00	; 0
	for (uint8_t i = 0; i < 100; i++)
	{
		if (bit_is_clear(PINC, 2))
     a08:	9a 99       	sbic	0x13, 2	; 19
     a0a:	04 c0       	rjmp	.+8      	; 0xa14 <scan_keypad+0xb4>
		{
			//7
			while (bit_is_clear(PINC, 2));
     a0c:	9a 9b       	sbis	0x13, 2	; 19
     a0e:	fe cf       	rjmp	.-4      	; 0xa0c <scan_keypad+0xac>
     a10:	87 e0       	ldi	r24, 0x07	; 7
     a12:	08 95       	ret
			return 7;
		}else if (bit_is_clear(PINC, 3))
     a14:	9b 99       	sbic	0x13, 3	; 19
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <scan_keypad+0xc0>
		{
			//8
			while (bit_is_clear(PINC, 3));
     a18:	9b 9b       	sbis	0x13, 3	; 19
     a1a:	fe cf       	rjmp	.-4      	; 0xa18 <scan_keypad+0xb8>
     a1c:	88 e0       	ldi	r24, 0x08	; 8
     a1e:	08 95       	ret
			return 8;
		}else if (bit_is_clear(PINC, 4))
     a20:	9c 99       	sbic	0x13, 4	; 19
     a22:	04 c0       	rjmp	.+8      	; 0xa2c <scan_keypad+0xcc>
		{
			//9
			while (bit_is_clear(PINC, 4));
     a24:	9c 9b       	sbis	0x13, 4	; 19
     a26:	fe cf       	rjmp	.-4      	; 0xa24 <scan_keypad+0xc4>
     a28:	89 e0       	ldi	r24, 0x09	; 9
     a2a:	08 95       	ret
	//delay_ms(1000);

	PORTC |= _BV(0); //ABCD
	PORTC |= _BV(1); //1101
	PORTC &= ~_BV(1);
	for (uint8_t i = 0; i < 100; i++)
     a2c:	8f 5f       	subi	r24, 0xFF	; 255
     a2e:	84 36       	cpi	r24, 0x64	; 100
     a30:	59 f7       	brne	.-42     	; 0xa08 <scan_keypad+0xa8>
			return 16;
		}*/
	}
	//delay_ms(1000);

	PORTC |= _BV(0); //ABCD
     a32:	a8 9a       	sbi	0x15, 0	; 21
	PORTC |= _BV(1); //1110
     a34:	a9 9a       	sbi	0x15, 1	; 21
	PORTC &= ~_BV(1);
     a36:	a9 98       	cbi	0x15, 1	; 21
     a38:	80 e0       	ldi	r24, 0x00	; 0
		{
			//EMPTY
			while (bit_is_clear(PINC, 2));
			return 16;
		}*/
		if (bit_is_clear(PINC, 3))
     a3a:	9b 99       	sbic	0x13, 3	; 19
     a3c:	04 c0       	rjmp	.+8      	; 0xa46 <scan_keypad+0xe6>
		{
			//0
			while (bit_is_clear(PINC, 3));
     a3e:	9b 9b       	sbis	0x13, 3	; 19
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <scan_keypad+0xde>
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	08 95       	ret
		}else if (bit_is_clear(PINC, 5))
		{
			//EMPTY
			while (bit_is_clear(PINC, 5));
			return 16;
		}*/else if (bit_is_clear(PINC, 6))
     a46:	9e 99       	sbic	0x13, 6	; 19
     a48:	04 c0       	rjmp	.+8      	; 0xa52 <scan_keypad+0xf2>
		{
			//ENTER
			while (bit_is_clear(PINC, 6));
     a4a:	9e 9b       	sbis	0x13, 6	; 19
     a4c:	fe cf       	rjmp	.-4      	; 0xa4a <scan_keypad+0xea>
     a4e:	8f e0       	ldi	r24, 0x0F	; 15
     a50:	08 95       	ret
	//delay_ms(1000);

	PORTC |= _BV(0); //ABCD
	PORTC |= _BV(1); //1110
	PORTC &= ~_BV(1);
	for (uint8_t i = 0; i < 100; i++)
     a52:	8f 5f       	subi	r24, 0xFF	; 255
     a54:	84 36       	cpi	r24, 0x64	; 100
     a56:	89 f7       	brne	.-30     	; 0xa3a <scan_keypad+0xda>
     a58:	8f ef       	ldi	r24, 0xFF	; 255
			return 16;
		}*/
	}
	//delay_ms(1000);
	return -1;
}
     a5a:	08 95       	ret

00000a5c <delay>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a5c:	20 ed       	ldi	r18, 0xD0	; 208
     a5e:	37 e0       	ldi	r19, 0x07	; 7
     a60:	f9 01       	movw	r30, r18
     a62:	31 97       	sbiw	r30, 0x01	; 1
     a64:	f1 f7       	brne	.-4      	; 0xa62 <delay+0x6>

void delay(uint16_t x)
{
	do
		_delay_ms(1);
	while (x--);
     a66:	01 97       	sbiw	r24, 0x01	; 1
     a68:	4f ef       	ldi	r20, 0xFF	; 255
     a6a:	8f 3f       	cpi	r24, 0xFF	; 255
     a6c:	94 07       	cpc	r25, r20
     a6e:	c1 f7       	brne	.-16     	; 0xa60 <delay+0x4>
	return;
}
     a70:	08 95       	ret

00000a72 <init_item>:

void init_item(type_item *x)
{
     a72:	8f 92       	push	r8
     a74:	9f 92       	push	r9
     a76:	af 92       	push	r10
     a78:	bf 92       	push	r11
     a7a:	cf 92       	push	r12
     a7c:	df 92       	push	r13
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
     a88:	fc 01       	movw	r30, r24
     a8a:	7c 01       	movw	r14, r24
     a8c:	dc 01       	movw	r26, r24
     a8e:	20 e0       	ldi	r18, 0x00	; 0
	for (register uint8_t i = 0; i < 20; i++)
	{
		x[i].code[0] = i % 10 + 0x30;
		x[i].code[1] = i / 10 + 0x30;
		x[i].quantity = 200;
     a90:	38 ec       	ldi	r19, 0xC8	; 200

void init_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
	{
		x[i].code[0] = i % 10 + 0x30;
     a92:	82 2f       	mov	r24, r18
     a94:	6a e0       	ldi	r22, 0x0A	; 10
     a96:	0e 94 a7 14 	call	0x294e	; 0x294e <__udivmodqi4>
     a9a:	90 5d       	subi	r25, 0xD0	; 208
     a9c:	9c 93       	st	X, r25
		x[i].code[1] = i / 10 + 0x30;
     a9e:	82 2f       	mov	r24, r18
     aa0:	0e 94 a7 14 	call	0x294e	; 0x294e <__udivmodqi4>
     aa4:	80 5d       	subi	r24, 0xD0	; 208
     aa6:	11 96       	adiw	r26, 0x01	; 1
     aa8:	8c 93       	st	X, r24
     aaa:	11 97       	sbiw	r26, 0x01	; 1
		x[i].quantity = 200;
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	3c 93       	st	X, r19
     ab0:	12 97       	sbiw	r26, 0x02	; 2
	return;
}

void init_item(type_item *x)
{
	for (register uint8_t i = 0; i < 20; i++)
     ab2:	2f 5f       	subi	r18, 0xFF	; 255
     ab4:	14 96       	adiw	r26, 0x04	; 4
     ab6:	24 31       	cpi	r18, 0x14	; 20
     ab8:	61 f7       	brne	.-40     	; 0xa92 <init_item+0x20>
	{
		x[i].code[0] = i % 10 + 0x30;
		x[i].code[1] = i / 10 + 0x30;
		x[i].quantity = 200;
	}
	x[0].price = 10;
     aba:	8a e0       	ldi	r24, 0x0A	; 10
     abc:	83 83       	std	Z+3, r24	; 0x03
	x[1].price = 21;
     abe:	85 e1       	ldi	r24, 0x15	; 21
     ac0:	87 83       	std	Z+7, r24	; 0x07
	x[2].price = 3;
     ac2:	43 e0       	ldi	r20, 0x03	; 3
     ac4:	43 87       	std	Z+11, r20	; 0x0b
	x[3].price = 5;
     ac6:	35 e0       	ldi	r19, 0x05	; 5
     ac8:	37 87       	std	Z+15, r19	; 0x0f
	x[4].price = 8;
     aca:	28 e0       	ldi	r18, 0x08	; 8
     acc:	23 8b       	std	Z+19, r18	; 0x13
	x[5].price = 12;
     ace:	9c e0       	ldi	r25, 0x0C	; 12
     ad0:	97 8b       	std	Z+23, r25	; 0x17
	x[6].price = 50;
     ad2:	82 e3       	ldi	r24, 0x32	; 50
     ad4:	83 8f       	std	Z+27, r24	; 0x1b
	x[7].price = 8;
     ad6:	27 8f       	std	Z+31, r18	; 0x1f
	x[8].price = 12;
     ad8:	93 a3       	std	Z+35, r25	; 0x23
	x[9].price = 22;
     ada:	86 e1       	ldi	r24, 0x16	; 22
     adc:	87 a3       	std	Z+39, r24	; 0x27
	x[10].price = 5;
     ade:	33 a7       	std	Z+43, r19	; 0x2b
	x[11].price = 12;
     ae0:	97 a7       	std	Z+47, r25	; 0x2f
	x[12].price = 59;
     ae2:	8b e3       	ldi	r24, 0x3B	; 59
     ae4:	83 ab       	std	Z+51, r24	; 0x33
	x[13].price = 80;
     ae6:	80 e5       	ldi	r24, 0x50	; 80
     ae8:	87 ab       	std	Z+55, r24	; 0x37
	x[14].price = 3;
     aea:	43 af       	std	Z+59, r20	; 0x3b
	x[15].price = 8;
     aec:	27 af       	std	Z+63, r18	; 0x3f
	x[16].price = 5;
     aee:	e0 5c       	subi	r30, 0xC0	; 192
     af0:	ff 4f       	sbci	r31, 0xFF	; 255
     af2:	33 83       	std	Z+3, r19	; 0x03
	x[17].price = 3;
     af4:	34 96       	adiw	r30, 0x04	; 4
     af6:	43 83       	std	Z+3, r20	; 0x03
	x[18].price = 8;
     af8:	34 96       	adiw	r30, 0x04	; 4
     afa:	23 83       	std	Z+3, r18	; 0x03
	x[19].price = 8;
     afc:	34 96       	adiw	r30, 0x04	; 4
     afe:	23 83       	std	Z+3, r18	; 0x03
     b00:	c0 e0       	ldi	r28, 0x00	; 0
     b02:	d0 e0       	ldi	r29, 0x00	; 0
     b04:	22 c0       	rjmp	.+68     	; 0xb4a <init_item+0xd8>

	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
		{
			if (j == 0)
     b06:	11 23       	and	r17, r17
     b08:	21 f4       	brne	.+8      	; 0xb12 <init_item+0xa0>
				eeprom_write(4 * i + j, x[i].code[1]);
     b0a:	ce 01       	movw	r24, r28
     b0c:	f7 01       	movw	r30, r14
     b0e:	61 81       	ldd	r22, Z+1	; 0x01
     b10:	0f c0       	rjmp	.+30     	; 0xb30 <init_item+0xbe>
			else if (j == 1)
     b12:	11 30       	cpi	r17, 0x01	; 1
     b14:	21 f4       	brne	.+8      	; 0xb1e <init_item+0xac>
				eeprom_write(4 * i + j, x[i].code[0]);
     b16:	c4 01       	movw	r24, r8
     b18:	f7 01       	movw	r30, r14
     b1a:	60 81       	ld	r22, Z
     b1c:	09 c0       	rjmp	.+18     	; 0xb30 <init_item+0xbe>
			else if (j == 2)
     b1e:	12 30       	cpi	r17, 0x02	; 2
     b20:	21 f4       	brne	.+8      	; 0xb2a <init_item+0xb8>
				eeprom_write(4 * i + j, x[i].quantity);
     b22:	c5 01       	movw	r24, r10
     b24:	f7 01       	movw	r30, r14
     b26:	62 81       	ldd	r22, Z+2	; 0x02
     b28:	03 c0       	rjmp	.+6      	; 0xb30 <init_item+0xbe>
			else if (j == 3)
				eeprom_write(4 * i + j, x[i].price);
     b2a:	c6 01       	movw	r24, r12
     b2c:	f7 01       	movw	r30, r14
     b2e:	63 81       	ldd	r22, Z+3	; 0x03
     b30:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <eeprom_write>
	x[18].price = 8;
	x[19].price = 8;

	for (register uint8_t i = 0; i < 20; i++)
	{
		for (register uint8_t j = 0; j < 4; j++)
     b34:	1f 5f       	subi	r17, 0xFF	; 255
     b36:	14 30       	cpi	r17, 0x04	; 4
     b38:	31 f7       	brne	.-52     	; 0xb06 <init_item+0x94>
     b3a:	24 96       	adiw	r28, 0x04	; 4
     b3c:	84 e0       	ldi	r24, 0x04	; 4
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	e8 0e       	add	r14, r24
     b42:	f9 1e       	adc	r15, r25
	x[16].price = 5;
	x[17].price = 3;
	x[18].price = 8;
	x[19].price = 8;

	for (register uint8_t i = 0; i < 20; i++)
     b44:	c0 35       	cpi	r28, 0x50	; 80
     b46:	d1 05       	cpc	r29, r1
     b48:	81 f0       	breq	.+32     	; 0xb6a <init_item+0xf8>
     b4a:	4e 01       	movw	r8, r28
     b4c:	08 94       	sec
     b4e:	81 1c       	adc	r8, r1
     b50:	91 1c       	adc	r9, r1
     b52:	52 e0       	ldi	r21, 0x02	; 2
     b54:	a5 2e       	mov	r10, r21
     b56:	b1 2c       	mov	r11, r1
     b58:	ac 0e       	add	r10, r28
     b5a:	bd 1e       	adc	r11, r29
     b5c:	43 e0       	ldi	r20, 0x03	; 3
     b5e:	c4 2e       	mov	r12, r20
     b60:	d1 2c       	mov	r13, r1
     b62:	cc 0e       	add	r12, r28
     b64:	dd 1e       	adc	r13, r29
     b66:	10 e0       	ldi	r17, 0x00	; 0
     b68:	ce cf       	rjmp	.-100    	; 0xb06 <init_item+0x94>
			else if (j == 3)
				eeprom_write(4 * i + j, x[i].price);
		}
	}
	return;
}
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	1f 91       	pop	r17
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	bf 90       	pop	r11
     b7a:	af 90       	pop	r10
     b7c:	9f 90       	pop	r9
     b7e:	8f 90       	pop	r8
     b80:	08 95       	ret

00000b82 <write_quantity>:
	return;
}

void write_quantity(uint16_t x)
{
	printf("%hu", x);
     b82:	00 d0       	rcall	.+0      	; 0xb84 <write_quantity+0x2>
     b84:	00 d0       	rcall	.+0      	; 0xb86 <write_quantity+0x4>
     b86:	20 e6       	ldi	r18, 0x60	; 96
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	ed b7       	in	r30, 0x3d	; 61
     b8c:	fe b7       	in	r31, 0x3e	; 62
     b8e:	32 83       	std	Z+2, r19	; 0x02
     b90:	21 83       	std	Z+1, r18	; 0x01
     b92:	94 83       	std	Z+4, r25	; 0x04
     b94:	83 83       	std	Z+3, r24	; 0x03
     b96:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	0f 90       	pop	r0
     ba0:	0f 90       	pop	r0
	return;
}
     ba2:	08 95       	ret

00000ba4 <write_price>:
		}
	} while ((pressed = scan_keypad()) != 15 || *choice <= 19);
}

void write_price(uint16_t x)
{
     ba4:	9c 01       	movw	r18, r24
	if (x >= 1000)
     ba6:	83 e0       	ldi	r24, 0x03	; 3
     ba8:	28 3e       	cpi	r18, 0xE8	; 232
     baa:	38 07       	cpc	r19, r24
     bac:	38 f1       	brcs	.+78     	; 0xbfc <write_price+0x58>
		printf("RP%3hu.%03hu.000\n", x / 1000, x % 1000);
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <write_price+0xc>
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <write_price+0xe>
     bb2:	00 d0       	rcall	.+0      	; 0xbb4 <write_price+0x10>
     bb4:	ed b7       	in	r30, 0x3d	; 61
     bb6:	fe b7       	in	r31, 0x3e	; 62
     bb8:	31 96       	adiw	r30, 0x01	; 1
     bba:	84 e6       	ldi	r24, 0x64	; 100
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	ad b7       	in	r26, 0x3d	; 61
     bc0:	be b7       	in	r27, 0x3e	; 62
     bc2:	12 96       	adiw	r26, 0x02	; 2
     bc4:	9c 93       	st	X, r25
     bc6:	8e 93       	st	-X, r24
     bc8:	11 97       	sbiw	r26, 0x01	; 1
     bca:	c9 01       	movw	r24, r18
     bcc:	68 ee       	ldi	r22, 0xE8	; 232
     bce:	73 e0       	ldi	r23, 0x03	; 3
     bd0:	0e 94 b3 14 	call	0x2966	; 0x2966 <__udivmodhi4>
     bd4:	73 83       	std	Z+3, r23	; 0x03
     bd6:	62 83       	std	Z+2, r22	; 0x02
     bd8:	c9 01       	movw	r24, r18
     bda:	68 ee       	ldi	r22, 0xE8	; 232
     bdc:	73 e0       	ldi	r23, 0x03	; 3
     bde:	0e 94 b3 14 	call	0x2966	; 0x2966 <__udivmodhi4>
     be2:	95 83       	std	Z+5, r25	; 0x05
     be4:	84 83       	std	Z+4, r24	; 0x04
     be6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
     bea:	ed b7       	in	r30, 0x3d	; 61
     bec:	fe b7       	in	r31, 0x3e	; 62
     bee:	36 96       	adiw	r30, 0x06	; 6
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	fe bf       	out	0x3e, r31	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	ed bf       	out	0x3d, r30	; 61
     bfa:	08 95       	ret
	else if (x > 0)
     bfc:	21 15       	cp	r18, r1
     bfe:	31 05       	cpc	r19, r1
     c00:	79 f0       	breq	.+30     	; 0xc20 <write_price+0x7c>
		printf("RP%7hu.000\n", x);
     c02:	00 d0       	rcall	.+0      	; 0xc04 <write_price+0x60>
     c04:	00 d0       	rcall	.+0      	; 0xc06 <write_price+0x62>
     c06:	86 e7       	ldi	r24, 0x76	; 118
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	ad b7       	in	r26, 0x3d	; 61
     c0c:	be b7       	in	r27, 0x3e	; 62
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	9c 93       	st	X, r25
     c12:	8e 93       	st	-X, r24
     c14:	11 97       	sbiw	r26, 0x01	; 1
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	3c 93       	st	X, r19
     c1a:	2e 93       	st	-X, r18
     c1c:	13 97       	sbiw	r26, 0x03	; 3
     c1e:	0a c0       	rjmp	.+20     	; 0xc34 <write_price+0x90>
	else
		printf("RP%11hu\n", x);
     c20:	00 d0       	rcall	.+0      	; 0xc22 <write_price+0x7e>
     c22:	00 d0       	rcall	.+0      	; 0xc24 <write_price+0x80>
     c24:	82 e8       	ldi	r24, 0x82	; 130
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	ed b7       	in	r30, 0x3d	; 61
     c2a:	fe b7       	in	r31, 0x3e	; 62
     c2c:	92 83       	std	Z+2, r25	; 0x02
     c2e:	81 83       	std	Z+1, r24	; 0x01
     c30:	14 82       	std	Z+4, r1	; 0x04
     c32:	13 82       	std	Z+3, r1	; 0x03
     c34:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	08 95       	ret

00000c42 <payment>:
	printf("%hu", x);
	return;
}

void payment(uint16_t x)
{
     c42:	cf 92       	push	r12
     c44:	df 92       	push	r13
     c46:	ef 92       	push	r14
     c48:	ff 92       	push	r15
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8c 01       	movw	r16, r24
	ili9341_setcursor(0, ili9341_gety());
     c54:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
     c58:	bc 01       	movw	r22, r24
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("TUNAI     : ");
     c62:	00 d0       	rcall	.+0      	; 0xc64 <payment+0x22>
     c64:	8b e8       	ldi	r24, 0x8B	; 139
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	ed b7       	in	r30, 0x3d	; 61
     c6a:	fe b7       	in	r31, 0x3e	; 62
     c6c:	92 83       	std	Z+2, r25	; 0x02
     c6e:	81 83       	std	Z+1, r24	; 0x01
     c70:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	int8_t pressed = 0;
	uint16_t payment = 0;
	uint16_t temp_x = ili9341_getx();
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <ili9341_getx>
     c7c:	6c 01       	movw	r12, r24
	uint16_t temp_y = ili9341_gety();
     c7e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
     c82:	7c 01       	movw	r14, r24
     c84:	c0 e0       	ldi	r28, 0x00	; 0
     c86:	d0 e0       	ldi	r29, 0x00	; 0
     c88:	21 c0       	rjmp	.+66     	; 0xccc <payment+0x8a>
	while ((pressed = scan_keypad()) != 15 || payment < x)
	{
		if (pressed >= 0 && pressed <= 9)
     c8a:	8a 30       	cpi	r24, 0x0A	; 10
     c8c:	58 f4       	brcc	.+22     	; 0xca4 <payment+0x62>
		{
			payment = check_overflow(payment, pressed, 65535);
     c8e:	68 2f       	mov	r22, r24
     c90:	77 27       	eor	r23, r23
     c92:	67 fd       	sbrc	r22, 7
     c94:	70 95       	com	r23
     c96:	ce 01       	movw	r24, r28
     c98:	4f ef       	ldi	r20, 0xFF	; 255
     c9a:	5f ef       	ldi	r21, 0xFF	; 255
     c9c:	0e 94 c7 02 	call	0x58e	; 0x58e <check_overflow>
     ca0:	ec 01       	movw	r28, r24
     ca2:	0d c0       	rjmp	.+26     	; 0xcbe <payment+0x7c>
		}else if (pressed == 10)
     ca4:	8a 30       	cpi	r24, 0x0A	; 10
     ca6:	59 f4       	brne	.+22     	; 0xcbe <payment+0x7c>
		{
			payment /= 10;
     ca8:	ce 01       	movw	r24, r28
     caa:	6a e0       	ldi	r22, 0x0A	; 10
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	0e 94 b3 14 	call	0x2966	; 0x2966 <__udivmodhi4>
     cb2:	eb 01       	movw	r28, r22
			ili9341_backspace(1, GREEN);
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	60 ee       	ldi	r22, 0xE0	; 224
     cb8:	77 e0       	ldi	r23, 0x07	; 7
     cba:	0e 94 07 14 	call	0x280e	; 0x280e <ili9341_backspace>
		}
		ili9341_setcursor(temp_x, temp_y);
     cbe:	c6 01       	movw	r24, r12
     cc0:	b7 01       	movw	r22, r14
     cc2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		write_price(payment);
     cc6:	ce 01       	movw	r24, r28
     cc8:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
	printf("TUNAI     : ");
	int8_t pressed = 0;
	uint16_t payment = 0;
	uint16_t temp_x = ili9341_getx();
	uint16_t temp_y = ili9341_gety();
	while ((pressed = scan_keypad()) != 15 || payment < x)
     ccc:	0e 94 b0 04 	call	0x960	; 0x960 <scan_keypad>
     cd0:	8f 30       	cpi	r24, 0x0F	; 15
     cd2:	d9 f6       	brne	.-74     	; 0xc8a <payment+0x48>
     cd4:	c0 17       	cp	r28, r16
     cd6:	d1 07       	cpc	r29, r17
     cd8:	90 f3       	brcs	.-28     	; 0xcbe <payment+0x7c>
			ili9341_backspace(1, GREEN);
		}
		ili9341_setcursor(temp_x, temp_y);
		write_price(payment);
	}
	printf("\nTOTAL     : ");
     cda:	00 d0       	rcall	.+0      	; 0xcdc <payment+0x9a>
     cdc:	88 e9       	ldi	r24, 0x98	; 152
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	ed b7       	in	r30, 0x3d	; 61
     ce2:	fe b7       	in	r31, 0x3e	; 62
     ce4:	92 83       	std	Z+2, r25	; 0x02
     ce6:	81 83       	std	Z+1, r24	; 0x01
     ce8:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	write_price(x);
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
	ili9341_write('\n');
     cf6:	8a e0       	ldi	r24, 0x0A	; 10
     cf8:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
	ili9341_drawhline(0, ili9341_gety() + 2, 200, BLUE);
     cfc:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
     d00:	bc 01       	movw	r22, r24
     d02:	6e 5f       	subi	r22, 0xFE	; 254
     d04:	7f 4f       	sbci	r23, 0xFF	; 255
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	48 ec       	ldi	r20, 0xC8	; 200
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	2f e1       	ldi	r18, 0x1F	; 31
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	printf("\nKembalian : ");
     d16:	00 d0       	rcall	.+0      	; 0xd18 <payment+0xd6>
     d18:	86 ea       	ldi	r24, 0xA6	; 166
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	ed b7       	in	r30, 0x3d	; 61
     d1e:	fe b7       	in	r31, 0x3e	; 62
     d20:	92 83       	std	Z+2, r25	; 0x02
     d22:	81 83       	std	Z+1, r24	; 0x01
     d24:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	write_price(payment - x);
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	ce 01       	movw	r24, r28
     d2e:	80 1b       	sub	r24, r16
     d30:	91 0b       	sbc	r25, r17
     d32:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
	return;
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	df 90       	pop	r13
     d44:	cf 90       	pop	r12
     d46:	08 95       	ret

00000d48 <display_selection_table>:

	return;
}

void display_selection_table(uint8_t *data, uint8_t *choice, uint16_t text_c, uint16_t bg_c, uint16_t highlight_c, uint16_t *threshold, void (*write)(uint16_t))
{
     d48:	2f 92       	push	r2
     d4a:	3f 92       	push	r3
     d4c:	4f 92       	push	r4
     d4e:	5f 92       	push	r5
     d50:	6f 92       	push	r6
     d52:	7f 92       	push	r7
     d54:	8f 92       	push	r8
     d56:	9f 92       	push	r9
     d58:	af 92       	push	r10
     d5a:	bf 92       	push	r11
     d5c:	cf 92       	push	r12
     d5e:	df 92       	push	r13
     d60:	ef 92       	push	r14
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <display_selection_table+0x26>
     d6e:	00 d0       	rcall	.+0      	; 0xd70 <display_selection_table+0x28>
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	5c 01       	movw	r10, r24
     d76:	7c 83       	std	Y+4, r23	; 0x04
     d78:	6b 83       	std	Y+3, r22	; 0x03
     d7a:	2a 01       	movw	r4, r20
     d7c:	39 01       	movw	r6, r18
     d7e:	1a 83       	std	Y+2, r17	; 0x02
     d80:	09 83       	std	Y+1, r16	; 0x01
     d82:	17 01       	movw	r2, r14
     d84:	46 01       	movw	r8, r12
	uint16_t temp_y = ili9341_gety();
     d86:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
     d8a:	7c 01       	movw	r14, r24
     d8c:	cc 24       	eor	r12, r12
     d8e:	dd 24       	eor	r13, r13
	int8_t pressed = 0;
	uint8_t prev_choice = 0;
	do
	{
		//LEFT = 12 RIGHT = 14 UP = 11 DOWN = 13
		if (pressed != -1)
     d90:	8f ef       	ldi	r24, 0xFF	; 255
     d92:	c8 16       	cp	r12, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <display_selection_table+0x50>
     d96:	4b c0       	rjmp	.+150    	; 0xe2e <display_selection_table+0xe6>
		{
			prev_choice = *choice;
     d98:	ab 81       	ldd	r26, Y+3	; 0x03
     d9a:	bc 81       	ldd	r27, Y+4	; 0x04
     d9c:	dc 90       	ld	r13, X
			if (pressed == 11)
     d9e:	bb e0       	ldi	r27, 0x0B	; 11
     da0:	cb 16       	cp	r12, r27
     da2:	69 f4       	brne	.+26     	; 0xdbe <display_selection_table+0x76>
			{
				if (*choice == 21)
     da4:	e5 e1       	ldi	r30, 0x15	; 21
     da6:	de 16       	cp	r13, r30
     da8:	11 f4       	brne	.+4      	; 0xdae <display_selection_table+0x66>
					*choice = 19;
     daa:	e3 e1       	ldi	r30, 0x13	; 19
     dac:	36 c0       	rjmp	.+108    	; 0xe1a <display_selection_table+0xd2>
				else if (*choice != 0)
     dae:	dd 20       	and	r13, r13
     db0:	b9 f1       	breq	.+110    	; 0xe20 <display_selection_table+0xd8>
					(*choice)--;
     db2:	da 94       	dec	r13
     db4:	ab 81       	ldd	r26, Y+3	; 0x03
     db6:	bc 81       	ldd	r27, Y+4	; 0x04
     db8:	dc 92       	st	X, r13
     dba:	d3 94       	inc	r13
     dbc:	31 c0       	rjmp	.+98     	; 0xe20 <display_selection_table+0xd8>
			}
			else if (pressed == 12)
     dbe:	bc e0       	ldi	r27, 0x0C	; 12
     dc0:	cb 16       	cp	r12, r27
     dc2:	69 f4       	brne	.+26     	; 0xdde <display_selection_table+0x96>
			{
				if (*choice >= 3 && *choice <= 19)
     dc4:	8d 2d       	mov	r24, r13
     dc6:	83 50       	subi	r24, 0x03	; 3
     dc8:	81 31       	cpi	r24, 0x11	; 17
     dca:	20 f4       	brcc	.+8      	; 0xdd4 <display_selection_table+0x8c>
					*choice -= 3;
     dcc:	eb 81       	ldd	r30, Y+3	; 0x03
     dce:	fc 81       	ldd	r31, Y+4	; 0x04
     dd0:	80 83       	st	Z, r24
     dd2:	26 c0       	rjmp	.+76     	; 0xe20 <display_selection_table+0xd8>
				else if (*choice == 21)
     dd4:	f5 e1       	ldi	r31, 0x15	; 21
     dd6:	df 16       	cp	r13, r31
     dd8:	19 f5       	brne	.+70     	; 0xe20 <display_selection_table+0xd8>
					(*choice)--;
     dda:	e4 e1       	ldi	r30, 0x14	; 20
     ddc:	1e c0       	rjmp	.+60     	; 0xe1a <display_selection_table+0xd2>
			}
			else if (pressed == 13)
     dde:	fd e0       	ldi	r31, 0x0D	; 13
     de0:	cf 16       	cp	r12, r31
     de2:	49 f4       	brne	.+18     	; 0xdf6 <display_selection_table+0xae>
			{
				*choice >= 20 ? *choice : (*choice)++;
     de4:	83 e1       	ldi	r24, 0x13	; 19
     de6:	8d 15       	cp	r24, r13
     de8:	d8 f0       	brcs	.+54     	; 0xe20 <display_selection_table+0xd8>
     dea:	d3 94       	inc	r13
     dec:	ab 81       	ldd	r26, Y+3	; 0x03
     dee:	bc 81       	ldd	r27, Y+4	; 0x04
     df0:	dc 92       	st	X, r13
     df2:	da 94       	dec	r13
     df4:	15 c0       	rjmp	.+42     	; 0xe20 <display_selection_table+0xd8>
			}
			else if (pressed == 14)
     df6:	be e0       	ldi	r27, 0x0E	; 14
     df8:	cb 16       	cp	r12, r27
     dfa:	91 f4       	brne	.+36     	; 0xe20 <display_selection_table+0xd8>
			{
				if (*choice >= 0 && *choice <= 16)
     dfc:	e0 e1       	ldi	r30, 0x10	; 16
     dfe:	ed 15       	cp	r30, r13
     e00:	40 f0       	brcs	.+16     	; 0xe12 <display_selection_table+0xca>
					*choice += 3;
     e02:	f3 e0       	ldi	r31, 0x03	; 3
     e04:	df 0e       	add	r13, r31
     e06:	ab 81       	ldd	r26, Y+3	; 0x03
     e08:	bc 81       	ldd	r27, Y+4	; 0x04
     e0a:	dc 92       	st	X, r13
     e0c:	bd ef       	ldi	r27, 0xFD	; 253
     e0e:	db 0e       	add	r13, r27
     e10:	07 c0       	rjmp	.+14     	; 0xe20 <display_selection_table+0xd8>
				else if (*choice == 20)
     e12:	e4 e1       	ldi	r30, 0x14	; 20
     e14:	de 16       	cp	r13, r30
     e16:	21 f4       	brne	.+8      	; 0xe20 <display_selection_table+0xd8>
					(*choice)++;
     e18:	e5 e1       	ldi	r30, 0x15	; 21
     e1a:	ab 81       	ldd	r26, Y+3	; 0x03
     e1c:	bc 81       	ldd	r27, Y+4	; 0x04
     e1e:	ec 93       	st	X, r30
			}

			if (*choice == prev_choice)
     e20:	ab 81       	ldd	r26, Y+3	; 0x03
     e22:	bc 81       	ldd	r27, Y+4	; 0x04
     e24:	8c 91       	ld	r24, X
     e26:	8d 15       	cp	r24, r13
     e28:	11 f4       	brne	.+4      	; 0xe2e <display_selection_table+0xe6>
     e2a:	94 e6       	ldi	r25, 0x64	; 100
     e2c:	d9 2e       	mov	r13, r25
				prev_choice = 100;
		}

		ili9341_settextcolour(text_c, bg_c);
     e2e:	c2 01       	movw	r24, r4
     e30:	b3 01       	movw	r22, r6
     e32:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
		if (prev_choice >= 0 && prev_choice <= 19)
     e36:	b3 e1       	ldi	r27, 0x13	; 19
     e38:	bd 15       	cp	r27, r13
     e3a:	c8 f0       	brcs	.+50     	; 0xe6e <display_selection_table+0x126>
		{
			ili9341_settextsize(1);
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(205, prev_choice * 8 + temp_y);
     e42:	0d 2d       	mov	r16, r13
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	b8 01       	movw	r22, r16
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	66 0f       	add	r22, r22
     e4c:	77 1f       	adc	r23, r23
     e4e:	8a 95       	dec	r24
     e50:	e1 f7       	brne	.-8      	; 0xe4a <display_selection_table+0x102>
     e52:	6e 0d       	add	r22, r14
     e54:	7f 1d       	adc	r23, r15
     e56:	8d ec       	ldi	r24, 0xCD	; 205
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			write(data[prev_choice]);
     e5e:	0a 0d       	add	r16, r10
     e60:	1b 1d       	adc	r17, r11
     e62:	f8 01       	movw	r30, r16
     e64:	80 81       	ld	r24, Z
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	f4 01       	movw	r30, r8
     e6a:	09 95       	icall
     e6c:	29 c0       	rjmp	.+82     	; 0xec0 <display_selection_table+0x178>
		}
		else if (prev_choice == 20)
     e6e:	f4 e1       	ldi	r31, 0x14	; 20
     e70:	df 16       	cp	r13, r31
     e72:	69 f4       	brne	.+26     	; 0xe8e <display_selection_table+0x146>
		{
			ili9341_settextsize(2);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(20, 210);
     e7a:	84 e1       	ldi	r24, 0x14	; 20
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	62 ed       	ldi	r22, 0xD2	; 210
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("CONFIRM");
     e86:	00 d0       	rcall	.+0      	; 0xe88 <display_selection_table+0x140>
     e88:	e4 eb       	ldi	r30, 0xB4	; 180
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	0f c0       	rjmp	.+30     	; 0xeac <display_selection_table+0x164>
		}
		else if (prev_choice == 21)
     e8e:	f5 e1       	ldi	r31, 0x15	; 21
     e90:	df 16       	cp	r13, r31
     e92:	b1 f4       	brne	.+44     	; 0xec0 <display_selection_table+0x178>
		{
			ili9341_settextsize(2);
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(230, 210);
     e9a:	86 ee       	ldi	r24, 0xE6	; 230
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	62 ed       	ldi	r22, 0xD2	; 210
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("BACK");
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <display_selection_table+0x160>
     ea8:	ec eb       	ldi	r30, 0xBC	; 188
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	ad b7       	in	r26, 0x3d	; 61
     eae:	be b7       	in	r27, 0x3e	; 62
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	fc 93       	st	X, r31
     eb4:	ee 93       	st	-X, r30
     eb6:	11 97       	sbiw	r26, 0x01	; 1
     eb8:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
		}

		ili9341_settextcolour(text_c, highlight_c);
     ec0:	c2 01       	movw	r24, r4
     ec2:	69 81       	ldd	r22, Y+1	; 0x01
     ec4:	7a 81       	ldd	r23, Y+2	; 0x02
     ec6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
		if (*choice >= 0 && *choice <= 19)
     eca:	ab 81       	ldd	r26, Y+3	; 0x03
     ecc:	bc 81       	ldd	r27, Y+4	; 0x04
     ece:	8c 91       	ld	r24, X
     ed0:	84 31       	cpi	r24, 0x14	; 20
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <display_selection_table+0x18e>
     ed4:	6c c0       	rjmp	.+216    	; 0xfae <display_selection_table+0x266>
		{
			ili9341_settextsize(1);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(205, *choice * 8 + temp_y);
     edc:	eb 81       	ldd	r30, Y+3	; 0x03
     ede:	fc 81       	ldd	r31, Y+4	; 0x04
     ee0:	60 81       	ld	r22, Z
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	13 e0       	ldi	r17, 0x03	; 3
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	1a 95       	dec	r17
     eec:	e1 f7       	brne	.-8      	; 0xee6 <display_selection_table+0x19e>
     eee:	6e 0d       	add	r22, r14
     ef0:	7f 1d       	adc	r23, r15
     ef2:	8d ec       	ldi	r24, 0xCD	; 205
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			write(data[*choice]);
     efa:	ab 81       	ldd	r26, Y+3	; 0x03
     efc:	bc 81       	ldd	r27, Y+4	; 0x04
     efe:	8c 91       	ld	r24, X
     f00:	f5 01       	movw	r30, r10
     f02:	e8 0f       	add	r30, r24
     f04:	f1 1d       	adc	r31, r1
     f06:	80 81       	ld	r24, Z
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	f4 01       	movw	r30, r8
     f0c:	09 95       	icall
			if (data[*choice] == 0)
     f0e:	eb 81       	ldd	r30, Y+3	; 0x03
     f10:	fc 81       	ldd	r31, Y+4	; 0x04
     f12:	80 81       	ld	r24, Z
     f14:	68 2f       	mov	r22, r24
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	f5 01       	movw	r30, r10
     f1a:	e6 0f       	add	r30, r22
     f1c:	f7 1f       	adc	r31, r23
     f1e:	80 81       	ld	r24, Z
     f20:	88 23       	and	r24, r24
     f22:	59 f4       	brne	.+22     	; 0xf3a <display_selection_table+0x1f2>
				ili9341_setcursor(205, *choice * 8 + temp_y);
     f24:	b3 e0       	ldi	r27, 0x03	; 3
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	ba 95       	dec	r27
     f2c:	e1 f7       	brne	.-8      	; 0xf26 <display_selection_table+0x1de>
     f2e:	6e 0d       	add	r22, r14
     f30:	7f 1d       	adc	r23, r15
     f32:	8d ec       	ldi	r24, 0xCD	; 205
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>

			if (pressed >= 0 && pressed <= 9)
     f3a:	f9 e0       	ldi	r31, 0x09	; 9
     f3c:	fc 15       	cp	r31, r12
     f3e:	c8 f0       	brcs	.+50     	; 0xf72 <display_selection_table+0x22a>
			{
				data[*choice] = check_overflow((uint16_t)data[*choice], (uint16_t)pressed, threshold[*choice]);
     f40:	ab 81       	ldd	r26, Y+3	; 0x03
     f42:	bc 81       	ldd	r27, Y+4	; 0x04
     f44:	ec 91       	ld	r30, X
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	85 01       	movw	r16, r10
     f4a:	0e 0f       	add	r16, r30
     f4c:	1f 1f       	adc	r17, r31
     f4e:	6c 2d       	mov	r22, r12
     f50:	77 27       	eor	r23, r23
     f52:	67 fd       	sbrc	r22, 7
     f54:	70 95       	com	r23
     f56:	ee 0f       	add	r30, r30
     f58:	ff 1f       	adc	r31, r31
     f5a:	e2 0d       	add	r30, r2
     f5c:	f3 1d       	adc	r31, r3
     f5e:	40 81       	ld	r20, Z
     f60:	51 81       	ldd	r21, Z+1	; 0x01
     f62:	f8 01       	movw	r30, r16
     f64:	80 81       	ld	r24, Z
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 c7 02 	call	0x58e	; 0x58e <check_overflow>
     f6c:	d8 01       	movw	r26, r16
     f6e:	8c 93       	st	X, r24
     f70:	45 c0       	rjmp	.+138    	; 0xffc <display_selection_table+0x2b4>
			}
			else if (pressed == 10)
     f72:	ba e0       	ldi	r27, 0x0A	; 10
     f74:	cb 16       	cp	r12, r27
     f76:	91 f4       	brne	.+36     	; 0xf9c <display_selection_table+0x254>
			{
				if (data[*choice] > 0)
     f78:	eb 81       	ldd	r30, Y+3	; 0x03
     f7a:	fc 81       	ldd	r31, Y+4	; 0x04
     f7c:	80 81       	ld	r24, Z
     f7e:	f5 01       	movw	r30, r10
     f80:	e8 0f       	add	r30, r24
     f82:	f1 1d       	adc	r31, r1
     f84:	80 81       	ld	r24, Z
     f86:	88 23       	and	r24, r24
     f88:	c9 f1       	breq	.+114    	; 0xffc <display_selection_table+0x2b4>
				{
					data[*choice] /= 10;
     f8a:	6a e0       	ldi	r22, 0x0A	; 10
     f8c:	0e 94 a7 14 	call	0x294e	; 0x294e <__udivmodqi4>
     f90:	80 83       	st	Z, r24
					ili9341_backspace(1, bg_c);
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	b3 01       	movw	r22, r6
     f96:	0e 94 07 14 	call	0x280e	; 0x280e <ili9341_backspace>
     f9a:	30 c0       	rjmp	.+96     	; 0xffc <display_selection_table+0x2b4>
				}
			}
			else if (pressed == 15)
     f9c:	ff e0       	ldi	r31, 0x0F	; 15
     f9e:	cf 16       	cp	r12, r31
     fa0:	69 f5       	brne	.+90     	; 0xffc <display_selection_table+0x2b4>
			{
				prev_choice = *choice;
     fa2:	ab 81       	ldd	r26, Y+3	; 0x03
     fa4:	bc 81       	ldd	r27, Y+4	; 0x04
     fa6:	dc 90       	ld	r13, X
				*choice = 20;
     fa8:	e4 e1       	ldi	r30, 0x14	; 20
     faa:	ec 93       	st	X, r30
     fac:	27 c0       	rjmp	.+78     	; 0xffc <display_selection_table+0x2b4>
			}
		}
		else if (*choice == 20)
     fae:	84 31       	cpi	r24, 0x14	; 20
     fb0:	69 f4       	brne	.+26     	; 0xfcc <display_selection_table+0x284>
		{
			ili9341_settextsize(2);
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(20, 210);
     fb8:	84 e1       	ldi	r24, 0x14	; 20
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	62 ed       	ldi	r22, 0xD2	; 210
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("CONFIRM");
     fc4:	00 d0       	rcall	.+0      	; 0xfc6 <display_selection_table+0x27e>
     fc6:	e4 eb       	ldi	r30, 0xB4	; 180
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	0e c0       	rjmp	.+28     	; 0xfe8 <display_selection_table+0x2a0>
		}
		else if (*choice == 21)
     fcc:	85 31       	cpi	r24, 0x15	; 21
     fce:	b1 f4       	brne	.+44     	; 0xffc <display_selection_table+0x2b4>
		{
			ili9341_settextsize(2);
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
			ili9341_setcursor(230, 210);
     fd6:	86 ee       	ldi	r24, 0xE6	; 230
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	62 ed       	ldi	r22, 0xD2	; 210
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("BACK");
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <display_selection_table+0x29c>
     fe4:	ec eb       	ldi	r30, 0xBC	; 188
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ad b7       	in	r26, 0x3d	; 61
     fea:	be b7       	in	r27, 0x3e	; 62
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	fc 93       	st	X, r31
     ff0:	ee 93       	st	-X, r30
     ff2:	11 97       	sbiw	r26, 0x01	; 1
     ff4:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
		}
	} while ((pressed = scan_keypad()) != 15 || *choice <= 19);
     ffc:	0e 94 b0 04 	call	0x960	; 0x960 <scan_keypad>
    1000:	c8 2e       	mov	r12, r24
    1002:	ff e0       	ldi	r31, 0x0F	; 15
    1004:	8f 17       	cp	r24, r31
    1006:	09 f0       	breq	.+2      	; 0x100a <display_selection_table+0x2c2>
    1008:	c3 ce       	rjmp	.-634    	; 0xd90 <display_selection_table+0x48>
    100a:	ab 81       	ldd	r26, Y+3	; 0x03
    100c:	bc 81       	ldd	r27, Y+4	; 0x04
    100e:	8c 91       	ld	r24, X
    1010:	84 31       	cpi	r24, 0x14	; 20
    1012:	08 f4       	brcc	.+2      	; 0x1016 <display_selection_table+0x2ce>
    1014:	c1 ce       	rjmp	.-638    	; 0xd98 <display_selection_table+0x50>
}
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	bf 90       	pop	r11
    1030:	af 90       	pop	r10
    1032:	9f 90       	pop	r9
    1034:	8f 90       	pop	r8
    1036:	7f 90       	pop	r7
    1038:	6f 90       	pop	r6
    103a:	5f 90       	pop	r5
    103c:	4f 90       	pop	r4
    103e:	3f 90       	pop	r3
    1040:	2f 90       	pop	r2
    1042:	08 95       	ret

00001044 <display_menu4>:
	while (scan_keypad() != 15);
	return;
}

void display_menu4(type_item *x)
{
    1044:	2f 92       	push	r2
    1046:	3f 92       	push	r3
    1048:	4f 92       	push	r4
    104a:	5f 92       	push	r5
    104c:	6f 92       	push	r6
    104e:	7f 92       	push	r7
    1050:	8f 92       	push	r8
    1052:	9f 92       	push	r9
    1054:	af 92       	push	r10
    1056:	bf 92       	push	r11
    1058:	cf 92       	push	r12
    105a:	df 92       	push	r13
    105c:	ef 92       	push	r14
    105e:	ff 92       	push	r15
    1060:	0f 93       	push	r16
    1062:	1f 93       	push	r17
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	ed 97       	sbiw	r28, 0x3d	; 61
    106e:	0f b6       	in	r0, 0x3f	; 63
    1070:	f8 94       	cli
    1072:	de bf       	out	0x3e, r29	; 62
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	cd bf       	out	0x3d, r28	; 61
    1078:	f8 2e       	mov	r15, r24
    107a:	e9 2e       	mov	r14, r25
	ili9341_clear(GREEN);
    107c:	80 ee       	ldi	r24, 0xE0	; 224
    107e:	97 e0       	ldi	r25, 0x07	; 7
    1080:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
	uint8_t price[20] = {};
    1084:	8e 01       	movw	r16, r28
    1086:	0e 5f       	subi	r16, 0xFE	; 254
    1088:	1f 4f       	sbci	r17, 0xFF	; 255
    108a:	84 e1       	ldi	r24, 0x14	; 20
    108c:	d8 01       	movw	r26, r16
    108e:	1d 92       	st	X+, r1
    1090:	8a 95       	dec	r24
    1092:	e9 f7       	brne	.-6      	; 0x108e <display_menu4+0x4a>

	ili9341_settextcolour(BLACK, GREEN);
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	60 ee       	ldi	r22, 0xE0	; 224
    109a:	77 e0       	ldi	r23, 0x07	; 7
    109c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_drawvline(100, 0, 202, BLUE);
    10a6:	84 e6       	ldi	r24, 0x64	; 100
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	4a ec       	ldi	r20, 0xCA	; 202
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	2f e1       	ldi	r18, 0x1F	; 31
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawvline(200, 0, 202, BLUE);
    10ba:	88 ec       	ldi	r24, 0xC8	; 200
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	4a ec       	ldi	r20, 0xCA	; 202
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	2f e1       	ldi	r18, 0x1F	; 31
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>

	ili9341_setcursor(25, 0);
    10ce:	89 e1       	ldi	r24, 0x19	; 25
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("KODE");
    10da:	00 d0       	rcall	.+0      	; 0x10dc <display_menu4+0x98>
    10dc:	81 ec       	ldi	r24, 0xC1	; 193
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	ed b7       	in	r30, 0x3d	; 61
    10e2:	fe b7       	in	r31, 0x3e	; 62
    10e4:	92 83       	std	Z+2, r25	; 0x02
    10e6:	81 83       	std	Z+1, r24	; 0x01
    10e8:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	ili9341_setcursor(120, 0);
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	88 e7       	ldi	r24, 0x78	; 120
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("HARGA\n");
    10fc:	86 ec       	ldi	r24, 0xC6	; 198
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	ili9341_setcursor(120, ili9341_gety());
    1104:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1108:	bc 01       	movw	r22, r24
    110a:	88 e7       	ldi	r24, 0x78	; 120
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("LAMA\n");
    1112:	8c ec       	ldi	r24, 0xCC	; 204
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_setcursor(225, 0);
    111a:	81 ee       	ldi	r24, 0xE1	; 225
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	70 e0       	ldi	r23, 0x00	; 0
    1122:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("HARGA\n");
    1126:	86 ec       	ldi	r24, 0xC6	; 198
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	ili9341_setcursor(225, ili9341_gety());
    112e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1132:	bc 01       	movw	r22, r24
    1134:	81 ee       	ldi	r24, 0xE1	; 225
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("BARU\n");
    113c:	81 ed       	ldi	r24, 0xD1	; 209
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_drawhline(0, ili9341_gety(), 330, BLUE);
    1144:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1148:	bc 01       	movw	r22, r24
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	4a e4       	ldi	r20, 0x4A	; 74
    1150:	51 e0       	ldi	r21, 0x01	; 1
    1152:	2f e1       	ldi	r18, 0x1F	; 31
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_drawhline(0, 202, 330, BLUE);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	6a ec       	ldi	r22, 0xCA	; 202
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	4a e4       	ldi	r20, 0x4A	; 74
    1164:	51 e0       	ldi	r21, 0x01	; 1
    1166:	2f e1       	ldi	r18, 0x1F	; 31
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_settextsize(1);
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_write('\n');
    1174:	8a e0       	ldi	r24, 0x0A	; 10
    1176:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
	uint16_t temp_y = ili9341_gety();
    117a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    117e:	38 2e       	mov	r3, r24
    1180:	29 2e       	mov	r2, r25
    1182:	2f 2d       	mov	r18, r15
    1184:	3e 2d       	mov	r19, r14
    1186:	c9 01       	movw	r24, r18
    1188:	3c 01       	movw	r6, r24
    118a:	48 01       	movw	r8, r16
    118c:	23 2d       	mov	r18, r3
    118e:	32 2d       	mov	r19, r2
    1190:	c9 01       	movw	r24, r18
    1192:	7c 01       	movw	r14, r24
    1194:	83 01       	movw	r16, r6
    1196:	54 01       	movw	r10, r8

	for (register uint8_t i = 0; i < 20; i++)
	{
		ili9341_setcursor(5, i * 8 + temp_y);
		printf("%c%c", x[i].code[1], x[i].code[0]);
    1198:	a6 ed       	ldi	r26, 0xD6	; 214
    119a:	4a 2e       	mov	r4, r26
    119c:	a0 e0       	ldi	r26, 0x00	; 0
    119e:	5a 2e       	mov	r5, r26
	ili9341_drawhline(0, 202, 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
    11a0:	f6 e1       	ldi	r31, 0x16	; 22
    11a2:	cf 2e       	mov	r12, r31
    11a4:	d1 2c       	mov	r13, r1
    11a6:	cc 0e       	add	r12, r28
    11a8:	dd 1e       	adc	r13, r29
	{
		ili9341_setcursor(5, i * 8 + temp_y);
    11aa:	85 e0       	ldi	r24, 0x05	; 5
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	b7 01       	movw	r22, r14
    11b0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%c%c", x[i].code[1], x[i].code[0]);
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <display_menu4+0x172>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <display_menu4+0x174>
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <display_menu4+0x176>
    11ba:	ed b7       	in	r30, 0x3d	; 61
    11bc:	fe b7       	in	r31, 0x3e	; 62
    11be:	31 96       	adiw	r30, 0x01	; 1
    11c0:	ad b7       	in	r26, 0x3d	; 61
    11c2:	be b7       	in	r27, 0x3e	; 62
    11c4:	12 96       	adiw	r26, 0x02	; 2
    11c6:	5c 92       	st	X, r5
    11c8:	4e 92       	st	-X, r4
    11ca:	11 97       	sbiw	r26, 0x01	; 1
    11cc:	d8 01       	movw	r26, r16
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	8c 91       	ld	r24, X
    11d2:	11 97       	sbiw	r26, 0x01	; 1
    11d4:	82 83       	std	Z+2, r24	; 0x02
    11d6:	13 82       	std	Z+3, r1	; 0x03
    11d8:	8c 91       	ld	r24, X
    11da:	84 83       	std	Z+4, r24	; 0x04
    11dc:	15 82       	std	Z+5, r1	; 0x05
    11de:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(105, i * 8 + temp_y);
    11e2:	ed b7       	in	r30, 0x3d	; 61
    11e4:	fe b7       	in	r31, 0x3e	; 62
    11e6:	36 96       	adiw	r30, 0x06	; 6
    11e8:	0f b6       	in	r0, 0x3f	; 63
    11ea:	f8 94       	cli
    11ec:	fe bf       	out	0x3e, r31	; 62
    11ee:	0f be       	out	0x3f, r0	; 63
    11f0:	ed bf       	out	0x3d, r30	; 61
    11f2:	89 e6       	ldi	r24, 0x69	; 105
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		write_price(x[i].price);
    11fc:	d8 01       	movw	r26, r16
    11fe:	13 96       	adiw	r26, 0x03	; 3
    1200:	8c 91       	ld	r24, X
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
		ili9341_setcursor(205, i * 8 + temp_y);
    1208:	8d ec       	ldi	r24, 0xCD	; 205
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	b7 01       	movw	r22, r14
    120e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		write_price(price[i]);
    1212:	f5 01       	movw	r30, r10
    1214:	81 91       	ld	r24, Z+
    1216:	5f 01       	movw	r10, r30
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	e8 0e       	add	r14, r24
    1224:	f9 1e       	adc	r15, r25
    1226:	0c 5f       	subi	r16, 0xFC	; 252
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
	ili9341_drawhline(0, 202, 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
    122a:	ac 14       	cp	r10, r12
    122c:	bd 04       	cpc	r11, r13
    122e:	09 f0       	breq	.+2      	; 0x1232 <display_menu4+0x1ee>
    1230:	bc cf       	rjmp	.-136    	; 0x11aa <display_menu4+0x166>
		ili9341_setcursor(105, i * 8 + temp_y);
		write_price(x[i].price);
		ili9341_setcursor(205, i * 8 + temp_y);
		write_price(price[i]);
	}
	ili9341_settextsize(2);
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_setcursor(20, 210);
    1238:	84 e1       	ldi	r24, 0x14	; 20
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	62 ed       	ldi	r22, 0xD2	; 210
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("CONFIRM");
    1244:	00 d0       	rcall	.+0      	; 0x1246 <display_menu4+0x202>
    1246:	84 eb       	ldi	r24, 0xB4	; 180
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	ad b7       	in	r26, 0x3d	; 61
    124c:	be b7       	in	r27, 0x3e	; 62
    124e:	12 96       	adiw	r26, 0x02	; 2
    1250:	9c 93       	st	X, r25
    1252:	8e 93       	st	-X, r24
    1254:	11 97       	sbiw	r26, 0x01	; 1
    1256:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(230, 210);
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	86 ee       	ldi	r24, 0xE6	; 230
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	62 ed       	ldi	r22, 0xD2	; 210
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("BACK");
    126a:	00 d0       	rcall	.+0      	; 0x126c <display_menu4+0x228>
    126c:	8c eb       	ldi	r24, 0xBC	; 188
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	ed b7       	in	r30, 0x3d	; 61
    1272:	fe b7       	in	r31, 0x3e	; 62
    1274:	92 83       	std	Z+2, r25	; 0x02
    1276:	81 83       	std	Z+1, r24	; 0x01
    1278:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
    127c:	88 e2       	ldi	r24, 0x28	; 40
    127e:	d5 01       	movw	r26, r10
    1280:	1d 92       	st	X+, r1
    1282:	8a 95       	dec	r24
    1284:	e9 f7       	brne	.-6      	; 0x1280 <display_menu4+0x23c>
    1286:	f5 01       	movw	r30, r10
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
	for (register uint8_t i = 0; i < 20; i++)
		threshold[i] = 255;
    128c:	2f ef       	ldi	r18, 0xFF	; 255
    128e:	30 e0       	ldi	r19, 0x00	; 0
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
    1290:	75 01       	movw	r14, r10
    1292:	ce 01       	movw	r24, r28
    1294:	ce 96       	adiw	r24, 0x3e	; 62
		threshold[i] = 255;
    1296:	21 93       	st	Z+, r18
    1298:	31 93       	st	Z+, r19
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
    129a:	e8 17       	cp	r30, r24
    129c:	f9 07       	cpc	r31, r25
    129e:	d9 f7       	brne	.-10     	; 0x1296 <display_menu4+0x252>
	ili9341_setcursor(20, 210);
	printf("CONFIRM");
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
    12a0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
		threshold[i] = 255;
	ili9341_setcursor(0, temp_y);
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	63 2d       	mov	r22, r3
    12a8:	72 2d       	mov	r23, r2
    12aa:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	display_selection_table(price, &choice, BLACK, GREEN, RED, threshold, write_price);
    12ae:	ce 01       	movw	r24, r28
    12b0:	02 96       	adiw	r24, 0x02	; 2
    12b2:	be 01       	movw	r22, r28
    12b4:	6f 5f       	subi	r22, 0xFF	; 255
    12b6:	7f 4f       	sbci	r23, 0xFF	; 255
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	20 ee       	ldi	r18, 0xE0	; 224
    12be:	37 e0       	ldi	r19, 0x07	; 7
    12c0:	00 e0       	ldi	r16, 0x00	; 0
    12c2:	18 ef       	ldi	r17, 0xF8	; 248
    12c4:	e2 ed       	ldi	r30, 0xD2	; 210
    12c6:	ce 2e       	mov	r12, r30
    12c8:	e5 e0       	ldi	r30, 0x05	; 5
    12ca:	de 2e       	mov	r13, r30
    12cc:	0e 94 a4 06 	call	0xd48	; 0xd48 <display_selection_table>

	if (choice == 20)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	84 31       	cpi	r24, 0x14	; 20
    12d4:	89 f4       	brne	.+34     	; 0x12f8 <display_menu4+0x2b4>
	{
		for (register uint8_t i = 0; i < 20; i++)
		{
			if (price[i] != 0)
    12d6:	f4 01       	movw	r30, r8
    12d8:	80 81       	ld	r24, Z
    12da:	88 23       	and	r24, r24
    12dc:	19 f0       	breq	.+6      	; 0x12e4 <display_menu4+0x2a0>
			{
				x[i].price = price[i];
    12de:	d3 01       	movw	r26, r6
    12e0:	13 96       	adiw	r26, 0x03	; 3
    12e2:	8c 93       	st	X, r24
    12e4:	08 94       	sec
    12e6:	81 1c       	adc	r8, r1
    12e8:	91 1c       	adc	r9, r1
    12ea:	e4 e0       	ldi	r30, 0x04	; 4
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	6e 0e       	add	r6, r30
    12f0:	7f 1e       	adc	r7, r31
	ili9341_setcursor(0, temp_y);
	display_selection_table(price, &choice, BLACK, GREEN, RED, threshold, write_price);

	if (choice == 20)
	{
		for (register uint8_t i = 0; i < 20; i++)
    12f2:	8a 14       	cp	r8, r10
    12f4:	9b 04       	cpc	r9, r11
    12f6:	79 f7       	brne	.-34     	; 0x12d6 <display_menu4+0x292>
			}
		}
	}

	return;
}
    12f8:	ed 96       	adiw	r28, 0x3d	; 61
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	1f 91       	pop	r17
    130a:	0f 91       	pop	r16
    130c:	ff 90       	pop	r15
    130e:	ef 90       	pop	r14
    1310:	df 90       	pop	r13
    1312:	cf 90       	pop	r12
    1314:	bf 90       	pop	r11
    1316:	af 90       	pop	r10
    1318:	9f 90       	pop	r9
    131a:	8f 90       	pop	r8
    131c:	7f 90       	pop	r7
    131e:	6f 90       	pop	r6
    1320:	5f 90       	pop	r5
    1322:	4f 90       	pop	r4
    1324:	3f 90       	pop	r3
    1326:	2f 90       	pop	r2
    1328:	08 95       	ret

0000132a <display_menu3>:

	return;
}

void display_menu3(type_item *x)
{
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	18 2f       	mov	r17, r24
    133c:	09 2f       	mov	r16, r25
	ili9341_clear(RED);
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	98 ef       	ldi	r25, 0xF8	; 248
    1342:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
	ili9341_settextcolour(GREEN, RED);
    1346:	80 ee       	ldi	r24, 0xE0	; 224
    1348:	97 e0       	ldi	r25, 0x07	; 7
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	78 ef       	ldi	r23, 0xF8	; 248
    134e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_drawvline(80, 0, 202, BLUE);
    1358:	80 e5       	ldi	r24, 0x50	; 80
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	4a ec       	ldi	r20, 0xCA	; 202
    1362:	50 e0       	ldi	r21, 0x00	; 0
    1364:	2f e1       	ldi	r18, 0x1F	; 31
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawvline(180, 0, 202, BLUE);
    136c:	84 eb       	ldi	r24, 0xB4	; 180
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	4a ec       	ldi	r20, 0xCA	; 202
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	2f e1       	ldi	r18, 0x1F	; 31
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	
	ili9341_setcursor(15, 0);
    1380:	8f e0       	ldi	r24, 0x0F	; 15
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("KODE");
    138c:	00 d0       	rcall	.+0      	; 0x138e <display_menu3+0x64>
    138e:	81 ec       	ldi	r24, 0xC1	; 193
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	ad b7       	in	r26, 0x3d	; 61
    1394:	be b7       	in	r27, 0x3e	; 62
    1396:	12 96       	adiw	r26, 0x02	; 2
    1398:	9c 93       	st	X, r25
    139a:	8e 93       	st	-X, r24
    139c:	11 97       	sbiw	r26, 0x01	; 1
    139e:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	ili9341_setcursor(100, 0);
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	84 e6       	ldi	r24, 0x64	; 100
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("STOCK\n");
    13b2:	8b ed       	ldi	r24, 0xDB	; 219
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	ili9341_setcursor(95, ili9341_gety());
    13ba:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    13be:	bc 01       	movw	r22, r24
    13c0:	8f e5       	ldi	r24, 0x5F	; 95
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("(unit)");
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <display_menu3+0xa0>
    13ca:	81 ee       	ldi	r24, 0xE1	; 225
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	ed b7       	in	r30, 0x3d	; 61
    13d0:	fe b7       	in	r31, 0x3e	; 62
    13d2:	92 83       	std	Z+2, r25	; 0x02
    13d4:	81 83       	std	Z+1, r24	; 0x01
    13d6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	ili9341_setcursor(220, 0);
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	8c ed       	ldi	r24, 0xDC	; 220
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("HARGA\n");
    13ea:	86 ec       	ldi	r24, 0xC6	; 198
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	ili9341_setcursor(190, ili9341_gety());
    13f2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    13f6:	bc 01       	movw	r22, r24
    13f8:	8e eb       	ldi	r24, 0xBE	; 190
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("(per unit)\n");
    1400:	88 ee       	ldi	r24, 0xE8	; 232
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_drawhline(0, ili9341_gety(), 330, BLUE);
    1408:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    140c:	bc 01       	movw	r22, r24
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	4a e4       	ldi	r20, 0x4A	; 74
    1414:	51 e0       	ldi	r21, 0x01	; 1
    1416:	2f e1       	ldi	r18, 0x1F	; 31
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_settextsize(1);
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_write('\n');
    1424:	8a e0       	ldi	r24, 0x0A	; 10
    1426:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
    142a:	21 2f       	mov	r18, r17
    142c:	30 2f       	mov	r19, r16
    142e:	c9 01       	movw	r24, r18
    1430:	ec 01       	movw	r28, r24
    1432:	10 e0       	ldi	r17, 0x00	; 0
	for (register uint8_t i = 0; i < 20; i++)
	{
		//printf("%s %80hu %100hu\n", x[i].code, x[i].quantity, x[i].price);
		ili9341_setcursor(5, ili9341_gety());
		printf("%c%c", x[i].code[1], x[i].code[0]);
    1434:	06 ed       	ldi	r16, 0xD6	; 214
    1436:	c0 2e       	mov	r12, r16
    1438:	00 e0       	ldi	r16, 0x00	; 0
    143a:	d0 2e       	mov	r13, r16
		ili9341_setcursor(85, ili9341_gety());
		printf("%hhu", x[i].quantity);
    143c:	b3 ef       	ldi	r27, 0xF3	; 243
    143e:	eb 2e       	mov	r14, r27
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	fb 2e       	mov	r15, r27
	ili9341_settextsize(1);
	ili9341_write('\n');
	for (register uint8_t i = 0; i < 20; i++)
	{
		//printf("%s %80hu %100hu\n", x[i].code, x[i].quantity, x[i].price);
		ili9341_setcursor(5, ili9341_gety());
    1444:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1448:	bc 01       	movw	r22, r24
    144a:	85 e0       	ldi	r24, 0x05	; 5
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%c%c", x[i].code[1], x[i].code[0]);
    1452:	00 d0       	rcall	.+0      	; 0x1454 <display_menu3+0x12a>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <display_menu3+0x12c>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <display_menu3+0x12e>
    1458:	ed b7       	in	r30, 0x3d	; 61
    145a:	fe b7       	in	r31, 0x3e	; 62
    145c:	31 96       	adiw	r30, 0x01	; 1
    145e:	ad b7       	in	r26, 0x3d	; 61
    1460:	be b7       	in	r27, 0x3e	; 62
    1462:	12 96       	adiw	r26, 0x02	; 2
    1464:	dc 92       	st	X, r13
    1466:	ce 92       	st	-X, r12
    1468:	11 97       	sbiw	r26, 0x01	; 1
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	82 83       	std	Z+2, r24	; 0x02
    146e:	13 82       	std	Z+3, r1	; 0x03
    1470:	88 81       	ld	r24, Y
    1472:	84 83       	std	Z+4, r24	; 0x04
    1474:	15 82       	std	Z+5, r1	; 0x05
    1476:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(85, ili9341_gety());
    147a:	ed b7       	in	r30, 0x3d	; 61
    147c:	fe b7       	in	r31, 0x3e	; 62
    147e:	36 96       	adiw	r30, 0x06	; 6
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	fe bf       	out	0x3e, r31	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	ed bf       	out	0x3d, r30	; 61
    148a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    148e:	bc 01       	movw	r22, r24
    1490:	85 e5       	ldi	r24, 0x55	; 85
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%hhu", x[i].quantity);
    1498:	00 d0       	rcall	.+0      	; 0x149a <display_menu3+0x170>
    149a:	00 d0       	rcall	.+0      	; 0x149c <display_menu3+0x172>
    149c:	ed b7       	in	r30, 0x3d	; 61
    149e:	fe b7       	in	r31, 0x3e	; 62
    14a0:	31 96       	adiw	r30, 0x01	; 1
    14a2:	ad b7       	in	r26, 0x3d	; 61
    14a4:	be b7       	in	r27, 0x3e	; 62
    14a6:	12 96       	adiw	r26, 0x02	; 2
    14a8:	fc 92       	st	X, r15
    14aa:	ee 92       	st	-X, r14
    14ac:	11 97       	sbiw	r26, 0x01	; 1
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	82 83       	std	Z+2, r24	; 0x02
    14b2:	13 82       	std	Z+3, r1	; 0x03
    14b4:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(185, ili9341_gety());
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    14c4:	bc 01       	movw	r22, r24
    14c6:	89 eb       	ldi	r24, 0xB9	; 185
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		write_price(x[i].price);
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
	printf("(per unit)\n");

	ili9341_drawhline(0, ili9341_gety(), 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	for (register uint8_t i = 0; i < 20; i++)
    14d6:	1f 5f       	subi	r17, 0xFF	; 255
    14d8:	24 96       	adiw	r28, 0x04	; 4
    14da:	14 31       	cpi	r17, 0x14	; 20
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <display_menu3+0x1b6>
    14de:	b2 cf       	rjmp	.-156    	; 0x1444 <display_menu3+0x11a>
		ili9341_setcursor(85, ili9341_gety());
		printf("%hhu", x[i].quantity);
		ili9341_setcursor(185, ili9341_gety());
		write_price(x[i].price);
	}
	ili9341_drawhline(0, 202, 330, BLUE);
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	6a ec       	ldi	r22, 0xCA	; 202
    14e6:	70 e0       	ldi	r23, 0x00	; 0
    14e8:	4a e4       	ldi	r20, 0x4A	; 74
    14ea:	51 e0       	ldi	r21, 0x01	; 1
    14ec:	2f e1       	ldi	r18, 0x1F	; 31
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	
	ili9341_settextsize(2);
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_setcursor(130, 210);
    14fa:	82 e8       	ldi	r24, 0x82	; 130
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	62 ed       	ldi	r22, 0xD2	; 210
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	ili9341_settextcolour(GREEN, PURPLE);
    1506:	80 ee       	ldi	r24, 0xE0	; 224
    1508:	97 e0       	ldi	r25, 0x07	; 7
    150a:	6f e0       	ldi	r22, 0x0F	; 15
    150c:	78 e7       	ldi	r23, 0x78	; 120
    150e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	printf("BACK");
    1512:	00 d0       	rcall	.+0      	; 0x1514 <display_menu3+0x1ea>
    1514:	8c eb       	ldi	r24, 0xBC	; 188
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	ed b7       	in	r30, 0x3d	; 61
    151a:	fe b7       	in	r31, 0x3e	; 62
    151c:	92 83       	std	Z+2, r25	; 0x02
    151e:	81 83       	std	Z+1, r24	; 0x01
    1520:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
	while (scan_keypad() != 15);
    1528:	0e 94 b0 04 	call	0x960	; 0x960 <scan_keypad>
    152c:	8f 30       	cpi	r24, 0x0F	; 15
    152e:	e1 f7       	brne	.-8      	; 0x1528 <display_menu3+0x1fe>
	return;
}
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	1f 91       	pop	r17
    1536:	0f 91       	pop	r16
    1538:	ff 90       	pop	r15
    153a:	ef 90       	pop	r14
    153c:	df 90       	pop	r13
    153e:	cf 90       	pop	r12
    1540:	08 95       	ret

00001542 <display_menu2>:
	while (scan_keypad() != 15);
	return;
}

void display_menu2(type_item *x)
{
    1542:	2f 92       	push	r2
    1544:	3f 92       	push	r3
    1546:	4f 92       	push	r4
    1548:	5f 92       	push	r5
    154a:	6f 92       	push	r6
    154c:	7f 92       	push	r7
    154e:	8f 92       	push	r8
    1550:	9f 92       	push	r9
    1552:	af 92       	push	r10
    1554:	bf 92       	push	r11
    1556:	cf 92       	push	r12
    1558:	df 92       	push	r13
    155a:	ef 92       	push	r14
    155c:	ff 92       	push	r15
    155e:	0f 93       	push	r16
    1560:	1f 93       	push	r17
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	ef 97       	sbiw	r28, 0x3f	; 63
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	de bf       	out	0x3e, r29	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	cd bf       	out	0x3d, r28	; 61
    1576:	f8 2e       	mov	r15, r24
    1578:	e9 2e       	mov	r14, r25
	ili9341_clear(CYAN);
    157a:	8f ef       	ldi	r24, 0xFF	; 255
    157c:	97 e0       	ldi	r25, 0x07	; 7
    157e:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
	uint8_t buy[20] = {};
    1582:	8e 01       	movw	r16, r28
    1584:	0e 5f       	subi	r16, 0xFE	; 254
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	84 e1       	ldi	r24, 0x14	; 20
    158a:	d8 01       	movw	r26, r16
    158c:	1d 92       	st	X+, r1
    158e:	8a 95       	dec	r24
    1590:	e9 f7       	brne	.-6      	; 0x158c <display_menu2+0x4a>

	ili9341_settextcolour(MAGENTA, CYAN);
    1592:	8f e1       	ldi	r24, 0x1F	; 31
    1594:	98 ef       	ldi	r25, 0xF8	; 248
    1596:	6f ef       	ldi	r22, 0xFF	; 255
    1598:	77 e0       	ldi	r23, 0x07	; 7
    159a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    159e:	82 e0       	ldi	r24, 0x02	; 2
    15a0:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_drawvline(100, 0, 202, BLUE);
    15a4:	84 e6       	ldi	r24, 0x64	; 100
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	4a ec       	ldi	r20, 0xCA	; 202
    15ae:	50 e0       	ldi	r21, 0x00	; 0
    15b0:	2f e1       	ldi	r18, 0x1F	; 31
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawvline(200, 0, 202, BLUE);
    15b8:	88 ec       	ldi	r24, 0xC8	; 200
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	60 e0       	ldi	r22, 0x00	; 0
    15be:	70 e0       	ldi	r23, 0x00	; 0
    15c0:	4a ec       	ldi	r20, 0xCA	; 202
    15c2:	50 e0       	ldi	r21, 0x00	; 0
    15c4:	2f e1       	ldi	r18, 0x1F	; 31
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>

	ili9341_setcursor(25, 0);
    15cc:	89 e1       	ldi	r24, 0x19	; 25
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	70 e0       	ldi	r23, 0x00	; 0
    15d4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("KODE");
    15d8:	00 d0       	rcall	.+0      	; 0x15da <display_menu2+0x98>
    15da:	81 ec       	ldi	r24, 0xC1	; 193
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	ed b7       	in	r30, 0x3d	; 61
    15e0:	fe b7       	in	r31, 0x3e	; 62
    15e2:	92 83       	std	Z+2, r25	; 0x02
    15e4:	81 83       	std	Z+1, r24	; 0x01
    15e6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	ili9341_setcursor(120, 0);
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	88 e7       	ldi	r24, 0x78	; 120
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	60 e0       	ldi	r22, 0x00	; 0
    15f4:	70 e0       	ldi	r23, 0x00	; 0
    15f6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("STOCK\n");
    15fa:	8b ed       	ldi	r24, 0xDB	; 219
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_setcursor(225, 0);
    1602:	81 ee       	ldi	r24, 0xE1	; 225
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	70 e0       	ldi	r23, 0x00	; 0
    160a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("DIBELI\n");
    160e:	88 ef       	ldi	r24, 0xF8	; 248
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_drawhline(0, ili9341_gety(), 330, BLUE);
    1616:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    161a:	bc 01       	movw	r22, r24
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	4a e4       	ldi	r20, 0x4A	; 74
    1622:	51 e0       	ldi	r21, 0x01	; 1
    1624:	2f e1       	ldi	r18, 0x1F	; 31
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_drawhline(0, 202, 330, BLUE);
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	6a ec       	ldi	r22, 0xCA	; 202
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	4a e4       	ldi	r20, 0x4A	; 74
    1636:	51 e0       	ldi	r21, 0x01	; 1
    1638:	2f e1       	ldi	r18, 0x1F	; 31
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_settextsize(1);
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_write('\n');
    1646:	8a e0       	ldi	r24, 0x0A	; 10
    1648:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
	uint16_t temp_y = ili9341_gety();
    164c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1650:	8e af       	std	Y+62, r24	; 0x3e
    1652:	9f af       	std	Y+63, r25	; 0x3f
    1654:	67 01       	movw	r12, r14
    1656:	8d 2d       	mov	r24, r13
    1658:	9c 2d       	mov	r25, r12
    165a:	3c 01       	movw	r6, r24
    165c:	48 01       	movw	r8, r16
    165e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1660:	3f ad       	ldd	r19, Y+63	; 0x3f
    1662:	c9 01       	movw	r24, r18
    1664:	7c 01       	movw	r14, r24
    1666:	8d 2d       	mov	r24, r13
    1668:	9c 2d       	mov	r25, r12
    166a:	8c 01       	movw	r16, r24
    166c:	54 01       	movw	r10, r8
	for (register uint8_t i = 0; i < 20; i++)
	{
		ili9341_setcursor(5, i * 8 + temp_y);
		printf("%c%c", x[i].code[1], x[i].code[0]);
		ili9341_setcursor(105, i * 8 + temp_y);
		printf("%hhu", x[i].quantity);
    166e:	a3 ef       	ldi	r26, 0xF3	; 243
    1670:	4a 2e       	mov	r4, r26
    1672:	a0 e0       	ldi	r26, 0x00	; 0
    1674:	5a 2e       	mov	r5, r26
	ili9341_drawhline(0, 202, 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
    1676:	f6 e1       	ldi	r31, 0x16	; 22
    1678:	2f 2e       	mov	r2, r31
    167a:	31 2c       	mov	r3, r1
    167c:	2c 0e       	add	r2, r28
    167e:	3d 1e       	adc	r3, r29
	{
		ili9341_setcursor(5, i * 8 + temp_y);
    1680:	85 e0       	ldi	r24, 0x05	; 5
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	b7 01       	movw	r22, r14
    1686:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%c%c", x[i].code[1], x[i].code[0]);
    168a:	00 d0       	rcall	.+0      	; 0x168c <display_menu2+0x14a>
    168c:	00 d0       	rcall	.+0      	; 0x168e <display_menu2+0x14c>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <display_menu2+0x14e>
    1690:	ed b7       	in	r30, 0x3d	; 61
    1692:	fe b7       	in	r31, 0x3e	; 62
    1694:	31 96       	adiw	r30, 0x01	; 1
    1696:	66 ed       	ldi	r22, 0xD6	; 214
    1698:	70 e0       	ldi	r23, 0x00	; 0
    169a:	ad b7       	in	r26, 0x3d	; 61
    169c:	be b7       	in	r27, 0x3e	; 62
    169e:	12 96       	adiw	r26, 0x02	; 2
    16a0:	7c 93       	st	X, r23
    16a2:	6e 93       	st	-X, r22
    16a4:	11 97       	sbiw	r26, 0x01	; 1
    16a6:	d8 01       	movw	r26, r16
    16a8:	11 96       	adiw	r26, 0x01	; 1
    16aa:	8c 91       	ld	r24, X
    16ac:	11 97       	sbiw	r26, 0x01	; 1
    16ae:	82 83       	std	Z+2, r24	; 0x02
    16b0:	13 82       	std	Z+3, r1	; 0x03
    16b2:	8c 91       	ld	r24, X
    16b4:	84 83       	std	Z+4, r24	; 0x04
    16b6:	15 82       	std	Z+5, r1	; 0x05
    16b8:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(105, i * 8 + temp_y);
    16bc:	ed b7       	in	r30, 0x3d	; 61
    16be:	fe b7       	in	r31, 0x3e	; 62
    16c0:	36 96       	adiw	r30, 0x06	; 6
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	fe bf       	out	0x3e, r31	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	ed bf       	out	0x3d, r30	; 61
    16cc:	89 e6       	ldi	r24, 0x69	; 105
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	b7 01       	movw	r22, r14
    16d2:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%hhu", x[i].quantity);
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <display_menu2+0x196>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <display_menu2+0x198>
    16da:	ed b7       	in	r30, 0x3d	; 61
    16dc:	fe b7       	in	r31, 0x3e	; 62
    16de:	31 96       	adiw	r30, 0x01	; 1
    16e0:	ad b7       	in	r26, 0x3d	; 61
    16e2:	be b7       	in	r27, 0x3e	; 62
    16e4:	12 96       	adiw	r26, 0x02	; 2
    16e6:	5c 92       	st	X, r5
    16e8:	4e 92       	st	-X, r4
    16ea:	11 97       	sbiw	r26, 0x01	; 1
    16ec:	d8 01       	movw	r26, r16
    16ee:	12 96       	adiw	r26, 0x02	; 2
    16f0:	8c 91       	ld	r24, X
    16f2:	82 83       	std	Z+2, r24	; 0x02
    16f4:	13 82       	std	Z+3, r1	; 0x03
    16f6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(205, i * 8 + temp_y);
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	8d ec       	ldi	r24, 0xCD	; 205
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	b7 01       	movw	r22, r14
    1708:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%hhu", buy[i]);
    170c:	00 d0       	rcall	.+0      	; 0x170e <display_menu2+0x1cc>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <display_menu2+0x1ce>
    1710:	ed b7       	in	r30, 0x3d	; 61
    1712:	fe b7       	in	r31, 0x3e	; 62
    1714:	31 96       	adiw	r30, 0x01	; 1
    1716:	ad b7       	in	r26, 0x3d	; 61
    1718:	be b7       	in	r27, 0x3e	; 62
    171a:	12 96       	adiw	r26, 0x02	; 2
    171c:	5c 92       	st	X, r5
    171e:	4e 92       	st	-X, r4
    1720:	11 97       	sbiw	r26, 0x01	; 1
    1722:	d5 01       	movw	r26, r10
    1724:	8d 91       	ld	r24, X+
    1726:	5d 01       	movw	r10, r26
    1728:	82 83       	std	Z+2, r24	; 0x02
    172a:	13 82       	std	Z+3, r1	; 0x03
    172c:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1730:	e8 e0       	ldi	r30, 0x08	; 8
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	ee 0e       	add	r14, r30
    1736:	ff 1e       	adc	r15, r31
    1738:	0c 5f       	subi	r16, 0xFC	; 252
    173a:	1f 4f       	sbci	r17, 0xFF	; 255
	ili9341_drawhline(0, 202, 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	a2 14       	cp	r10, r2
    1746:	b3 04       	cpc	r11, r3
    1748:	09 f0       	breq	.+2      	; 0x174c <display_menu2+0x20a>
    174a:	9a cf       	rjmp	.-204    	; 0x1680 <display_menu2+0x13e>
		ili9341_setcursor(105, i * 8 + temp_y);
		printf("%hhu", x[i].quantity);
		ili9341_setcursor(205, i * 8 + temp_y);
		printf("%hhu", buy[i]);
	}
	ili9341_settextsize(2);
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_setcursor(20, 210);
    1752:	84 e1       	ldi	r24, 0x14	; 20
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	62 ed       	ldi	r22, 0xD2	; 210
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("CONFIRM");
    175e:	00 d0       	rcall	.+0      	; 0x1760 <display_menu2+0x21e>
    1760:	84 eb       	ldi	r24, 0xB4	; 180
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	ad b7       	in	r26, 0x3d	; 61
    1766:	be b7       	in	r27, 0x3e	; 62
    1768:	12 96       	adiw	r26, 0x02	; 2
    176a:	9c 93       	st	X, r25
    176c:	8e 93       	st	-X, r24
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(230, 210);
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	86 ee       	ldi	r24, 0xE6	; 230
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	62 ed       	ldi	r22, 0xD2	; 210
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("BACK");
    1784:	00 d0       	rcall	.+0      	; 0x1786 <display_menu2+0x244>
    1786:	8c eb       	ldi	r24, 0xBC	; 188
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	ed b7       	in	r30, 0x3d	; 61
    178c:	fe b7       	in	r31, 0x3e	; 62
    178e:	92 83       	std	Z+2, r25	; 0x02
    1790:	81 83       	std	Z+1, r24	; 0x01
    1792:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
    1796:	88 e2       	ldi	r24, 0x28	; 40
    1798:	d5 01       	movw	r26, r10
    179a:	1d 92       	st	X+, r1
    179c:	8a 95       	dec	r24
    179e:	e9 f7       	brne	.-6      	; 0x179a <display_menu2+0x258>
    17a0:	d5 01       	movw	r26, r10
    17a2:	8d 2d       	mov	r24, r13
    17a4:	9c 2d       	mov	r25, r12
    17a6:	fc 01       	movw	r30, r24
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
	for (register uint8_t i = 0; i < 20; i++)
		threshold[i] = 250 - x[i].quantity;
    17ac:	4a ef       	ldi	r20, 0xFA	; 250
    17ae:	50 e0       	ldi	r21, 0x00	; 0
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
    17b0:	75 01       	movw	r14, r10
    17b2:	9e 01       	movw	r18, r28
    17b4:	22 5c       	subi	r18, 0xC2	; 194
    17b6:	3f 4f       	sbci	r19, 0xFF	; 255
		threshold[i] = 250 - x[i].quantity;
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	ba 01       	movw	r22, r20
    17bc:	68 1b       	sub	r22, r24
    17be:	71 09       	sbc	r23, r1
    17c0:	6d 93       	st	X+, r22
    17c2:	7d 93       	st	X+, r23
    17c4:	34 96       	adiw	r30, 0x04	; 4
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
    17c6:	a2 17       	cp	r26, r18
    17c8:	b3 07       	cpc	r27, r19
    17ca:	b1 f7       	brne	.-20     	; 0x17b8 <display_menu2+0x276>
	ili9341_setcursor(20, 210);
	printf("CONFIRM");
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
    17cc:	19 82       	std	Y+1, r1	; 0x01
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
		threshold[i] = 250 - x[i].quantity;
	ili9341_setcursor(0, temp_y);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	6e ad       	ldd	r22, Y+62	; 0x3e
    17d4:	7f ad       	ldd	r23, Y+63	; 0x3f
    17d6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	display_selection_table(buy, &choice, MAGENTA, CYAN, NAVY, threshold, write_quantity);
    17da:	ce 01       	movw	r24, r28
    17dc:	02 96       	adiw	r24, 0x02	; 2
    17de:	be 01       	movw	r22, r28
    17e0:	6f 5f       	subi	r22, 0xFF	; 255
    17e2:	7f 4f       	sbci	r23, 0xFF	; 255
    17e4:	4f e1       	ldi	r20, 0x1F	; 31
    17e6:	58 ef       	ldi	r21, 0xF8	; 248
    17e8:	2f ef       	ldi	r18, 0xFF	; 255
    17ea:	37 e0       	ldi	r19, 0x07	; 7
    17ec:	0f e0       	ldi	r16, 0x0F	; 15
    17ee:	10 e0       	ldi	r17, 0x00	; 0
    17f0:	e1 ec       	ldi	r30, 0xC1	; 193
    17f2:	ce 2e       	mov	r12, r30
    17f4:	e5 e0       	ldi	r30, 0x05	; 5
    17f6:	de 2e       	mov	r13, r30
    17f8:	0e 94 a4 06 	call	0xd48	; 0xd48 <display_selection_table>
	

	if (choice == 20)
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	84 31       	cpi	r24, 0x14	; 20
    1800:	91 f4       	brne	.+36     	; 0x1826 <display_menu2+0x2e4>
	{
		for (register uint8_t i = 0; i < 20; i++)
		{
			if (buy[i] != 0)
    1802:	d4 01       	movw	r26, r8
    1804:	9c 91       	ld	r25, X
    1806:	99 23       	and	r25, r25
    1808:	21 f0       	breq	.+8      	; 0x1812 <display_menu2+0x2d0>
			{
				x[i].quantity += buy[i];
    180a:	f3 01       	movw	r30, r6
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	89 0f       	add	r24, r25
    1810:	82 83       	std	Z+2, r24	; 0x02
    1812:	08 94       	sec
    1814:	81 1c       	adc	r8, r1
    1816:	91 1c       	adc	r9, r1
    1818:	64 e0       	ldi	r22, 0x04	; 4
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	66 0e       	add	r6, r22
    181e:	77 1e       	adc	r7, r23
	display_selection_table(buy, &choice, MAGENTA, CYAN, NAVY, threshold, write_quantity);
	

	if (choice == 20)
	{
		for (register uint8_t i = 0; i < 20; i++)
    1820:	8a 14       	cp	r8, r10
    1822:	9b 04       	cpc	r9, r11
    1824:	71 f7       	brne	.-36     	; 0x1802 <display_menu2+0x2c0>
			}
		}
	}

	return;
}
    1826:	ef 96       	adiw	r28, 0x3f	; 63
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	7f 90       	pop	r7
    184c:	6f 90       	pop	r6
    184e:	5f 90       	pop	r5
    1850:	4f 90       	pop	r4
    1852:	3f 90       	pop	r3
    1854:	2f 90       	pop	r2
    1856:	08 95       	ret

00001858 <display_menu1_f2>:

	return;
}

void display_menu1_f2(type_item *x, uint8_t *y)
{
    1858:	4f 92       	push	r4
    185a:	5f 92       	push	r5
    185c:	6f 92       	push	r6
    185e:	7f 92       	push	r7
    1860:	8f 92       	push	r8
    1862:	9f 92       	push	r9
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	f8 2e       	mov	r15, r24
    1878:	e9 2e       	mov	r14, r25
    187a:	16 2f       	mov	r17, r22
    187c:	07 2f       	mov	r16, r23
	ili9341_clear(BLACK);
    187e:	80 e0       	ldi	r24, 0x00	; 0
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
	ili9341_settextcolour(WHITE, BLACK);
    1886:	8f ef       	ldi	r24, 0xFF	; 255
    1888:	9f ef       	ldi	r25, 0xFF	; 255
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    1892:	82 e0       	ldi	r24, 0x02	; 2
    1894:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>

	ili9341_setcursor(4, 2);
    1898:	84 e0       	ldi	r24, 0x04	; 4
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	62 e0       	ldi	r22, 0x02	; 2
    189e:	70 e0       	ldi	r23, 0x00	; 0
    18a0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("JUMLAH");
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <display_menu1_f2+0x4e>
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	ad b7       	in	r26, 0x3d	; 61
    18ac:	be b7       	in	r27, 0x3e	; 62
    18ae:	12 96       	adiw	r26, 0x02	; 2
    18b0:	9c 93       	st	X, r25
    18b2:	8e 93       	st	-X, r24
    18b4:	11 97       	sbiw	r26, 0x01	; 1
    18b6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(87, 2);
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	87 e5       	ldi	r24, 0x57	; 87
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	62 e0       	ldi	r22, 0x02	; 2
    18c4:	70 e0       	ldi	r23, 0x00	; 0
    18c6:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("KODE");
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <display_menu1_f2+0x74>
    18cc:	81 ec       	ldi	r24, 0xC1	; 193
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	ed b7       	in	r30, 0x3d	; 61
    18d2:	fe b7       	in	r31, 0x3e	; 62
    18d4:	92 83       	std	Z+2, r25	; 0x02
    18d6:	81 83       	std	Z+1, r24	; 0x01
    18d8:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(155, 2);
    18dc:	0f 90       	pop	r0
    18de:	0f 90       	pop	r0
    18e0:	8b e9       	ldi	r24, 0x9B	; 155
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	62 e0       	ldi	r22, 0x02	; 2
    18e6:	70 e0       	ldi	r23, 0x00	; 0
    18e8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("HARGA");
    18ec:	00 d0       	rcall	.+0      	; 0x18ee <display_menu1_f2+0x96>
    18ee:	86 ec       	ldi	r24, 0xC6	; 198
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	ad b7       	in	r26, 0x3d	; 61
    18f4:	be b7       	in	r27, 0x3e	; 62
    18f6:	12 96       	adiw	r26, 0x02	; 2
    18f8:	9c 93       	st	X, r25
    18fa:	8e 93       	st	-X, r24
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(245, 2);
    1902:	0f 90       	pop	r0
    1904:	0f 90       	pop	r0
    1906:	85 ef       	ldi	r24, 0xF5	; 245
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	62 e0       	ldi	r22, 0x02	; 2
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("TOTAL\n");
    1912:	86 e0       	ldi	r24, 0x06	; 6
    1914:	91 e0       	ldi	r25, 0x01	; 1
    1916:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_drawhline(0, ili9341_gety() + 5, 320, BLUE);
    191a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    191e:	bc 01       	movw	r22, r24
    1920:	6b 5f       	subi	r22, 0xFB	; 251
    1922:	7f 4f       	sbci	r23, 0xFF	; 255
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	40 e4       	ldi	r20, 0x40	; 64
    192a:	51 e0       	ldi	r21, 0x01	; 1
    192c:	2f e1       	ldi	r18, 0x1F	; 31
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	
	ili9341_setcursor(0, ili9341_gety() + 10);
    1934:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1938:	bc 01       	movw	r22, r24
    193a:	66 5f       	subi	r22, 0xF6	; 246
    193c:	7f 4f       	sbci	r23, 0xFF	; 255
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	ili9341_settextsize(1);
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
    194c:	21 2f       	mov	r18, r17
    194e:	30 2f       	mov	r19, r16
    1950:	c9 01       	movw	r24, r18
    1952:	6c 01       	movw	r12, r24
    1954:	2f 2d       	mov	r18, r15
    1956:	3e 2d       	mov	r19, r14
    1958:	c9 01       	movw	r24, r18
    195a:	ec 01       	movw	r28, r24
    195c:	ee 24       	eor	r14, r14
    195e:	ff 24       	eor	r15, r15
    1960:	bb 24       	eor	r11, r11
	{
		if (y[i] != 0)
		{
			x[i].quantity -= y[i];
			ili9341_setcursor(5, ili9341_gety());
			printf("%hhu", y[i]);
    1962:	03 ef       	ldi	r16, 0xF3	; 243
    1964:	40 2e       	mov	r4, r16
    1966:	00 e0       	ldi	r16, 0x00	; 0
    1968:	50 2e       	mov	r5, r16
			ili9341_setcursor(85, ili9341_gety());
			printf("%c%c", x[i].code[1], x[i].code[0]);
    196a:	16 ed       	ldi	r17, 0xD6	; 214
    196c:	61 2e       	mov	r6, r17
    196e:	10 e0       	ldi	r17, 0x00	; 0
    1970:	71 2e       	mov	r7, r17
			ili9341_setcursor(145, ili9341_gety());
			printf("%hhu.000", x[i].price);
    1972:	bc e0       	ldi	r27, 0x0C	; 12
    1974:	8b 2e       	mov	r8, r27
    1976:	b1 e0       	ldi	r27, 0x01	; 1
    1978:	9b 2e       	mov	r9, r27
	uint16_t total = 0;
	uint16_t temp_total = 0;
	//uint8_t temp_y = 0;
	for (register uint8_t i = 0; i < 20; i++)
	{
		if (y[i] != 0)
    197a:	f6 01       	movw	r30, r12
    197c:	90 81       	ld	r25, Z
    197e:	99 23       	and	r25, r25
    1980:	09 f4       	brne	.+2      	; 0x1984 <display_menu1_f2+0x12c>
    1982:	6f c0       	rjmp	.+222    	; 0x1a62 <display_menu1_f2+0x20a>
		{
			x[i].quantity -= y[i];
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	89 1b       	sub	r24, r25
    1988:	8a 83       	std	Y+2, r24	; 0x02
			ili9341_setcursor(5, ili9341_gety());
    198a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    198e:	bc 01       	movw	r22, r24
    1990:	85 e0       	ldi	r24, 0x05	; 5
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("%hhu", y[i]);
    1998:	00 d0       	rcall	.+0      	; 0x199a <display_menu1_f2+0x142>
    199a:	00 d0       	rcall	.+0      	; 0x199c <display_menu1_f2+0x144>
    199c:	ed b7       	in	r30, 0x3d	; 61
    199e:	fe b7       	in	r31, 0x3e	; 62
    19a0:	31 96       	adiw	r30, 0x01	; 1
    19a2:	ad b7       	in	r26, 0x3d	; 61
    19a4:	be b7       	in	r27, 0x3e	; 62
    19a6:	12 96       	adiw	r26, 0x02	; 2
    19a8:	5c 92       	st	X, r5
    19aa:	4e 92       	st	-X, r4
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	d6 01       	movw	r26, r12
    19b0:	8c 91       	ld	r24, X
    19b2:	82 83       	std	Z+2, r24	; 0x02
    19b4:	13 82       	std	Z+3, r1	; 0x03
    19b6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
			ili9341_setcursor(85, ili9341_gety());
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    19c6:	bc 01       	movw	r22, r24
    19c8:	85 e5       	ldi	r24, 0x55	; 85
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("%c%c", x[i].code[1], x[i].code[0]);
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <display_menu1_f2+0x17a>
    19d2:	00 d0       	rcall	.+0      	; 0x19d4 <display_menu1_f2+0x17c>
    19d4:	00 d0       	rcall	.+0      	; 0x19d6 <display_menu1_f2+0x17e>
    19d6:	ed b7       	in	r30, 0x3d	; 61
    19d8:	fe b7       	in	r31, 0x3e	; 62
    19da:	31 96       	adiw	r30, 0x01	; 1
    19dc:	ad b7       	in	r26, 0x3d	; 61
    19de:	be b7       	in	r27, 0x3e	; 62
    19e0:	12 96       	adiw	r26, 0x02	; 2
    19e2:	7c 92       	st	X, r7
    19e4:	6e 92       	st	-X, r6
    19e6:	11 97       	sbiw	r26, 0x01	; 1
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	82 83       	std	Z+2, r24	; 0x02
    19ec:	13 82       	std	Z+3, r1	; 0x03
    19ee:	88 81       	ld	r24, Y
    19f0:	84 83       	std	Z+4, r24	; 0x04
    19f2:	15 82       	std	Z+5, r1	; 0x05
    19f4:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
			ili9341_setcursor(145, ili9341_gety());
    19f8:	ed b7       	in	r30, 0x3d	; 61
    19fa:	fe b7       	in	r31, 0x3e	; 62
    19fc:	36 96       	adiw	r30, 0x06	; 6
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	fe bf       	out	0x3e, r31	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	ed bf       	out	0x3d, r30	; 61
    1a08:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	81 e9       	ldi	r24, 0x91	; 145
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			printf("%hhu.000", x[i].price);
    1a16:	00 d0       	rcall	.+0      	; 0x1a18 <display_menu1_f2+0x1c0>
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <display_menu1_f2+0x1c2>
    1a1a:	ed b7       	in	r30, 0x3d	; 61
    1a1c:	fe b7       	in	r31, 0x3e	; 62
    1a1e:	31 96       	adiw	r30, 0x01	; 1
    1a20:	ad b7       	in	r26, 0x3d	; 61
    1a22:	be b7       	in	r27, 0x3e	; 62
    1a24:	12 96       	adiw	r26, 0x02	; 2
    1a26:	9c 92       	st	X, r9
    1a28:	8e 92       	st	-X, r8
    1a2a:	11 97       	sbiw	r26, 0x01	; 1
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	82 83       	std	Z+2, r24	; 0x02
    1a30:	13 82       	std	Z+3, r1	; 0x03
    1a32:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
			ili9341_setcursor(235, ili9341_gety());
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1a42:	bc 01       	movw	r22, r24
    1a44:	8b ee       	ldi	r24, 0xEB	; 235
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
			temp_total = (y[i] * x[i].price);
    1a4c:	0b 81       	ldd	r16, Y+3	; 0x03
    1a4e:	f6 01       	movw	r30, r12
    1a50:	80 81       	ld	r24, Z
    1a52:	08 9f       	mul	r16, r24
    1a54:	80 01       	movw	r16, r0
    1a56:	11 24       	eor	r1, r1
			write_price(temp_total);
    1a58:	c8 01       	movw	r24, r16
    1a5a:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>
			total += temp_total;
    1a5e:	e0 0e       	add	r14, r16
    1a60:	f1 1e       	adc	r15, r17
	ili9341_settextsize(1);

	uint16_t total = 0;
	uint16_t temp_total = 0;
	//uint8_t temp_y = 0;
	for (register uint8_t i = 0; i < 20; i++)
    1a62:	b3 94       	inc	r11
    1a64:	08 94       	sec
    1a66:	c1 1c       	adc	r12, r1
    1a68:	d1 1c       	adc	r13, r1
    1a6a:	24 96       	adiw	r28, 0x04	; 4
    1a6c:	f4 e1       	ldi	r31, 0x14	; 20
    1a6e:	bf 16       	cp	r11, r31
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <display_menu1_f2+0x21c>
    1a72:	83 cf       	rjmp	.-250    	; 0x197a <display_menu1_f2+0x122>
			temp_total = (y[i] * x[i].price);
			write_price(temp_total);
			total += temp_total;
		}
	}
	ili9341_drawvline(80, 0, ili9341_gety() + 2, BLUE);
    1a74:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1a78:	ac 01       	movw	r20, r24
    1a7a:	4e 5f       	subi	r20, 0xFE	; 254
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	80 e5       	ldi	r24, 0x50	; 80
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	60 e0       	ldi	r22, 0x00	; 0
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	2f e1       	ldi	r18, 0x1F	; 31
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawvline(140, 0, ili9341_gety() + 2, BLUE);
    1a8e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1a92:	ac 01       	movw	r20, r24
    1a94:	4e 5f       	subi	r20, 0xFE	; 254
    1a96:	5f 4f       	sbci	r21, 0xFF	; 255
    1a98:	8c e8       	ldi	r24, 0x8C	; 140
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	60 e0       	ldi	r22, 0x00	; 0
    1a9e:	70 e0       	ldi	r23, 0x00	; 0
    1aa0:	2f e1       	ldi	r18, 0x1F	; 31
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawhline(0, ili9341_gety() + 2, 320, BLUE);
    1aa8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1aac:	bc 01       	movw	r22, r24
    1aae:	6e 5f       	subi	r22, 0xFE	; 254
    1ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	40 e4       	ldi	r20, 0x40	; 64
    1ab8:	51 e0       	ldi	r21, 0x01	; 1
    1aba:	2f e1       	ldi	r18, 0x1F	; 31
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>

	ili9341_setcursor(90, ili9341_gety() + 5);
    1ac2:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1ac6:	bc 01       	movw	r22, r24
    1ac8:	6b 5f       	subi	r22, 0xFB	; 251
    1aca:	7f 4f       	sbci	r23, 0xFF	; 255
    1acc:	8a e5       	ldi	r24, 0x5A	; 90
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("TOTAL");
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <display_menu1_f2+0x27e>
    1ad6:	86 e0       	ldi	r24, 0x06	; 6
    1ad8:	91 e0       	ldi	r25, 0x01	; 1
    1ada:	ad b7       	in	r26, 0x3d	; 61
    1adc:	be b7       	in	r27, 0x3e	; 62
    1ade:	12 96       	adiw	r26, 0x02	; 2
    1ae0:	9c 93       	st	X, r25
    1ae2:	8e 93       	st	-X, r24
    1ae4:	11 97       	sbiw	r26, 0x01	; 1
    1ae6:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(235, ili9341_gety());
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1af2:	bc 01       	movw	r22, r24
    1af4:	8b ee       	ldi	r24, 0xEB	; 235
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	write_price(total);
    1afc:	c7 01       	movw	r24, r14
    1afe:	0e 94 d2 05 	call	0xba4	; 0xba4 <write_price>

	ili9341_drawvline(230, 0, ili9341_gety() + 2, BLUE);
    1b02:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1b06:	ac 01       	movw	r20, r24
    1b08:	4e 5f       	subi	r20, 0xFE	; 254
    1b0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0c:	86 ee       	ldi	r24, 0xE6	; 230
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	60 e0       	ldi	r22, 0x00	; 0
    1b12:	70 e0       	ldi	r23, 0x00	; 0
    1b14:	2f e1       	ldi	r18, 0x1F	; 31
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawhline(0, ili9341_gety() + 2, 320, BLUE);
    1b1c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1b20:	bc 01       	movw	r22, r24
    1b22:	6e 5f       	subi	r22, 0xFE	; 254
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	40 e4       	ldi	r20, 0x40	; 64
    1b2c:	51 e0       	ldi	r21, 0x01	; 1
    1b2e:	2f e1       	ldi	r18, 0x1F	; 31
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>

	ili9341_write('\n');
    1b36:	8a e0       	ldi	r24, 0x0A	; 10
    1b38:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
	if (total)
    1b3c:	e1 14       	cp	r14, r1
    1b3e:	f1 04       	cpc	r15, r1
    1b40:	21 f0       	breq	.+8      	; 0x1b4a <display_menu1_f2+0x2f2>
		payment(total);
    1b42:	c7 01       	movw	r24, r14
    1b44:	0e 94 21 06 	call	0xc42	; 0xc42 <payment>
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <display_menu1_f2+0x2fa>
	else
		printf("TIDAK ADA INPUT\n");
    1b4a:	85 e1       	ldi	r24, 0x15	; 21
    1b4c:	91 e0       	ldi	r25, 0x01	; 1
    1b4e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_settextsize(2);
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_setcursor(130, 220);
    1b58:	82 e8       	ldi	r24, 0x82	; 130
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	6c ed       	ldi	r22, 0xDC	; 220
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	ili9341_settextcolour(WHITE, BLUE);
    1b64:	8f ef       	ldi	r24, 0xFF	; 255
    1b66:	9f ef       	ldi	r25, 0xFF	; 255
    1b68:	6f e1       	ldi	r22, 0x1F	; 31
    1b6a:	70 e0       	ldi	r23, 0x00	; 0
    1b6c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	printf("BACK");
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <display_menu1_f2+0x31a>
    1b72:	8c eb       	ldi	r24, 0xBC	; 188
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	ed b7       	in	r30, 0x3d	; 61
    1b78:	fe b7       	in	r31, 0x3e	; 62
    1b7a:	92 83       	std	Z+2, r25	; 0x02
    1b7c:	81 83       	std	Z+1, r24	; 0x01
    1b7e:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
	while (scan_keypad() != 15);
    1b86:	0e 94 b0 04 	call	0x960	; 0x960 <scan_keypad>
    1b8a:	8f 30       	cpi	r24, 0x0F	; 15
    1b8c:	e1 f7       	brne	.-8      	; 0x1b86 <display_menu1_f2+0x32e>
	return;
}
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	df 90       	pop	r13
    1b9c:	cf 90       	pop	r12
    1b9e:	bf 90       	pop	r11
    1ba0:	9f 90       	pop	r9
    1ba2:	8f 90       	pop	r8
    1ba4:	7f 90       	pop	r7
    1ba6:	6f 90       	pop	r6
    1ba8:	5f 90       	pop	r5
    1baa:	4f 90       	pop	r4
    1bac:	08 95       	ret

00001bae <display_menu1_f1>:
	printf("Masukkan Pilihan : ");
	return;
}

void display_menu1_f1(type_item *x)
{
    1bae:	2f 92       	push	r2
    1bb0:	3f 92       	push	r3
    1bb2:	4f 92       	push	r4
    1bb4:	5f 92       	push	r5
    1bb6:	6f 92       	push	r6
    1bb8:	7f 92       	push	r7
    1bba:	8f 92       	push	r8
    1bbc:	9f 92       	push	r9
    1bbe:	af 92       	push	r10
    1bc0:	bf 92       	push	r11
    1bc2:	cf 92       	push	r12
    1bc4:	df 92       	push	r13
    1bc6:	ef 92       	push	r14
    1bc8:	ff 92       	push	r15
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	ed 97       	sbiw	r28, 0x3d	; 61
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	f8 94       	cli
    1bdc:	de bf       	out	0x3e, r29	; 62
    1bde:	0f be       	out	0x3f, r0	; 63
    1be0:	cd bf       	out	0x3d, r28	; 61
    1be2:	38 2e       	mov	r3, r24
    1be4:	29 2e       	mov	r2, r25
	ili9341_clear(BLACK);
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
	uint8_t sell[20] = {};
    1bee:	8e 01       	movw	r16, r28
    1bf0:	0e 5f       	subi	r16, 0xFE	; 254
    1bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf4:	84 e1       	ldi	r24, 0x14	; 20
    1bf6:	d8 01       	movw	r26, r16
    1bf8:	1d 92       	st	X+, r1
    1bfa:	8a 95       	dec	r24
    1bfc:	e9 f7       	brne	.-6      	; 0x1bf8 <display_menu1_f1+0x4a>

	ili9341_settextcolour(WHITE, BLACK);
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	9f ef       	ldi	r25, 0xFF	; 255
    1c02:	60 e0       	ldi	r22, 0x00	; 0
    1c04:	70 e0       	ldi	r23, 0x00	; 0
    1c06:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_drawvline(100, 0, 202, BLUE);
    1c10:	84 e6       	ldi	r24, 0x64	; 100
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	4a ec       	ldi	r20, 0xCA	; 202
    1c1a:	50 e0       	ldi	r21, 0x00	; 0
    1c1c:	2f e1       	ldi	r18, 0x1F	; 31
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>
	ili9341_drawvline(200, 0, 202, BLUE);
    1c24:	88 ec       	ldi	r24, 0xC8	; 200
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	60 e0       	ldi	r22, 0x00	; 0
    1c2a:	70 e0       	ldi	r23, 0x00	; 0
    1c2c:	4a ec       	ldi	r20, 0xCA	; 202
    1c2e:	50 e0       	ldi	r21, 0x00	; 0
    1c30:	2f e1       	ldi	r18, 0x1F	; 31
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	0e 94 db 11 	call	0x23b6	; 0x23b6 <ili9341_drawvline>

	ili9341_setcursor(25, 0);
    1c38:	89 e1       	ldi	r24, 0x19	; 25
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	70 e0       	ldi	r23, 0x00	; 0
    1c40:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("KODE");
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <display_menu1_f1+0x98>
    1c46:	81 ec       	ldi	r24, 0xC1	; 193
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	ed b7       	in	r30, 0x3d	; 61
    1c4c:	fe b7       	in	r31, 0x3e	; 62
    1c4e:	92 83       	std	Z+2, r25	; 0x02
    1c50:	81 83       	std	Z+1, r24	; 0x01
    1c52:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	ili9341_setcursor(120, 0);
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	88 e7       	ldi	r24, 0x78	; 120
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("STOCK\n");
    1c66:	8b ed       	ldi	r24, 0xDB	; 219
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_setcursor(225, 0);
    1c6e:	81 ee       	ldi	r24, 0xE1	; 225
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	60 e0       	ldi	r22, 0x00	; 0
    1c74:	70 e0       	ldi	r23, 0x00	; 0
    1c76:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("DIJUAL\n");
    1c7a:	85 e2       	ldi	r24, 0x25	; 37
    1c7c:	91 e0       	ldi	r25, 0x01	; 1
    1c7e:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>

	ili9341_drawhline(0, ili9341_gety(), 330, BLUE);
    1c82:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1c86:	bc 01       	movw	r22, r24
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	4a e4       	ldi	r20, 0x4A	; 74
    1c8e:	51 e0       	ldi	r21, 0x01	; 1
    1c90:	2f e1       	ldi	r18, 0x1F	; 31
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_drawhline(0, 202, 330, BLUE);
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	6a ec       	ldi	r22, 0xCA	; 202
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	4a e4       	ldi	r20, 0x4A	; 74
    1ca2:	51 e0       	ldi	r21, 0x01	; 1
    1ca4:	2f e1       	ldi	r18, 0x1F	; 31
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	0e 94 13 12 	call	0x2426	; 0x2426 <ili9341_drawhline>
	ili9341_settextsize(1);
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_write('\n');
    1cb2:	8a e0       	ldi	r24, 0x0A	; 10
    1cb4:	0e 94 c1 13 	call	0x2782	; 0x2782 <ili9341_write>
	uint16_t temp_y = ili9341_gety();
    1cb8:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1cbc:	2c 01       	movw	r4, r24
    1cbe:	23 2d       	mov	r18, r3
    1cc0:	32 2d       	mov	r19, r2
    1cc2:	c9 01       	movw	r24, r18
    1cc4:	6c 01       	movw	r12, r24
    1cc6:	58 01       	movw	r10, r16
    1cc8:	7c 01       	movw	r14, r24
    1cca:	08 e1       	ldi	r16, 0x18	; 24
    1ccc:	10 e0       	ldi	r17, 0x00	; 0

	for (register uint8_t i = 0; i < 20; i++)
	{
		ili9341_setcursor(5, i * 8 + 24);
		printf("%c%c", x[i].code[1], x[i].code[0]);
    1cce:	b6 ed       	ldi	r27, 0xD6	; 214
    1cd0:	6b 2e       	mov	r6, r27
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	7b 2e       	mov	r7, r27
		ili9341_setcursor(105, i * 8 + 24);
		printf("%hhu", x[i].quantity);
    1cd6:	a3 ef       	ldi	r26, 0xF3	; 243
    1cd8:	8a 2e       	mov	r8, r26
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	9a 2e       	mov	r9, r26
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
	{
		ili9341_setcursor(5, i * 8 + 24);
    1cde:	85 e0       	ldi	r24, 0x05	; 5
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	b8 01       	movw	r22, r16
    1ce4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%c%c", x[i].code[1], x[i].code[0]);
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <display_menu1_f1+0x13c>
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <display_menu1_f1+0x13e>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <display_menu1_f1+0x140>
    1cee:	ed b7       	in	r30, 0x3d	; 61
    1cf0:	fe b7       	in	r31, 0x3e	; 62
    1cf2:	31 96       	adiw	r30, 0x01	; 1
    1cf4:	ad b7       	in	r26, 0x3d	; 61
    1cf6:	be b7       	in	r27, 0x3e	; 62
    1cf8:	12 96       	adiw	r26, 0x02	; 2
    1cfa:	7c 92       	st	X, r7
    1cfc:	6e 92       	st	-X, r6
    1cfe:	11 97       	sbiw	r26, 0x01	; 1
    1d00:	d7 01       	movw	r26, r14
    1d02:	11 96       	adiw	r26, 0x01	; 1
    1d04:	8c 91       	ld	r24, X
    1d06:	11 97       	sbiw	r26, 0x01	; 1
    1d08:	82 83       	std	Z+2, r24	; 0x02
    1d0a:	13 82       	std	Z+3, r1	; 0x03
    1d0c:	8c 91       	ld	r24, X
    1d0e:	84 83       	std	Z+4, r24	; 0x04
    1d10:	15 82       	std	Z+5, r1	; 0x05
    1d12:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(105, i * 8 + 24);
    1d16:	ed b7       	in	r30, 0x3d	; 61
    1d18:	fe b7       	in	r31, 0x3e	; 62
    1d1a:	36 96       	adiw	r30, 0x06	; 6
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	fe bf       	out	0x3e, r31	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	ed bf       	out	0x3d, r30	; 61
    1d26:	89 e6       	ldi	r24, 0x69	; 105
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	b8 01       	movw	r22, r16
    1d2c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%hhu", x[i].quantity);
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <display_menu1_f1+0x184>
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <display_menu1_f1+0x186>
    1d34:	ed b7       	in	r30, 0x3d	; 61
    1d36:	fe b7       	in	r31, 0x3e	; 62
    1d38:	31 96       	adiw	r30, 0x01	; 1
    1d3a:	ad b7       	in	r26, 0x3d	; 61
    1d3c:	be b7       	in	r27, 0x3e	; 62
    1d3e:	12 96       	adiw	r26, 0x02	; 2
    1d40:	9c 92       	st	X, r9
    1d42:	8e 92       	st	-X, r8
    1d44:	11 97       	sbiw	r26, 0x01	; 1
    1d46:	d7 01       	movw	r26, r14
    1d48:	12 96       	adiw	r26, 0x02	; 2
    1d4a:	8c 91       	ld	r24, X
    1d4c:	82 83       	std	Z+2, r24	; 0x02
    1d4e:	13 82       	std	Z+3, r1	; 0x03
    1d50:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
		ili9341_setcursor(205, i * 8 + 24);
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	8d ec       	ldi	r24, 0xCD	; 205
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	b8 01       	movw	r22, r16
    1d62:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
		printf("%hhu", sell[i]);
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <display_menu1_f1+0x1ba>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <display_menu1_f1+0x1bc>
    1d6a:	ed b7       	in	r30, 0x3d	; 61
    1d6c:	fe b7       	in	r31, 0x3e	; 62
    1d6e:	31 96       	adiw	r30, 0x01	; 1
    1d70:	ad b7       	in	r26, 0x3d	; 61
    1d72:	be b7       	in	r27, 0x3e	; 62
    1d74:	12 96       	adiw	r26, 0x02	; 2
    1d76:	9c 92       	st	X, r9
    1d78:	8e 92       	st	-X, r8
    1d7a:	11 97       	sbiw	r26, 0x01	; 1
    1d7c:	d5 01       	movw	r26, r10
    1d7e:	8d 91       	ld	r24, X+
    1d80:	5d 01       	movw	r10, r26
    1d82:	82 83       	std	Z+2, r24	; 0x02
    1d84:	13 82       	std	Z+3, r1	; 0x03
    1d86:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1d8a:	08 5f       	subi	r16, 0xF8	; 248
    1d8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8e:	e4 e0       	ldi	r30, 0x04	; 4
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	ee 0e       	add	r14, r30
    1d94:	ff 1e       	adc	r15, r31
	ili9341_drawhline(0, 202, 330, BLUE);
	ili9341_settextsize(1);
	ili9341_write('\n');
	uint16_t temp_y = ili9341_gety();

	for (register uint8_t i = 0; i < 20; i++)
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	08 3b       	cpi	r16, 0xB8	; 184
    1da0:	11 05       	cpc	r17, r1
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <display_menu1_f1+0x1f8>
    1da4:	9c cf       	rjmp	.-200    	; 0x1cde <display_menu1_f1+0x130>
		ili9341_setcursor(105, i * 8 + 24);
		printf("%hhu", x[i].quantity);
		ili9341_setcursor(205, i * 8 + 24);
		printf("%hhu", sell[i]);
	}
	ili9341_settextsize(2);
    1da6:	82 e0       	ldi	r24, 0x02	; 2
    1da8:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	ili9341_setcursor(20, 210);
    1dac:	84 e1       	ldi	r24, 0x14	; 20
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	62 ed       	ldi	r22, 0xD2	; 210
    1db2:	70 e0       	ldi	r23, 0x00	; 0
    1db4:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("CONFIRM");
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <display_menu1_f1+0x20c>
    1dba:	84 eb       	ldi	r24, 0xB4	; 180
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	ad b7       	in	r26, 0x3d	; 61
    1dc0:	be b7       	in	r27, 0x3e	; 62
    1dc2:	12 96       	adiw	r26, 0x02	; 2
    1dc4:	9c 93       	st	X, r25
    1dc6:	8e 93       	st	-X, r24
    1dc8:	11 97       	sbiw	r26, 0x01	; 1
    1dca:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
	ili9341_setcursor(230, 210);
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	86 ee       	ldi	r24, 0xE6	; 230
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	62 ed       	ldi	r22, 0xD2	; 210
    1dd8:	70 e0       	ldi	r23, 0x00	; 0
    1dda:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	printf("BACK");
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <display_menu1_f1+0x232>
    1de0:	8c eb       	ldi	r24, 0xBC	; 188
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	ed b7       	in	r30, 0x3d	; 61
    1de6:	fe b7       	in	r31, 0x3e	; 62
    1de8:	92 83       	std	Z+2, r25	; 0x02
    1dea:	81 83       	std	Z+1, r24	; 0x01
    1dec:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
    1df0:	fe 01       	movw	r30, r28
    1df2:	76 96       	adiw	r30, 0x16	; 22
    1df4:	88 e2       	ldi	r24, 0x28	; 40
    1df6:	df 01       	movw	r26, r30
    1df8:	1d 92       	st	X+, r1
    1dfa:	8a 95       	dec	r24
    1dfc:	e9 f7       	brne	.-6      	; 0x1df8 <display_menu1_f1+0x24a>
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
	for (register uint8_t i = 0; i < 20; i++)
    1e02:	7f 01       	movw	r14, r30
    1e04:	9e 01       	movw	r18, r28
    1e06:	22 5c       	subi	r18, 0xC2	; 194
    1e08:	3f 4f       	sbci	r19, 0xFF	; 255
		threshold[i] = x[i].quantity;
    1e0a:	d6 01       	movw	r26, r12
    1e0c:	12 96       	adiw	r26, 0x02	; 2
    1e0e:	8c 91       	ld	r24, X
    1e10:	80 83       	st	Z, r24
    1e12:	11 82       	std	Z+1, r1	; 0x01
    1e14:	84 e0       	ldi	r24, 0x04	; 4
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	c8 0e       	add	r12, r24
    1e1a:	d9 1e       	adc	r13, r25
    1e1c:	32 96       	adiw	r30, 0x02	; 2
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
    1e1e:	e2 17       	cp	r30, r18
    1e20:	f3 07       	cpc	r31, r19
    1e22:	99 f7       	brne	.-26     	; 0x1e0a <display_menu1_f1+0x25c>
	ili9341_setcursor(20, 210);
	printf("CONFIRM");
	ili9341_setcursor(230, 210);
	printf("BACK");

	uint8_t choice = 0;
    1e24:	19 82       	std	Y+1, r1	; 0x01
	uint16_t threshold[20] = {};
	for (register uint8_t i = 0; i < 20; i++)
		threshold[i] = x[i].quantity;
	ili9341_setcursor(0, temp_y);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	b2 01       	movw	r22, r4
    1e2c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	display_selection_table(sell, &choice, WHITE, BLACK, BLUE, threshold, write_quantity);
    1e30:	f2 e0       	ldi	r31, 0x02	; 2
    1e32:	af 2e       	mov	r10, r31
    1e34:	b1 2c       	mov	r11, r1
    1e36:	ac 0e       	add	r10, r28
    1e38:	bd 1e       	adc	r11, r29
    1e3a:	c5 01       	movw	r24, r10
    1e3c:	be 01       	movw	r22, r28
    1e3e:	6f 5f       	subi	r22, 0xFF	; 255
    1e40:	7f 4f       	sbci	r23, 0xFF	; 255
    1e42:	4f ef       	ldi	r20, 0xFF	; 255
    1e44:	5f ef       	ldi	r21, 0xFF	; 255
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	0f e1       	ldi	r16, 0x1F	; 31
    1e4c:	10 e0       	ldi	r17, 0x00	; 0
    1e4e:	e1 ec       	ldi	r30, 0xC1	; 193
    1e50:	ce 2e       	mov	r12, r30
    1e52:	e5 e0       	ldi	r30, 0x05	; 5
    1e54:	de 2e       	mov	r13, r30
    1e56:	0e 94 a4 06 	call	0xd48	; 0xd48 <display_selection_table>
	
	if (choice == 20) //BACK to menu
    1e5a:	89 81       	ldd	r24, Y+1	; 0x01
    1e5c:	84 31       	cpi	r24, 0x14	; 20
    1e5e:	29 f4       	brne	.+10     	; 0x1e6a <display_menu1_f1+0x2bc>
		display_menu1_f2(x, sell);
    1e60:	83 2d       	mov	r24, r3
    1e62:	92 2d       	mov	r25, r2
    1e64:	b5 01       	movw	r22, r10
    1e66:	0e 94 2c 0c 	call	0x1858	; 0x1858 <display_menu1_f2>

	return;
}
    1e6a:	ed 96       	adiw	r28, 0x3d	; 61
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	de bf       	out	0x3e, r29	; 62
    1e72:	0f be       	out	0x3f, r0	; 63
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	1f 91       	pop	r17
    1e7c:	0f 91       	pop	r16
    1e7e:	ff 90       	pop	r15
    1e80:	ef 90       	pop	r14
    1e82:	df 90       	pop	r13
    1e84:	cf 90       	pop	r12
    1e86:	bf 90       	pop	r11
    1e88:	af 90       	pop	r10
    1e8a:	9f 90       	pop	r9
    1e8c:	8f 90       	pop	r8
    1e8e:	7f 90       	pop	r7
    1e90:	6f 90       	pop	r6
    1e92:	5f 90       	pop	r5
    1e94:	4f 90       	pop	r4
    1e96:	3f 90       	pop	r3
    1e98:	2f 90       	pop	r2
    1e9a:	08 95       	ret

00001e9c <display_menu>:
	return 0;
}

void display_menu(void)
{
	ili9341_settextcolour(BLUE, YELLOW);
    1e9c:	8f e1       	ldi	r24, 0x1F	; 31
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	60 ee       	ldi	r22, 0xE0	; 224
    1ea2:	7f ef       	ldi	r23, 0xFF	; 255
    1ea4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_setcursor(65, 0);
    1ea8:	81 e4       	ldi	r24, 0x41	; 65
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	60 e0       	ldi	r22, 0x00	; 0
    1eae:	70 e0       	ldi	r23, 0x00	; 0
    1eb0:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
	ili9341_settextsize(3);
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	printf("PILIH MENU\n");
    1eba:	8c e2       	ldi	r24, 0x2C	; 44
    1ebc:	91 e0       	ldi	r25, 0x01	; 1
    1ebe:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	ili9341_settextcolour(BLUE, YELLOW);
    1ec2:	8f e1       	ldi	r24, 0x1F	; 31
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	60 ee       	ldi	r22, 0xE0	; 224
    1ec8:	7f ef       	ldi	r23, 0xFF	; 255
    1eca:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <ili9341_settextcolour>
	ili9341_settextsize(2);
    1ece:	82 e0       	ldi	r24, 0x02	; 2
    1ed0:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <ili9341_settextsize>
	printf("1. Barang dijual\n");
    1ed4:	87 e3       	ldi	r24, 0x37	; 55
    1ed6:	91 e0       	ldi	r25, 0x01	; 1
    1ed8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	printf("2. Barang dibeli\n");
    1edc:	88 e4       	ldi	r24, 0x48	; 72
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	printf("3. Cek Stock dan harga\n");
    1ee4:	89 e5       	ldi	r24, 0x59	; 89
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	printf("4. Ganti Harga\n");
    1eec:	80 e7       	ldi	r24, 0x70	; 112
    1eee:	91 e0       	ldi	r25, 0x01	; 1
    1ef0:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	printf("5. Default\n");
    1ef4:	8f e7       	ldi	r24, 0x7F	; 127
    1ef6:	91 e0       	ldi	r25, 0x01	; 1
    1ef8:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <puts>
	printf("Masukkan Pilihan : ");
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <display_menu+0x62>
    1efe:	8a e8       	ldi	r24, 0x8A	; 138
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	ed b7       	in	r30, 0x3d	; 61
    1f04:	fe b7       	in	r31, 0x3e	; 62
    1f06:	92 83       	std	Z+2, r25	; 0x02
    1f08:	81 83       	std	Z+1, r24	; 0x01
    1f0a:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
	return;
}
    1f12:	08 95       	ret

00001f14 <main>:

	return 0;
}*/

int main(void)
{
    1f14:	6f 92       	push	r6
    1f16:	7f 92       	push	r7
    1f18:	8f 92       	push	r8
    1f1a:	9f 92       	push	r9
    1f1c:	af 92       	push	r10
    1f1e:	bf 92       	push	r11
    1f20:	cf 92       	push	r12
    1f22:	df 92       	push	r13
    1f24:	ef 92       	push	r14
    1f26:	ff 92       	push	r15
    1f28:	0f 93       	push	r16
    1f2a:	1f 93       	push	r17
    1f2c:	df 93       	push	r29
    1f2e:	cf 93       	push	r28
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	c2 55       	subi	r28, 0x52	; 82
    1f36:	d0 40       	sbci	r29, 0x00	; 0
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
	//for debugging
	//DDRD = 0xFF;
	//PORTD = 0x00;
	type_item item[20];
	//init_item(item);
	get_item(item);
    1f42:	7e 01       	movw	r14, r28
    1f44:	08 94       	sec
    1f46:	e1 1c       	adc	r14, r1
    1f48:	f1 1c       	adc	r15, r1
    1f4a:	c7 01       	movw	r24, r14
    1f4c:	0e 94 65 03 	call	0x6ca	; 0x6ca <get_item>
	stdout = &string_data;
    1f50:	86 eb       	ldi	r24, 0xB6	; 182
    1f52:	91 e0       	ldi	r25, 0x01	; 1
    1f54:	90 93 d4 01 	sts	0x01D4, r25
    1f58:	80 93 d3 01 	sts	0x01D3, r24
	uint8_t channel = 0;
	int8_t pressed = 0;
	uint16_t temp_x = 0;
	uint16_t temp_y = 0;

	ili9341_init();
    1f5c:	0e 94 c0 10 	call	0x2180	; 0x2180 <ili9341_init>
	init_keypad();
    1f60:	0e 94 a4 04 	call	0x948	; 0x948 <init_keypad>
	ili9341_setRotation(1);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	0e 94 ab 12 	call	0x2556	; 0x2556 <ili9341_setRotation>
	ili9341_clear(YELLOW);
    1f6a:	80 ee       	ldi	r24, 0xE0	; 224
    1f6c:	9f ef       	ldi	r25, 0xFF	; 255
    1f6e:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
    1f72:	00 e0       	ldi	r16, 0x00	; 0
	//printf("HELLO");
	
	for(;;)
	{
		write_item(item);
    1f74:	63 96       	adiw	r28, 0x13	; 19
    1f76:	ff ae       	std	Y+63, r15	; 0x3f
    1f78:	ee ae       	std	Y+62, r14	; 0x3e
    1f7a:	63 97       	sbiw	r28, 0x13	; 19
    1f7c:	62 96       	adiw	r28, 0x12	; 18
    1f7e:	ef ac       	ldd	r14, Y+63	; 0x3f
    1f80:	62 97       	sbiw	r28, 0x12	; 18
    1f82:	63 96       	adiw	r28, 0x13	; 19
    1f84:	ff ac       	ldd	r15, Y+63	; 0x3f
    1f86:	63 97       	sbiw	r28, 0x13	; 19
				{
					channel /= 10;
					ili9341_backspace(1, YELLOW);
				}
				ili9341_setcursor(temp_x, temp_y);
				printf("%hhu", channel);
    1f88:	83 ef       	ldi	r24, 0xF3	; 243
    1f8a:	68 2e       	mov	r6, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	78 2e       	mov	r7, r24
			}

			if (channel < 1 || channel > 5)
			{
				ili9341_clear(YELLOW);
				printf("\nInput menu hanya 1 - 5");
    1f90:	1e e9       	ldi	r17, 0x9E	; 158
    1f92:	81 2e       	mov	r8, r17
    1f94:	11 e0       	ldi	r17, 0x01	; 1
    1f96:	91 2e       	mov	r9, r17
    1f98:	01 c0       	rjmp	.+2      	; 0x1f9c <main+0x88>
	uint16_t temp_y = 0;

	ili9341_init();
	init_keypad();
	ili9341_setRotation(1);
	ili9341_clear(YELLOW);
    1f9a:	01 2f       	mov	r16, r17
	//printf("HELLO");
	
	for(;;)
	{
		write_item(item);
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	0e 94 08 03 	call	0x610	; 0x610 <write_item>
		init_led();
    1fa2:	0e 94 b9 03 	call	0x772	; 0x772 <init_led>
		//get_item(item);

		switch (channel)
    1fa6:	02 30       	cpi	r16, 0x02	; 2
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <main+0x98>
    1faa:	66 c0       	rjmp	.+204    	; 0x2078 <main+0x164>
    1fac:	03 30       	cpi	r16, 0x03	; 3
    1fae:	28 f4       	brcc	.+10     	; 0x1fba <main+0xa6>
    1fb0:	00 23       	and	r16, r16
    1fb2:	61 f0       	breq	.+24     	; 0x1fcc <main+0xb8>
    1fb4:	01 30       	cpi	r16, 0x01	; 1
    1fb6:	91 f7       	brne	.-28     	; 0x1f9c <main+0x88>
    1fb8:	5b c0       	rjmp	.+182    	; 0x2070 <main+0x15c>
    1fba:	04 30       	cpi	r16, 0x04	; 4
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <main+0xac>
    1fbe:	64 c0       	rjmp	.+200    	; 0x2088 <main+0x174>
    1fc0:	04 30       	cpi	r16, 0x04	; 4
    1fc2:	08 f4       	brcc	.+2      	; 0x1fc6 <main+0xb2>
    1fc4:	5d c0       	rjmp	.+186    	; 0x2080 <main+0x16c>
    1fc6:	05 30       	cpi	r16, 0x05	; 5
    1fc8:	49 f7       	brne	.-46     	; 0x1f9c <main+0x88>
    1fca:	62 c0       	rjmp	.+196    	; 0x2090 <main+0x17c>
		{
		case 0:
			display_menu();
    1fcc:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <display_menu>
			temp_x = ili9341_getx();
    1fd0:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <ili9341_getx>
    1fd4:	5c 01       	movw	r10, r24
			temp_y = ili9341_gety();
    1fd6:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <ili9341_gety>
    1fda:	6c 01       	movw	r12, r24
    1fdc:	10 e0       	ldi	r17, 0x00	; 0
    1fde:	31 c0       	rjmp	.+98     	; 0x2042 <main+0x12e>
			while ((pressed = scan_keypad()) != 15)
			{
				if (pressed >= 0 && pressed <= 9)
    1fe0:	8a 30       	cpi	r24, 0x0A	; 10
    1fe2:	60 f4       	brcc	.+24     	; 0x1ffc <main+0xe8>
				{
					channel = check_overflow((uint16_t) channel, (uint16_t) pressed, 99);
    1fe4:	68 2f       	mov	r22, r24
    1fe6:	77 27       	eor	r23, r23
    1fe8:	67 fd       	sbrc	r22, 7
    1fea:	70 95       	com	r23
    1fec:	81 2f       	mov	r24, r17
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	43 e6       	ldi	r20, 0x63	; 99
    1ff2:	50 e0       	ldi	r21, 0x00	; 0
    1ff4:	0e 94 c7 02 	call	0x58e	; 0x58e <check_overflow>
    1ff8:	18 2f       	mov	r17, r24
    1ffa:	0c c0       	rjmp	.+24     	; 0x2014 <main+0x100>
				}
				else if (pressed == 10)
    1ffc:	8a 30       	cpi	r24, 0x0A	; 10
    1ffe:	51 f4       	brne	.+20     	; 0x2014 <main+0x100>
				{
					channel /= 10;
    2000:	81 2f       	mov	r24, r17
    2002:	6a e0       	ldi	r22, 0x0A	; 10
    2004:	0e 94 a7 14 	call	0x294e	; 0x294e <__udivmodqi4>
    2008:	18 2f       	mov	r17, r24
					ili9341_backspace(1, YELLOW);
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	60 ee       	ldi	r22, 0xE0	; 224
    200e:	7f ef       	ldi	r23, 0xFF	; 255
    2010:	0e 94 07 14 	call	0x280e	; 0x280e <ili9341_backspace>
				}
				ili9341_setcursor(temp_x, temp_y);
    2014:	c5 01       	movw	r24, r10
    2016:	b6 01       	movw	r22, r12
    2018:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <ili9341_setcursor>
				printf("%hhu", channel);
    201c:	00 d0       	rcall	.+0      	; 0x201e <main+0x10a>
    201e:	00 d0       	rcall	.+0      	; 0x2020 <main+0x10c>
    2020:	ed b7       	in	r30, 0x3d	; 61
    2022:	fe b7       	in	r31, 0x3e	; 62
    2024:	31 96       	adiw	r30, 0x01	; 1
    2026:	ad b7       	in	r26, 0x3d	; 61
    2028:	be b7       	in	r27, 0x3e	; 62
    202a:	12 96       	adiw	r26, 0x02	; 2
    202c:	7c 92       	st	X, r7
    202e:	6e 92       	st	-X, r6
    2030:	11 97       	sbiw	r26, 0x01	; 1
    2032:	12 83       	std	Z+2, r17	; 0x02
    2034:	13 82       	std	Z+3, r1	; 0x03
    2036:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
		{
		case 0:
			display_menu();
			temp_x = ili9341_getx();
			temp_y = ili9341_gety();
			while ((pressed = scan_keypad()) != 15)
    2042:	0e 94 b0 04 	call	0x960	; 0x960 <scan_keypad>
    2046:	8f 30       	cpi	r24, 0x0F	; 15
    2048:	59 f6       	brne	.-106    	; 0x1fe0 <main+0xcc>
				}
				ili9341_setcursor(temp_x, temp_y);
				printf("%hhu", channel);
			}

			if (channel < 1 || channel > 5)
    204a:	81 2f       	mov	r24, r17
    204c:	81 50       	subi	r24, 0x01	; 1
    204e:	85 30       	cpi	r24, 0x05	; 5
    2050:	08 f4       	brcc	.+2      	; 0x2054 <main+0x140>
    2052:	a3 cf       	rjmp	.-186    	; 0x1f9a <main+0x86>
			{
				ili9341_clear(YELLOW);
    2054:	80 ee       	ldi	r24, 0xE0	; 224
    2056:	9f ef       	ldi	r25, 0xFF	; 255
    2058:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
				printf("\nInput menu hanya 1 - 5");
    205c:	00 d0       	rcall	.+0      	; 0x205e <main+0x14a>
    205e:	ed b7       	in	r30, 0x3d	; 61
    2060:	fe b7       	in	r31, 0x3e	; 62
    2062:	92 82       	std	Z+2, r9	; 0x02
    2064:	81 82       	std	Z+1, r8	; 0x01
    2066:	0e 94 c7 14 	call	0x298e	; 0x298e <printf>
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	96 cf       	rjmp	.-212    	; 0x1f9c <main+0x88>
				channel = 0;
			}
			break;

		case 1:
			display_menu1_f1(item);
    2070:	c7 01       	movw	r24, r14
    2072:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <display_menu1_f1>
    2076:	0f c0       	rjmp	.+30     	; 0x2096 <main+0x182>
			channel = 0;
			ili9341_clear(YELLOW);
			break;

		case 2 :
			display_menu2(item);
    2078:	c7 01       	movw	r24, r14
    207a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <display_menu2>
    207e:	0b c0       	rjmp	.+22     	; 0x2096 <main+0x182>
			channel = 0;
			ili9341_clear(YELLOW);
			break;

		case 3:
			display_menu3(item);
    2080:	c7 01       	movw	r24, r14
    2082:	0e 94 95 09 	call	0x132a	; 0x132a <display_menu3>
    2086:	07 c0       	rjmp	.+14     	; 0x2096 <main+0x182>
			channel = 0;
			ili9341_clear(YELLOW);
			break;

		case 4:
			display_menu4(item);
    2088:	c7 01       	movw	r24, r14
    208a:	0e 94 22 08 	call	0x1044	; 0x1044 <display_menu4>
    208e:	03 c0       	rjmp	.+6      	; 0x2096 <main+0x182>
			channel = 0;
			ili9341_clear(YELLOW);
			break;

		case 5 :
			init_item(item);
    2090:	c7 01       	movw	r24, r14
    2092:	0e 94 39 05 	call	0xa72	; 0xa72 <init_item>
			channel = 0;
			ili9341_clear(YELLOW);
    2096:	80 ee       	ldi	r24, 0xE0	; 224
    2098:	9f ef       	ldi	r25, 0xFF	; 255
    209a:	0e 94 85 11 	call	0x230a	; 0x230a <ili9341_clear>
    209e:	00 e0       	ldi	r16, 0x00	; 0
    20a0:	7d cf       	rjmp	.-262    	; 0x1f9c <main+0x88>

000020a2 <ili9341_hard_init>:
volatile uint16_t LCD_W=ILI9341_TFTWIDTH;
volatile uint16_t LCD_H=ILI9341_TFTHEIGHT;

void ili9341_hard_init(void)//init hardware
{
	DDRB |= (1 << 2);//output for reset
    20a2:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= (1 << 2);//pull high for normal operation
    20a4:	c2 9a       	sbi	0x18, 2	; 24
	//controlddr |= (1<<dc);//D/C as output
}
    20a6:	08 95       	ret

000020a8 <ili9341_spi_init>:


void ili9341_spi_init(void)//set spi speed and settings 
{
	DDRB |= 0x83; //1000 0011b //CS,SS,MOSI,SCK as output(although SS will be unused throughout the program)
    20a8:	87 b3       	in	r24, 0x17	; 23
    20aa:	83 68       	ori	r24, 0x83	; 131
    20ac:	87 bb       	out	0x17, r24	; 23
	SPCR = 0x50;//0101 0000b //mode 0,fosc/4
    20ae:	80 e5       	ldi	r24, 0x50	; 80
    20b0:	8d b9       	out	0x0d, r24	; 13
	SPSR |= (1 << 0);//doubling spi speed.i.e final spi speed-fosc/2
    20b2:	70 9a       	sbi	0x0e, 0	; 14
	PORTB |= (1 << 1);//cs off during startup
    20b4:	c1 9a       	sbi	0x18, 1	; 24
}
    20b6:	08 95       	ret

000020b8 <ili9341_spi_send>:


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
	SPDR = spi_data;//move data into spdr
    20b8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    20ba:	77 9b       	sbis	0x0e, 7	; 14
    20bc:	fe cf       	rjmp	.-4      	; 0x20ba <ili9341_spi_send+0x2>
}
    20be:	08 95       	ret

000020c0 <ili9341_writecommand8>:


void ili9341_writecommand8(uint8_t com)//command write
{
	controlport &= ~((1<<dc)|(1<<cs));//dc and cs both low to send command
    20c0:	98 b3       	in	r25, 0x18	; 24
    20c2:	9c 7f       	andi	r25, 0xFC	; 252
    20c4:	98 bb       	out	0x18, r25	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20c6:	9d e0       	ldi	r25, 0x0D	; 13
    20c8:	9a 95       	dec	r25
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <ili9341_writecommand8+0x8>
}


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
	SPDR = spi_data;//move data into spdr
    20cc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    20ce:	77 9b       	sbis	0x0e, 7	; 14
    20d0:	fe cf       	rjmp	.-4      	; 0x20ce <ili9341_writecommand8+0xe>
void ili9341_writecommand8(uint8_t com)//command write
{
	controlport &= ~((1<<dc)|(1<<cs));//dc and cs both low to send command
	_delay_us(5);//little delay
	ili9341_spi_send(com);
	controlport |=(1<<cs);//pull high cs
    20d2:	c1 9a       	sbi	0x18, 1	; 24
}
    20d4:	08 95       	ret

000020d6 <ili9341_writedata8>:


void ili9341_writedata8(uint8_t data)//data write
{
	controlport |= (1<<dc);//st dc high for data
    20d6:	c0 9a       	sbi	0x18, 0	; 24
    20d8:	92 e0       	ldi	r25, 0x02	; 2
    20da:	9a 95       	dec	r25
    20dc:	f1 f7       	brne	.-4      	; 0x20da <ili9341_writedata8+0x4>
	_delay_us(1);//delay
	controlport &=~(1<<cs);//set cs low for operation
    20de:	c1 98       	cbi	0x18, 1	; 24
}


void ili9341_spi_send(unsigned char spi_data)//send spi data to display
{
	SPDR = spi_data;//move data into spdr
    20e0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//wait till the transmission is finished
    20e2:	77 9b       	sbis	0x0e, 7	; 14
    20e4:	fe cf       	rjmp	.-4      	; 0x20e2 <ili9341_writedata8+0xc>
{
	controlport |= (1<<dc);//st dc high for data
	_delay_us(1);//delay
	controlport &=~(1<<cs);//set cs low for operation
	ili9341_spi_send(data);
	controlport |=(1<<cs);
    20e6:	c1 9a       	sbi	0x18, 1	; 24
}
    20e8:	08 95       	ret

000020ea <ili9341_setaddress>:


void ili9341_setaddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)//set coordinate for print or other function
{
    20ea:	bf 92       	push	r11
    20ec:	cf 92       	push	r12
    20ee:	df 92       	push	r13
    20f0:	ef 92       	push	r14
    20f2:	ff 92       	push	r15
    20f4:	0f 93       	push	r16
    20f6:	1f 93       	push	r17
    20f8:	f8 2e       	mov	r15, r24
    20fa:	19 2f       	mov	r17, r25
    20fc:	b6 2e       	mov	r11, r22
    20fe:	c7 2e       	mov	r12, r23
    2100:	e4 2e       	mov	r14, r20
    2102:	05 2f       	mov	r16, r21
    2104:	d2 2e       	mov	r13, r18
	ili9341_writecommand8(0x2A);
    2106:	8a e2       	ldi	r24, 0x2A	; 42
    2108:	db df       	rcall	.-74     	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(x1>>8);
    210a:	81 2f       	mov	r24, r17
    210c:	e4 df       	rcall	.-56     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(x1);
    210e:	8f 2d       	mov	r24, r15
    2110:	e2 df       	rcall	.-60     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(x2>>8);
    2112:	80 2f       	mov	r24, r16
    2114:	e0 df       	rcall	.-64     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(x2);
    2116:	8e 2d       	mov	r24, r14
    2118:	de df       	rcall	.-68     	; 0x20d6 <ili9341_writedata8>

	ili9341_writecommand8(0x2B);
    211a:	8b e2       	ldi	r24, 0x2B	; 43
    211c:	d1 df       	rcall	.-94     	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(y1>>8);
    211e:	8c 2d       	mov	r24, r12
    2120:	da df       	rcall	.-76     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(y1);
    2122:	8b 2d       	mov	r24, r11
    2124:	d8 df       	rcall	.-80     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(y2);
    2126:	8d 2d       	mov	r24, r13
    2128:	d6 df       	rcall	.-84     	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(y2);
    212a:	8d 2d       	mov	r24, r13
    212c:	d4 df       	rcall	.-88     	; 0x20d6 <ili9341_writedata8>

	ili9341_writecommand8(0x2C);//meory write
    212e:	8c e2       	ldi	r24, 0x2C	; 44
    2130:	c7 df       	rcall	.-114    	; 0x20c0 <ili9341_writecommand8>
}
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	ff 90       	pop	r15
    2138:	ef 90       	pop	r14
    213a:	df 90       	pop	r13
    213c:	cf 90       	pop	r12
    213e:	bf 90       	pop	r11
    2140:	08 95       	ret

00002142 <ili9341_hard_reset>:


void ili9341_hard_reset(void)//hard reset display
{
	rstport |= (1<<rst);//pull high if low previously
    2142:	c2 9a       	sbi	0x18, 2	; 24
    2144:	80 ed       	ldi	r24, 0xD0	; 208
    2146:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2148:	28 ec       	ldi	r18, 0xC8	; 200
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	f9 01       	movw	r30, r18
    214e:	31 97       	sbiw	r30, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <ili9341_hard_reset+0xc>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	d9 f7       	brne	.-10     	; 0x214c <ili9341_hard_reset+0xa>
	_delay_ms(200);
	rstport &=~ (1<<rst);//low for reset
    2156:	c2 98       	cbi	0x18, 2	; 24
    2158:	80 ed       	ldi	r24, 0xD0	; 208
    215a:	97 e0       	ldi	r25, 0x07	; 7
    215c:	28 ec       	ldi	r18, 0xC8	; 200
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	f9 01       	movw	r30, r18
    2162:	31 97       	sbiw	r30, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <ili9341_hard_reset+0x20>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2168:	d9 f7       	brne	.-10     	; 0x2160 <ili9341_hard_reset+0x1e>
	_delay_ms(200);
	rstport |= (1<<rst);//again pull high for normal operation
    216a:	c2 9a       	sbi	0x18, 2	; 24
    216c:	80 ed       	ldi	r24, 0xD0	; 208
    216e:	97 e0       	ldi	r25, 0x07	; 7
    2170:	28 ec       	ldi	r18, 0xC8	; 200
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	f9 01       	movw	r30, r18
    2176:	31 97       	sbiw	r30, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <ili9341_hard_reset+0x34>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	d9 f7       	brne	.-10     	; 0x2174 <ili9341_hard_reset+0x32>
	_delay_ms(200);
}
    217e:	08 95       	ret

00002180 <ili9341_init>:
volatile uint16_t LCD_W=ILI9341_TFTWIDTH;
volatile uint16_t LCD_H=ILI9341_TFTHEIGHT;

void ili9341_hard_init(void)//init hardware
{
	DDRB |= (1 << 2);//output for reset
    2180:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= (1 << 2);//pull high for normal operation
    2182:	c2 9a       	sbi	0x18, 2	; 24


void ili9341_init(void)//set up display using predefined command sequence
{
	ili9341_hard_init();
	ili9341_spi_init();
    2184:	91 df       	rcall	.-222    	; 0x20a8 <ili9341_spi_init>
	ili9341_hard_reset();
    2186:	dd df       	rcall	.-70     	; 0x2142 <ili9341_hard_reset>
	ili9341_writecommand8(0x01);//soft reset
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	9a df       	rcall	.-204    	; 0x20c0 <ili9341_writecommand8>
    218c:	80 e1       	ldi	r24, 0x10	; 16
    218e:	97 e2       	ldi	r25, 0x27	; 39
    2190:	28 ec       	ldi	r18, 0xC8	; 200
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	f9 01       	movw	r30, r18
    2196:	31 97       	sbiw	r30, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <ili9341_init+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	d9 f7       	brne	.-10     	; 0x2194 <ili9341_init+0x14>
	_delay_ms(1000);
	//power control A
	ili9341_writecommand8(0xCB);
    219e:	8b ec       	ldi	r24, 0xCB	; 203
    21a0:	8f df       	rcall	.-226    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x39);
    21a2:	89 e3       	ldi	r24, 0x39	; 57
    21a4:	98 df       	rcall	.-208    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x2C);
    21a6:	8c e2       	ldi	r24, 0x2C	; 44
    21a8:	96 df       	rcall	.-212    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	94 df       	rcall	.-216    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x34);
    21ae:	84 e3       	ldi	r24, 0x34	; 52
    21b0:	92 df       	rcall	.-220    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x02);
    21b2:	82 e0       	ldi	r24, 0x02	; 2
    21b4:	90 df       	rcall	.-224    	; 0x20d6 <ili9341_writedata8>

	//power control B
	ili9341_writecommand8(0xCF);
    21b6:	8f ec       	ldi	r24, 0xCF	; 207
    21b8:	83 df       	rcall	.-250    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	8c df       	rcall	.-232    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0xC1);
    21be:	81 ec       	ldi	r24, 0xC1	; 193
    21c0:	8a df       	rcall	.-236    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x30);
    21c2:	80 e3       	ldi	r24, 0x30	; 48
    21c4:	88 df       	rcall	.-240    	; 0x20d6 <ili9341_writedata8>

	//driver timing control A
	ili9341_writecommand8(0xE8);
    21c6:	88 ee       	ldi	r24, 0xE8	; 232
    21c8:	7b df       	rcall	.-266    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x85);
    21ca:	85 e8       	ldi	r24, 0x85	; 133
    21cc:	84 df       	rcall	.-248    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	82 df       	rcall	.-252    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x78);
    21d2:	88 e7       	ldi	r24, 0x78	; 120
    21d4:	80 df       	rcall	.-256    	; 0x20d6 <ili9341_writedata8>

	//driver timing control B
	ili9341_writecommand8(0xEA);
    21d6:	8a ee       	ldi	r24, 0xEA	; 234
    21d8:	73 df       	rcall	.-282    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	7c df       	rcall	.-264    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	7a df       	rcall	.-268    	; 0x20d6 <ili9341_writedata8>

	//power on sequence control
	ili9341_writecommand8(0xED);
    21e2:	8d ee       	ldi	r24, 0xED	; 237
    21e4:	6d df       	rcall	.-294    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x64);
    21e6:	84 e6       	ldi	r24, 0x64	; 100
    21e8:	76 df       	rcall	.-276    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	74 df       	rcall	.-280    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x12);
    21ee:	82 e1       	ldi	r24, 0x12	; 18
    21f0:	72 df       	rcall	.-284    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x81);
    21f2:	81 e8       	ldi	r24, 0x81	; 129
    21f4:	70 df       	rcall	.-288    	; 0x20d6 <ili9341_writedata8>

	//pump ratio control
	ili9341_writecommand8(0xF7);
    21f6:	87 ef       	ldi	r24, 0xF7	; 247
    21f8:	63 df       	rcall	.-314    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x20);
    21fa:	80 e2       	ldi	r24, 0x20	; 32
    21fc:	6c df       	rcall	.-296    	; 0x20d6 <ili9341_writedata8>

	//power control,VRH[5:0]
	ili9341_writecommand8(0xC0);
    21fe:	80 ec       	ldi	r24, 0xC0	; 192
    2200:	5f df       	rcall	.-322    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x23);
    2202:	83 e2       	ldi	r24, 0x23	; 35
    2204:	68 df       	rcall	.-304    	; 0x20d6 <ili9341_writedata8>

	//Power control,SAP[2:0];BT[3:0]
	ili9341_writecommand8(0xC1);
    2206:	81 ec       	ldi	r24, 0xC1	; 193
    2208:	5b df       	rcall	.-330    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x10);
    220a:	80 e1       	ldi	r24, 0x10	; 16
    220c:	64 df       	rcall	.-312    	; 0x20d6 <ili9341_writedata8>

	//vcm control
	ili9341_writecommand8(0xC5);
    220e:	85 ec       	ldi	r24, 0xC5	; 197
    2210:	57 df       	rcall	.-338    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x3E);
    2212:	8e e3       	ldi	r24, 0x3E	; 62
    2214:	60 df       	rcall	.-320    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x28);
    2216:	88 e2       	ldi	r24, 0x28	; 40
    2218:	5e df       	rcall	.-324    	; 0x20d6 <ili9341_writedata8>

	//vcm control 2
	ili9341_writecommand8(0xC7);
    221a:	87 ec       	ldi	r24, 0xC7	; 199
    221c:	51 df       	rcall	.-350    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x86);
    221e:	86 e8       	ldi	r24, 0x86	; 134
    2220:	5a df       	rcall	.-332    	; 0x20d6 <ili9341_writedata8>

	//memory access control
	ili9341_writecommand8(0x36);
    2222:	86 e3       	ldi	r24, 0x36	; 54
    2224:	4d df       	rcall	.-358    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x48);
    2226:	88 e4       	ldi	r24, 0x48	; 72
    2228:	56 df       	rcall	.-340    	; 0x20d6 <ili9341_writedata8>

	//pixel format
	ili9341_writecommand8(0x3A);
    222a:	8a e3       	ldi	r24, 0x3A	; 58
    222c:	49 df       	rcall	.-366    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x55);
    222e:	85 e5       	ldi	r24, 0x55	; 85
    2230:	52 df       	rcall	.-348    	; 0x20d6 <ili9341_writedata8>

	//frameration control,normal mode full colours
	ili9341_writecommand8(0xB1);
    2232:	81 eb       	ldi	r24, 0xB1	; 177
    2234:	45 df       	rcall	.-374    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	4e df       	rcall	.-356    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x18);
    223a:	88 e1       	ldi	r24, 0x18	; 24
    223c:	4c df       	rcall	.-360    	; 0x20d6 <ili9341_writedata8>

	//display function control
	ili9341_writecommand8(0xB6);
    223e:	86 eb       	ldi	r24, 0xB6	; 182
    2240:	3f df       	rcall	.-386    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x08);
    2242:	88 e0       	ldi	r24, 0x08	; 8
    2244:	48 df       	rcall	.-368    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x82);
    2246:	82 e8       	ldi	r24, 0x82	; 130
    2248:	46 df       	rcall	.-372    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x27);
    224a:	87 e2       	ldi	r24, 0x27	; 39
    224c:	44 df       	rcall	.-376    	; 0x20d6 <ili9341_writedata8>

	//3gamma function disable
	ili9341_writecommand8(0xF2);
    224e:	82 ef       	ldi	r24, 0xF2	; 242
    2250:	37 df       	rcall	.-402    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	40 df       	rcall	.-384    	; 0x20d6 <ili9341_writedata8>

	//gamma curve selected
	ili9341_writecommand8(0x26);
    2256:	86 e2       	ldi	r24, 0x26	; 38
    2258:	33 df       	rcall	.-410    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x01);
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	3c df       	rcall	.-392    	; 0x20d6 <ili9341_writedata8>

	//set positive gamma correction
	ili9341_writecommand8(0xE0);
    225e:	80 ee       	ldi	r24, 0xE0	; 224
    2260:	2f df       	rcall	.-418    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x0F);
    2262:	8f e0       	ldi	r24, 0x0F	; 15
    2264:	38 df       	rcall	.-400    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
    2266:	81 e3       	ldi	r24, 0x31	; 49
    2268:	36 df       	rcall	.-404    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x2B);
    226a:	8b e2       	ldi	r24, 0x2B	; 43
    226c:	34 df       	rcall	.-408    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0C);
    226e:	8c e0       	ldi	r24, 0x0C	; 12
    2270:	32 df       	rcall	.-412    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
    2272:	8e e0       	ldi	r24, 0x0E	; 14
    2274:	30 df       	rcall	.-416    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x08);
    2276:	88 e0       	ldi	r24, 0x08	; 8
    2278:	2e df       	rcall	.-420    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x4E);
    227a:	8e e4       	ldi	r24, 0x4E	; 78
    227c:	2c df       	rcall	.-424    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0xF1);
    227e:	81 ef       	ldi	r24, 0xF1	; 241
    2280:	2a df       	rcall	.-428    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x37);
    2282:	87 e3       	ldi	r24, 0x37	; 55
    2284:	28 df       	rcall	.-432    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x07);
    2286:	87 e0       	ldi	r24, 0x07	; 7
    2288:	26 df       	rcall	.-436    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x10);
    228a:	80 e1       	ldi	r24, 0x10	; 16
    228c:	24 df       	rcall	.-440    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
    228e:	83 e0       	ldi	r24, 0x03	; 3
    2290:	22 df       	rcall	.-444    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
    2292:	8e e0       	ldi	r24, 0x0E	; 14
    2294:	20 df       	rcall	.-448    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x09);
    2296:	89 e0       	ldi	r24, 0x09	; 9
    2298:	1e df       	rcall	.-452    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x00);
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	1c df       	rcall	.-456    	; 0x20d6 <ili9341_writedata8>

	//set negative gamma correction
	ili9341_writecommand8(0xE1);
    229e:	81 ee       	ldi	r24, 0xE1	; 225
    22a0:	0f df       	rcall	.-482    	; 0x20c0 <ili9341_writecommand8>
	ili9341_writedata8(0x00);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	18 df       	rcall	.-464    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0E);
    22a6:	8e e0       	ldi	r24, 0x0E	; 14
    22a8:	16 df       	rcall	.-468    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x14);
    22aa:	84 e1       	ldi	r24, 0x14	; 20
    22ac:	14 df       	rcall	.-472    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x03);
    22ae:	83 e0       	ldi	r24, 0x03	; 3
    22b0:	12 df       	rcall	.-476    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x11);
    22b2:	81 e1       	ldi	r24, 0x11	; 17
    22b4:	10 df       	rcall	.-480    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x07);
    22b6:	87 e0       	ldi	r24, 0x07	; 7
    22b8:	0e df       	rcall	.-484    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
    22ba:	81 e3       	ldi	r24, 0x31	; 49
    22bc:	0c df       	rcall	.-488    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0xC1);
    22be:	81 ec       	ldi	r24, 0xC1	; 193
    22c0:	0a df       	rcall	.-492    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x48);
    22c2:	88 e4       	ldi	r24, 0x48	; 72
    22c4:	08 df       	rcall	.-496    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x08);
    22c6:	88 e0       	ldi	r24, 0x08	; 8
    22c8:	06 df       	rcall	.-500    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0F);
    22ca:	8f e0       	ldi	r24, 0x0F	; 15
    22cc:	04 df       	rcall	.-504    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0C);
    22ce:	8c e0       	ldi	r24, 0x0C	; 12
    22d0:	02 df       	rcall	.-508    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x31);
    22d2:	81 e3       	ldi	r24, 0x31	; 49
    22d4:	00 df       	rcall	.-512    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x36);
    22d6:	86 e3       	ldi	r24, 0x36	; 54
    22d8:	fe de       	rcall	.-516    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(0x0F);
    22da:	8f e0       	ldi	r24, 0x0F	; 15
    22dc:	fc de       	rcall	.-520    	; 0x20d6 <ili9341_writedata8>

	//exit sleep
	ili9341_writecommand8(0x11);
    22de:	81 e1       	ldi	r24, 0x11	; 17
    22e0:	ef de       	rcall	.-546    	; 0x20c0 <ili9341_writecommand8>
    22e2:	80 eb       	ldi	r24, 0xB0	; 176
    22e4:	94 e0       	ldi	r25, 0x04	; 4
    22e6:	28 ec       	ldi	r18, 0xC8	; 200
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	f9 01       	movw	r30, r18
    22ec:	31 97       	sbiw	r30, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <ili9341_init+0x16c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	d9 f7       	brne	.-10     	; 0x22ea <ili9341_init+0x16a>
	_delay_ms(120);
	//display on
	ili9341_writecommand8(0x29);
    22f4:	89 e2       	ldi	r24, 0x29	; 41
    22f6:	e4 de       	rcall	.-568    	; 0x20c0 <ili9341_writecommand8>
}
    22f8:	08 95       	ret

000022fa <ili9341_pushcolour>:

//set colour for drawing
void ili9341_pushcolour(uint16_t colour)
{
    22fa:	1f 93       	push	r17
    22fc:	18 2f       	mov	r17, r24
	ili9341_writedata8(colour>>8);
    22fe:	89 2f       	mov	r24, r25
    2300:	ea de       	rcall	.-556    	; 0x20d6 <ili9341_writedata8>
	ili9341_writedata8(colour);
    2302:	81 2f       	mov	r24, r17
    2304:	e8 de       	rcall	.-560    	; 0x20d6 <ili9341_writedata8>
}
    2306:	1f 91       	pop	r17
    2308:	08 95       	ret

0000230a <ili9341_clear>:


//clear lcd and fill with colour
void ili9341_clear(uint16_t colour)
{
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	7c 01       	movw	r14, r24
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);
    2318:	40 91 c4 01 	lds	r20, 0x01C4
    231c:	50 91 c5 01 	lds	r21, 0x01C5
    2320:	20 91 c6 01 	lds	r18, 0x01C6
    2324:	30 91 c7 01 	lds	r19, 0x01C7
    2328:	41 50       	subi	r20, 0x01	; 1
    232a:	50 40       	sbci	r21, 0x00	; 0
    232c:	21 50       	subi	r18, 0x01	; 1
    232e:	30 40       	sbci	r19, 0x00	; 0
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	70 e0       	ldi	r23, 0x00	; 0
    2338:	d8 de       	rcall	.-592    	; 0x20ea <ili9341_setaddress>
    233a:	00 e0       	ldi	r16, 0x00	; 0
    233c:	10 e0       	ldi	r17, 0x00	; 0
    233e:	0c c0       	rjmp	.+24     	; 0x2358 <ili9341_clear+0x4e>

	for(i=0;i<LCD_W;i++)
	{
		for(j=0;j<LCD_H;j++)
		{
			ili9341_pushcolour(colour);
    2340:	c7 01       	movw	r24, r14
    2342:	db df       	rcall	.-74     	; 0x22fa <ili9341_pushcolour>
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

	for(i=0;i<LCD_W;i++)
	{
		for(j=0;j<LCD_H;j++)
    2344:	21 96       	adiw	r28, 0x01	; 1
    2346:	80 91 c6 01 	lds	r24, 0x01C6
    234a:	90 91 c7 01 	lds	r25, 0x01C7
    234e:	c8 17       	cp	r28, r24
    2350:	d9 07       	cpc	r29, r25
    2352:	b0 f3       	brcs	.-20     	; 0x2340 <ili9341_clear+0x36>
void ili9341_clear(uint16_t colour)
{
	uint16_t i,j;
	ili9341_setaddress(0,0,LCD_W-1,LCD_H-1);

	for(i=0;i<LCD_W;i++)
    2354:	0f 5f       	subi	r16, 0xFF	; 255
    2356:	1f 4f       	sbci	r17, 0xFF	; 255
    2358:	80 91 c4 01 	lds	r24, 0x01C4
    235c:	90 91 c5 01 	lds	r25, 0x01C5
    2360:	08 17       	cp	r16, r24
    2362:	19 07       	cpc	r17, r25
    2364:	18 f4       	brcc	.+6      	; 0x236c <ili9341_clear+0x62>
    2366:	c0 e0       	ldi	r28, 0x00	; 0
    2368:	d0 e0       	ldi	r29, 0x00	; 0
    236a:	ed cf       	rjmp	.-38     	; 0x2346 <ili9341_clear+0x3c>
		for(j=0;j<LCD_H;j++)
		{
			ili9341_pushcolour(colour);
		}
	}
}
    236c:	df 91       	pop	r29
    236e:	cf 91       	pop	r28
    2370:	1f 91       	pop	r17
    2372:	0f 91       	pop	r16
    2374:	ff 90       	pop	r15
    2376:	ef 90       	pop	r14
    2378:	08 95       	ret

0000237a <ili9341_drawpixel>:



//draw pixel
void ili9341_drawpixel(uint16_t x3,uint16_t y3,uint16_t colour1) //pixels will always be counted from right side.x is representing LCD width which will always be less tha 240.Y is representing LCD height which will always be less than 320
{
    237a:	cf 93       	push	r28
    237c:	df 93       	push	r29
    237e:	fc 01       	movw	r30, r24
    2380:	9b 01       	movw	r18, r22
    2382:	ea 01       	movw	r28, r20
	if((x3 < 0) ||(x3 >=LCD_W) || (y3 < 0) || (y3 >=LCD_H))
    2384:	80 91 c4 01 	lds	r24, 0x01C4
    2388:	90 91 c5 01 	lds	r25, 0x01C5
    238c:	e8 17       	cp	r30, r24
    238e:	f9 07       	cpc	r31, r25
    2390:	78 f4       	brcc	.+30     	; 0x23b0 <ili9341_drawpixel+0x36>
    2392:	80 91 c6 01 	lds	r24, 0x01C6
    2396:	90 91 c7 01 	lds	r25, 0x01C7
    239a:	68 17       	cp	r22, r24
    239c:	79 07       	cpc	r23, r25
    239e:	40 f4       	brcc	.+16     	; 0x23b0 <ili9341_drawpixel+0x36>
		return;
	ili9341_setaddress(x3,y3,x3+1,y3+1);
    23a0:	cf 01       	movw	r24, r30
    23a2:	31 96       	adiw	r30, 0x01	; 1
    23a4:	af 01       	movw	r20, r30
    23a6:	2f 5f       	subi	r18, 0xFF	; 255
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	9f de       	rcall	.-706    	; 0x20ea <ili9341_setaddress>
	ili9341_pushcolour(colour1);
    23ac:	ce 01       	movw	r24, r28
    23ae:	a5 df       	rcall	.-182    	; 0x22fa <ili9341_pushcolour>
}
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	08 95       	ret

000023b6 <ili9341_drawvline>:


//draw vertical line
void ili9341_drawvline(uint16_t x,uint16_t y,uint16_t h,uint16_t colour)//basically we will see this line horizental if we see the display 320*240
{
    23b6:	0f 93       	push	r16
    23b8:	1f 93       	push	r17
    23ba:	cf 93       	push	r28
    23bc:	df 93       	push	r29
    23be:	dc 01       	movw	r26, r24
    23c0:	ea 01       	movw	r28, r20
    23c2:	89 01       	movw	r16, r18
	if((x >= LCD_W) || (y >= LCD_H))
    23c4:	80 91 c4 01 	lds	r24, 0x01C4
    23c8:	90 91 c5 01 	lds	r25, 0x01C5
    23cc:	a8 17       	cp	r26, r24
    23ce:	b9 07       	cpc	r27, r25
    23d0:	28 f5       	brcc	.+74     	; 0x241c <ili9341_drawvline+0x66>
    23d2:	80 91 c6 01 	lds	r24, 0x01C6
    23d6:	90 91 c7 01 	lds	r25, 0x01C7
    23da:	68 17       	cp	r22, r24
    23dc:	79 07       	cpc	r23, r25
    23de:	f0 f4       	brcc	.+60     	; 0x241c <ili9341_drawvline+0x66>
		return;

	if((y+h-1)>=LCD_H)
    23e0:	fb 01       	movw	r30, r22
    23e2:	31 97       	sbiw	r30, 0x01	; 1
    23e4:	20 91 c6 01 	lds	r18, 0x01C6
    23e8:	30 91 c7 01 	lds	r19, 0x01C7
    23ec:	cf 01       	movw	r24, r30
    23ee:	84 0f       	add	r24, r20
    23f0:	95 1f       	adc	r25, r21
    23f2:	82 17       	cp	r24, r18
    23f4:	93 07       	cpc	r25, r19
    23f6:	30 f0       	brcs	.+12     	; 0x2404 <ili9341_drawvline+0x4e>
		h=LCD_H-y;
    23f8:	c0 91 c6 01 	lds	r28, 0x01C6
    23fc:	d0 91 c7 01 	lds	r29, 0x01C7
    2400:	c6 1b       	sub	r28, r22
    2402:	d7 0b       	sbc	r29, r23

	ili9341_setaddress(x,y,x,y+h-1);
    2404:	ec 0f       	add	r30, r28
    2406:	fd 1f       	adc	r31, r29
    2408:	cd 01       	movw	r24, r26
    240a:	ad 01       	movw	r20, r26
    240c:	9f 01       	movw	r18, r30
    240e:	6d de       	rcall	.-806    	; 0x20ea <ili9341_setaddress>
    2410:	03 c0       	rjmp	.+6      	; 0x2418 <ili9341_drawvline+0x62>
	while(h--)
	{
		ili9341_pushcolour(colour);
    2412:	c8 01       	movw	r24, r16
    2414:	72 df       	rcall	.-284    	; 0x22fa <ili9341_pushcolour>
    2416:	21 97       	sbiw	r28, 0x01	; 1

	if((y+h-1)>=LCD_H)
		h=LCD_H-y;

	ili9341_setaddress(x,y,x,y+h-1);
	while(h--)
    2418:	20 97       	sbiw	r28, 0x00	; 0
    241a:	d9 f7       	brne	.-10     	; 0x2412 <ili9341_drawvline+0x5c>
	{
		ili9341_pushcolour(colour);
	}
}
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	08 95       	ret

00002426 <ili9341_drawhline>:


//draw horizental line

void ili9341_drawhline(uint16_t x,uint16_t y,uint16_t w,uint16_t colour)
{
    2426:	0f 93       	push	r16
    2428:	1f 93       	push	r17
    242a:	cf 93       	push	r28
    242c:	df 93       	push	r29
    242e:	fc 01       	movw	r30, r24
    2430:	db 01       	movw	r26, r22
    2432:	ea 01       	movw	r28, r20
    2434:	89 01       	movw	r16, r18
	if((x >=LCD_W) || (y >=LCD_H))
    2436:	80 91 c4 01 	lds	r24, 0x01C4
    243a:	90 91 c5 01 	lds	r25, 0x01C5
    243e:	e8 17       	cp	r30, r24
    2440:	f9 07       	cpc	r31, r25
    2442:	30 f5       	brcc	.+76     	; 0x2490 <ili9341_drawhline+0x6a>
    2444:	80 91 c6 01 	lds	r24, 0x01C6
    2448:	90 91 c7 01 	lds	r25, 0x01C7
    244c:	68 17       	cp	r22, r24
    244e:	79 07       	cpc	r23, r25
    2450:	f8 f4       	brcc	.+62     	; 0x2490 <ili9341_drawhline+0x6a>
		return;

	if((x+w-1)>=LCD_W)
    2452:	af 01       	movw	r20, r30
    2454:	41 50       	subi	r20, 0x01	; 1
    2456:	50 40       	sbci	r21, 0x00	; 0
    2458:	20 91 c4 01 	lds	r18, 0x01C4
    245c:	30 91 c5 01 	lds	r19, 0x01C5
    2460:	ca 01       	movw	r24, r20
    2462:	8c 0f       	add	r24, r28
    2464:	9d 1f       	adc	r25, r29
    2466:	82 17       	cp	r24, r18
    2468:	93 07       	cpc	r25, r19
    246a:	30 f0       	brcs	.+12     	; 0x2478 <ili9341_drawhline+0x52>
		w=LCD_W-x;
    246c:	c0 91 c4 01 	lds	r28, 0x01C4
    2470:	d0 91 c5 01 	lds	r29, 0x01C5
    2474:	ce 1b       	sub	r28, r30
    2476:	df 0b       	sbc	r29, r31

	ili9341_setaddress(x,y,x+w-1,y);
    2478:	4c 0f       	add	r20, r28
    247a:	5d 1f       	adc	r21, r29
    247c:	cf 01       	movw	r24, r30
    247e:	bd 01       	movw	r22, r26
    2480:	9d 01       	movw	r18, r26
    2482:	33 de       	rcall	.-922    	; 0x20ea <ili9341_setaddress>
    2484:	03 c0       	rjmp	.+6      	; 0x248c <ili9341_drawhline+0x66>
	while(w--)
	{
		ili9341_pushcolour(colour);
    2486:	c8 01       	movw	r24, r16
    2488:	38 df       	rcall	.-400    	; 0x22fa <ili9341_pushcolour>
    248a:	21 97       	sbiw	r28, 0x01	; 1

	if((x+w-1)>=LCD_W)
		w=LCD_W-x;

	ili9341_setaddress(x,y,x+w-1,y);
	while(w--)
    248c:	20 97       	sbiw	r28, 0x00	; 0
    248e:	d9 f7       	brne	.-10     	; 0x2486 <ili9341_drawhline+0x60>
	{
		ili9341_pushcolour(colour);
	}
}
    2490:	df 91       	pop	r29
    2492:	cf 91       	pop	r28
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	08 95       	ret

0000249a <ili9341_fillrect>:


//draw colour filled rectangle
void ili9341_fillrect(uint16_t x,uint16_t y,uint16_t w,uint16_t h,uint16_t colour)
{
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	dc 01       	movw	r26, r24
    24ac:	7a 01       	movw	r14, r20
    24ae:	e9 01       	movw	r28, r18
    24b0:	68 01       	movw	r12, r16
	if((x >=LCD_W) || (y >=LCD_H))
    24b2:	80 91 c4 01 	lds	r24, 0x01C4
    24b6:	90 91 c5 01 	lds	r25, 0x01C5
    24ba:	a8 17       	cp	r26, r24
    24bc:	b9 07       	cpc	r27, r25
    24be:	08 f0       	brcs	.+2      	; 0x24c2 <ili9341_fillrect+0x28>
    24c0:	41 c0       	rjmp	.+130    	; 0x2544 <ili9341_fillrect+0xaa>
    24c2:	80 91 c6 01 	lds	r24, 0x01C6
    24c6:	90 91 c7 01 	lds	r25, 0x01C7
    24ca:	68 17       	cp	r22, r24
    24cc:	79 07       	cpc	r23, r25
    24ce:	d0 f5       	brcc	.+116    	; 0x2544 <ili9341_fillrect+0xaa>
		return;

	if((x+w-1)>=LCD_W)
    24d0:	ad 01       	movw	r20, r26
    24d2:	41 50       	subi	r20, 0x01	; 1
    24d4:	50 40       	sbci	r21, 0x00	; 0
    24d6:	20 91 c4 01 	lds	r18, 0x01C4
    24da:	30 91 c5 01 	lds	r19, 0x01C5
    24de:	ca 01       	movw	r24, r20
    24e0:	8e 0d       	add	r24, r14
    24e2:	9f 1d       	adc	r25, r15
    24e4:	82 17       	cp	r24, r18
    24e6:	93 07       	cpc	r25, r19
    24e8:	30 f0       	brcs	.+12     	; 0x24f6 <ili9341_fillrect+0x5c>
		w=LCD_W-x;
    24ea:	e0 90 c4 01 	lds	r14, 0x01C4
    24ee:	f0 90 c5 01 	lds	r15, 0x01C5
    24f2:	ea 1a       	sub	r14, r26
    24f4:	fb 0a       	sbc	r15, r27

	if((y+h-1)>=LCD_H)
    24f6:	fb 01       	movw	r30, r22
    24f8:	31 97       	sbiw	r30, 0x01	; 1
    24fa:	20 91 c6 01 	lds	r18, 0x01C6
    24fe:	30 91 c7 01 	lds	r19, 0x01C7
    2502:	cf 01       	movw	r24, r30
    2504:	8c 0f       	add	r24, r28
    2506:	9d 1f       	adc	r25, r29
    2508:	82 17       	cp	r24, r18
    250a:	93 07       	cpc	r25, r19
    250c:	30 f0       	brcs	.+12     	; 0x251a <ili9341_fillrect+0x80>
		h=LCD_H-y;
    250e:	c0 91 c6 01 	lds	r28, 0x01C6
    2512:	d0 91 c7 01 	lds	r29, 0x01C7
    2516:	c6 1b       	sub	r28, r22
    2518:	d7 0b       	sbc	r29, r23

	ili9341_setaddress(x, y, x+w-1, y+h-1);
    251a:	4e 0d       	add	r20, r14
    251c:	5f 1d       	adc	r21, r15
    251e:	ec 0f       	add	r30, r28
    2520:	fd 1f       	adc	r31, r29
    2522:	cd 01       	movw	r24, r26
    2524:	9f 01       	movw	r18, r30
    2526:	e1 dd       	rcall	.-1086   	; 0x20ea <ili9341_setaddress>
    2528:	8e 01       	movw	r16, r28
    252a:	07 c0       	rjmp	.+14     	; 0x253a <ili9341_fillrect+0xa0>

	for(y=h; y>0; y--) 
	{
		for(x=w; x>0; x--)
		{
			ili9341_pushcolour(colour);
    252c:	c6 01       	movw	r24, r12
    252e:	e5 de       	rcall	.-566    	; 0x22fa <ili9341_pushcolour>

	ili9341_setaddress(x, y, x+w-1, y+h-1);

	for(y=h; y>0; y--) 
	{
		for(x=w; x>0; x--)
    2530:	21 97       	sbiw	r28, 0x01	; 1
    2532:	20 97       	sbiw	r28, 0x00	; 0
    2534:	d9 f7       	brne	.-10     	; 0x252c <ili9341_fillrect+0x92>
	if((y+h-1)>=LCD_H)
		h=LCD_H-y;

	ili9341_setaddress(x, y, x+w-1, y+h-1);

	for(y=h; y>0; y--) 
    2536:	01 50       	subi	r16, 0x01	; 1
    2538:	10 40       	sbci	r17, 0x00	; 0
    253a:	01 15       	cp	r16, r1
    253c:	11 05       	cpc	r17, r1
    253e:	11 f0       	breq	.+4      	; 0x2544 <ili9341_fillrect+0xaa>
    2540:	e7 01       	movw	r28, r14
    2542:	f7 cf       	rjmp	.-18     	; 0x2532 <ili9341_fillrect+0x98>
		for(x=w; x>0; x--)
		{
			ili9341_pushcolour(colour);
		}
	}
}
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	1f 91       	pop	r17
    254a:	0f 91       	pop	r16
    254c:	ff 90       	pop	r15
    254e:	ef 90       	pop	r14
    2550:	df 90       	pop	r13
    2552:	cf 90       	pop	r12
    2554:	08 95       	ret

00002556 <ili9341_setRotation>:

//rotate screen at desired orientation
void ili9341_setRotation(uint8_t m) 
{
    2556:	1f 93       	push	r17
    2558:	18 2f       	mov	r17, r24
	uint8_t rotation;
	ili9341_writecommand8(0x36);
    255a:	86 e3       	ldi	r24, 0x36	; 54
    255c:	b1 dd       	rcall	.-1182   	; 0x20c0 <ili9341_writecommand8>
	rotation = m % 4;

	switch (rotation) 
    255e:	13 70       	andi	r17, 0x03	; 3
    2560:	11 30       	cpi	r17, 0x01	; 1
    2562:	39 f0       	breq	.+14     	; 0x2572 <ili9341_setRotation+0x1c>
    2564:	11 30       	cpi	r17, 0x01	; 1
    2566:	a0 f0       	brcs	.+40     	; 0x2590 <ili9341_setRotation+0x3a>
    2568:	12 30       	cpi	r17, 0x02	; 2
    256a:	29 f0       	breq	.+10     	; 0x2576 <ili9341_setRotation+0x20>
    256c:	13 30       	cpi	r17, 0x03	; 3
    256e:	81 f4       	brne	.+32     	; 0x2590 <ili9341_setRotation+0x3a>
    2570:	04 c0       	rjmp	.+8      	; 0x257a <ili9341_setRotation+0x24>
			LCD_W = 240;
			LCD_H = 320;
			break;

		case 1:
			ili9341_writedata8(0x20|0x08);
    2572:	88 e2       	ldi	r24, 0x28	; 40
    2574:	03 c0       	rjmp	.+6      	; 0x257c <ili9341_setRotation+0x26>
			LCD_W  = 320;
			LCD_H = 240;
			break;

		case 2:
			ili9341_writedata8(0x80|0x08);
    2576:	88 e8       	ldi	r24, 0x88	; 136
    2578:	0c c0       	rjmp	.+24     	; 0x2592 <ili9341_setRotation+0x3c>
			LCD_W  = 240;
			LCD_H = 320;
			break;

		case 3:
			ili9341_writedata8(0x40|0x80|0x20|0x08);
    257a:	88 ee       	ldi	r24, 0xE8	; 232
    257c:	ac dd       	rcall	.-1192   	; 0x20d6 <ili9341_writedata8>
			LCD_W  = 320;
    257e:	80 e4       	ldi	r24, 0x40	; 64
    2580:	91 e0       	ldi	r25, 0x01	; 1
    2582:	90 93 c5 01 	sts	0x01C5, r25
    2586:	80 93 c4 01 	sts	0x01C4, r24
			LCD_H = 240;
    258a:	80 ef       	ldi	r24, 0xF0	; 240
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0a c0       	rjmp	.+20     	; 0x25a4 <ili9341_setRotation+0x4e>
			break;

		default:
			ili9341_writedata8(0x40 | 0x08);
    2590:	88 e4       	ldi	r24, 0x48	; 72
    2592:	a1 dd       	rcall	.-1214   	; 0x20d6 <ili9341_writedata8>
			LCD_W = 240;
    2594:	80 ef       	ldi	r24, 0xF0	; 240
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	90 93 c5 01 	sts	0x01C5, r25
    259c:	80 93 c4 01 	sts	0x01C4, r24
			LCD_H = 320;
    25a0:	80 e4       	ldi	r24, 0x40	; 64
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	90 93 c7 01 	sts	0x01C7, r25
    25a8:	80 93 c6 01 	sts	0x01C6, r24
			break;
	}
    25ac:	1f 91       	pop	r17
    25ae:	08 95       	ret

000025b0 <ili9341_setcursor>:
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x = x;
    25b0:	90 93 cf 01 	sts	0x01CF, r25
    25b4:	80 93 ce 01 	sts	0x01CE, r24
	cursor_y = y;
    25b8:	70 93 cb 01 	sts	0x01CB, r23
    25bc:	60 93 ca 01 	sts	0x01CA, r22
}
    25c0:	08 95       	ret

000025c2 <ili9341_settextcolour>:

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour = x;
    25c2:	90 93 cd 01 	sts	0x01CD, r25
    25c6:	80 93 cc 01 	sts	0x01CC, r24
	textbgcolour = y;
    25ca:	70 93 c9 01 	sts	0x01C9, r23
    25ce:	60 93 c8 01 	sts	0x01C8, r22
}
    25d2:	08 95       	ret

000025d4 <ili9341_settextsize>:

void ili9341_settextsize(uint8_t s)
{
	if(s>8)
    25d4:	89 30       	cpi	r24, 0x09	; 9
    25d6:	28 f4       	brcc	.+10     	; 0x25e2 <ili9341_settextsize+0xe>
		return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
    25d8:	88 23       	and	r24, r24
    25da:	09 f4       	brne	.+2      	; 0x25de <ili9341_settextsize+0xa>
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 93 d0 01 	sts	0x01D0, r24
    25e2:	08 95       	ret

000025e4 <ili9341_getx>:
	return;
}

uint16_t ili9341_getx(void)
{
	return cursor_x;
    25e4:	20 91 ce 01 	lds	r18, 0x01CE
    25e8:	30 91 cf 01 	lds	r19, 0x01CF
}
    25ec:	c9 01       	movw	r24, r18
    25ee:	08 95       	ret

000025f0 <ili9341_gety>:

uint16_t ili9341_gety(void)
{
	return cursor_y;
    25f0:	20 91 ca 01 	lds	r18, 0x01CA
    25f4:	30 91 cb 01 	lds	r19, 0x01CB
}
    25f8:	c9 01       	movw	r24, r18
    25fa:	08 95       	ret

000025fc <ili9341_getsize>:

uint16_t ili9341_getsize(void)
{
	return textsize;
    25fc:	80 91 d0 01 	lds	r24, 0x01D0
}
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	08 95       	ret

00002604 <ili9341_drawchar>:
};

extern uint16_t LCD_W,LCD_H;

void ili9341_drawchar(int16_t x, int16_t y, unsigned char c,uint16_t color, uint16_t bg, uint8_t size) //draw a char like a,b or 1,2
{
    2604:	2f 92       	push	r2
    2606:	3f 92       	push	r3
    2608:	4f 92       	push	r4
    260a:	5f 92       	push	r5
    260c:	6f 92       	push	r6
    260e:	7f 92       	push	r7
    2610:	8f 92       	push	r8
    2612:	9f 92       	push	r9
    2614:	af 92       	push	r10
    2616:	bf 92       	push	r11
    2618:	cf 92       	push	r12
    261a:	df 92       	push	r13
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	28 97       	sbiw	r28, 0x08	; 8
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	1b 01       	movw	r2, r22
    263a:	3c 83       	std	Y+4, r19	; 0x04
    263c:	2b 83       	std	Y+3, r18	; 0x03
    263e:	1e 83       	std	Y+6, r17	; 0x06
    2640:	0d 83       	std	Y+5, r16	; 0x05
    2642:	5e 2c       	mov	r5, r14
	if((x >=LCD_W)            || // Clip right
    2644:	98 87       	std	Y+8, r25	; 0x08
    2646:	8f 83       	std	Y+7, r24	; 0x07
    2648:	80 91 c4 01 	lds	r24, 0x01C4
    264c:	90 91 c5 01 	lds	r25, 0x01C5
    2650:	2f 81       	ldd	r18, Y+7	; 0x07
    2652:	38 85       	ldd	r19, Y+8	; 0x08
    2654:	28 17       	cp	r18, r24
    2656:	39 07       	cpc	r19, r25
    2658:	08 f0       	brcs	.+2      	; 0x265c <ili9341_drawchar+0x58>
    265a:	7a c0       	rjmp	.+244    	; 0x2750 <ili9341_drawchar+0x14c>
    265c:	80 91 c6 01 	lds	r24, 0x01C6
    2660:	90 91 c7 01 	lds	r25, 0x01C7
    2664:	68 17       	cp	r22, r24
    2666:	79 07       	cpc	r23, r25
    2668:	08 f0       	brcs	.+2      	; 0x266c <ili9341_drawchar+0x68>
    266a:	72 c0       	rjmp	.+228    	; 0x2750 <ili9341_drawchar+0x14c>
    266c:	6e 2c       	mov	r6, r14
    266e:	77 24       	eor	r7, r7
    2670:	c3 01       	movw	r24, r6
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	86 0d       	add	r24, r6
    2678:	97 1d       	adc	r25, r7
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	82 0f       	add	r24, r18
    2680:	93 1f       	adc	r25, r19
    2682:	18 16       	cp	r1, r24
    2684:	19 06       	cpc	r1, r25
    2686:	0c f0       	brlt	.+2      	; 0x268a <ili9341_drawchar+0x86>
    2688:	63 c0       	rjmp	.+198    	; 0x2750 <ili9341_drawchar+0x14c>
    268a:	c3 01       	movw	r24, r6
    268c:	53 e0       	ldi	r21, 0x03	; 3
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	5a 95       	dec	r21
    2694:	e1 f7       	brne	.-8      	; 0x268e <ili9341_drawchar+0x8a>
    2696:	82 0d       	add	r24, r2
    2698:	93 1d       	adc	r25, r3
    269a:	18 16       	cp	r1, r24
    269c:	19 06       	cpc	r1, r25
    269e:	0c f0       	brlt	.+2      	; 0x26a2 <ili9341_drawchar+0x9e>
    26a0:	57 c0       	rjmp	.+174    	; 0x2750 <ili9341_drawchar+0x14c>
    26a2:	85 e0       	ldi	r24, 0x05	; 5
    26a4:	48 9f       	mul	r20, r24
    26a6:	50 01       	movw	r10, r0
    26a8:	11 24       	eor	r1, r1
    26aa:	84 e5       	ldi	r24, 0x54	; 84
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a8 0e       	add	r10, r24
    26b0:	b9 1e       	adc	r11, r25
    26b2:	49 01       	movw	r8, r18
    26b4:	1a 82       	std	Y+2, r1	; 0x02
	return;

	for (int8_t i=0; i<6; i++ )
	{
		uint8_t line;
		if (i == 5) 
    26b6:	9a 81       	ldd	r25, Y+2	; 0x02
    26b8:	95 30       	cpi	r25, 0x05	; 5
    26ba:	11 f4       	brne	.+4      	; 0x26c0 <ili9341_drawchar+0xbc>
    26bc:	44 24       	eor	r4, r4
    26be:	02 c0       	rjmp	.+4      	; 0x26c4 <ili9341_drawchar+0xc0>
			line = 0x0;
		else 
			line = pgm_read_byte(font+(c*5)+i);
    26c0:	f5 01       	movw	r30, r10
    26c2:	44 90       	lpm	r4, Z+
    26c4:	61 01       	movw	r12, r2
    26c6:	71 01       	movw	r14, r2
    26c8:	19 82       	std	Y+1, r1	; 0x01

		for (int8_t j = 0; j<8; j++)
		{
			if (line & 0x1)
    26ca:	40 fe       	sbrs	r4, 0
    26cc:	12 c0       	rjmp	.+36     	; 0x26f2 <ili9341_drawchar+0xee>
			{
				if (size == 1) // default size
    26ce:	f1 e0       	ldi	r31, 0x01	; 1
    26d0:	5f 16       	cp	r5, r31
    26d2:	31 f4       	brne	.+12     	; 0x26e0 <ili9341_drawchar+0xdc>
					ili9341_drawpixel(x+i, y+j, color);
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	98 85       	ldd	r25, Y+8	; 0x08
    26d8:	b7 01       	movw	r22, r14
    26da:	4b 81       	ldd	r20, Y+3	; 0x03
    26dc:	5c 81       	ldd	r21, Y+4	; 0x04
    26de:	11 c0       	rjmp	.+34     	; 0x2702 <ili9341_drawchar+0xfe>
				else
				{  // big size
					ili9341_fillrect(x+(i*size), y+(j*size), size, size, color);
    26e0:	c4 01       	movw	r24, r8
    26e2:	b6 01       	movw	r22, r12
    26e4:	45 2d       	mov	r20, r5
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	25 2d       	mov	r18, r5
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	0b 81       	ldd	r16, Y+3	; 0x03
    26ee:	1c 81       	ldd	r17, Y+4	; 0x04
    26f0:	12 c0       	rjmp	.+36     	; 0x2716 <ili9341_drawchar+0x112>
				} 
			}else if (bg != color || bg == color) //not actually needed
			{
				if (size == 1) // default size
    26f2:	21 e0       	ldi	r18, 0x01	; 1
    26f4:	52 16       	cp	r5, r18
    26f6:	39 f4       	brne	.+14     	; 0x2706 <ili9341_drawchar+0x102>
					ili9341_drawpixel(x+i, y+j, bg);
    26f8:	8f 81       	ldd	r24, Y+7	; 0x07
    26fa:	98 85       	ldd	r25, Y+8	; 0x08
    26fc:	b7 01       	movw	r22, r14
    26fe:	4d 81       	ldd	r20, Y+5	; 0x05
    2700:	5e 81       	ldd	r21, Y+6	; 0x06
    2702:	3b de       	rcall	.-906    	; 0x237a <ili9341_drawpixel>
    2704:	09 c0       	rjmp	.+18     	; 0x2718 <ili9341_drawchar+0x114>
				else 
				{  // big size
					ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
    2706:	c4 01       	movw	r24, r8
    2708:	b6 01       	movw	r22, r12
    270a:	45 2d       	mov	r20, r5
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	25 2d       	mov	r18, r5
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	0d 81       	ldd	r16, Y+5	; 0x05
    2714:	1e 81       	ldd	r17, Y+6	; 0x06
    2716:	c1 de       	rcall	.-638    	; 0x249a <ili9341_fillrect>
		if (i == 5) 
			line = 0x0;
		else 
			line = pgm_read_byte(font+(c*5)+i);

		for (int8_t j = 0; j<8; j++)
    2718:	39 81       	ldd	r19, Y+1	; 0x01
    271a:	3f 5f       	subi	r19, 0xFF	; 255
    271c:	39 83       	std	Y+1, r19	; 0x01
    271e:	c6 0c       	add	r12, r6
    2720:	d7 1c       	adc	r13, r7
    2722:	08 94       	sec
    2724:	e1 1c       	adc	r14, r1
    2726:	f1 1c       	adc	r15, r1
    2728:	38 30       	cpi	r19, 0x08	; 8
    272a:	11 f0       	breq	.+4      	; 0x2730 <ili9341_drawchar+0x12c>
				else 
				{  // big size
					ili9341_fillrect(x+i*size, y+j*size, size, size, bg);
				}
			}
			line >>= 1;
    272c:	46 94       	lsr	r4
    272e:	cd cf       	rjmp	.-102    	; 0x26ca <ili9341_drawchar+0xc6>
	(y >=LCD_H)           || // Clip bottom
	((x + 6 * size - 1) < 0) || // Clip left
	((y + 8 * size - 1) < 0))   // Clip top
	return;

	for (int8_t i=0; i<6; i++ )
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	8f 5f       	subi	r24, 0xFF	; 255
    2734:	8a 83       	std	Y+2, r24	; 0x02
    2736:	86 0c       	add	r8, r6
    2738:	97 1c       	adc	r9, r7
    273a:	ef 81       	ldd	r30, Y+7	; 0x07
    273c:	f8 85       	ldd	r31, Y+8	; 0x08
    273e:	31 96       	adiw	r30, 0x01	; 1
    2740:	f8 87       	std	Y+8, r31	; 0x08
    2742:	ef 83       	std	Y+7, r30	; 0x07
    2744:	08 94       	sec
    2746:	a1 1c       	adc	r10, r1
    2748:	b1 1c       	adc	r11, r1
    274a:	86 30       	cpi	r24, 0x06	; 6
    274c:	09 f0       	breq	.+2      	; 0x2750 <ili9341_drawchar+0x14c>
    274e:	b3 cf       	rjmp	.-154    	; 0x26b6 <ili9341_drawchar+0xb2>
				}
			}
			line >>= 1;
		}
	}
}
    2750:	28 96       	adiw	r28, 0x08	; 8
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	df 90       	pop	r13
    276a:	cf 90       	pop	r12
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	9f 90       	pop	r9
    2772:	8f 90       	pop	r8
    2774:	7f 90       	pop	r7
    2776:	6f 90       	pop	r6
    2778:	5f 90       	pop	r5
    277a:	4f 90       	pop	r4
    277c:	3f 90       	pop	r3
    277e:	2f 90       	pop	r2
    2780:	08 95       	ret

00002782 <ili9341_write>:
		return;
	textsize=(s>0) ? s: 1;//this operation means if s0 greater than 0,then s=s,else s=1
}

void ili9341_write(uint8_t c)//write a character at setted coordinates after setting location and colour
{
    2782:	ef 92       	push	r14
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	48 2f       	mov	r20, r24
	if (c == '\n')
    278a:	8a 30       	cpi	r24, 0x0A	; 10
    278c:	b9 f4       	brne	.+46     	; 0x27bc <ili9341_write+0x3a>
	{
		cursor_y += textsize*8;
    278e:	20 91 ca 01 	lds	r18, 0x01CA
    2792:	30 91 cb 01 	lds	r19, 0x01CB
    2796:	80 91 d0 01 	lds	r24, 0x01D0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	e3 e0       	ldi	r30, 0x03	; 3
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	ea 95       	dec	r30
    27a4:	e1 f7       	brne	.-8      	; 0x279e <ili9341_write+0x1c>
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	90 93 cb 01 	sts	0x01CB, r25
    27ae:	80 93 ca 01 	sts	0x01CA, r24
		cursor_x  = 0;
    27b2:	10 92 cf 01 	sts	0x01CF, r1
    27b6:	10 92 ce 01 	sts	0x01CE, r1
    27ba:	25 c0       	rjmp	.+74     	; 0x2806 <ili9341_write+0x84>
	}else if (c == '\r')
    27bc:	8d 30       	cpi	r24, 0x0D	; 13
    27be:	19 f1       	breq	.+70     	; 0x2806 <ili9341_write+0x84>
	{
	 // skip em
	}else
	{
		ili9341_drawchar(cursor_x, cursor_y, c, textcolour, textbgcolour, textsize);
    27c0:	80 91 ce 01 	lds	r24, 0x01CE
    27c4:	90 91 cf 01 	lds	r25, 0x01CF
    27c8:	60 91 ca 01 	lds	r22, 0x01CA
    27cc:	70 91 cb 01 	lds	r23, 0x01CB
    27d0:	20 91 cc 01 	lds	r18, 0x01CC
    27d4:	30 91 cd 01 	lds	r19, 0x01CD
    27d8:	00 91 c8 01 	lds	r16, 0x01C8
    27dc:	10 91 c9 01 	lds	r17, 0x01C9
    27e0:	e0 90 d0 01 	lds	r14, 0x01D0
    27e4:	0f df       	rcall	.-482    	; 0x2604 <ili9341_drawchar>
		cursor_x += textsize*6;
    27e6:	40 91 ce 01 	lds	r20, 0x01CE
    27ea:	50 91 cf 01 	lds	r21, 0x01CF
    27ee:	80 91 d0 01 	lds	r24, 0x01D0
    27f2:	26 e0       	ldi	r18, 0x06	; 6
    27f4:	82 9f       	mul	r24, r18
    27f6:	c0 01       	movw	r24, r0
    27f8:	11 24       	eor	r1, r1
    27fa:	84 0f       	add	r24, r20
    27fc:	95 1f       	adc	r25, r21
    27fe:	90 93 cf 01 	sts	0x01CF, r25
    2802:	80 93 ce 01 	sts	0x01CE, r24
	}
}
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ef 90       	pop	r14
    280c:	08 95       	ret

0000280e <ili9341_backspace>:
	cursor_x = temp;
	return;
}

void ili9341_backspace(uint8_t n, uint16_t colour)
{
    280e:	cf 92       	push	r12
    2810:	df 92       	push	r13
    2812:	ef 92       	push	r14
    2814:	ff 92       	push	r15
    2816:	0f 93       	push	r16
    2818:	1f 93       	push	r17
    281a:	cf 93       	push	r28
    281c:	df 93       	push	r29
    281e:	08 2f       	mov	r16, r24
	uint16_t temp_c = textcolour;
    2820:	e0 90 cc 01 	lds	r14, 0x01CC
    2824:	f0 90 cd 01 	lds	r15, 0x01CD
	uint16_t temp_bg = textbgcolour;
    2828:	c0 91 c8 01 	lds	r28, 0x01C8
    282c:	d0 91 c9 01 	lds	r29, 0x01C9
	cursor_y = y;
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour = x;
    2830:	70 93 cd 01 	sts	0x01CD, r23
    2834:	60 93 cc 01 	sts	0x01CC, r22
	textbgcolour = y;
    2838:	70 93 c9 01 	sts	0x01C9, r23
    283c:	60 93 c8 01 	sts	0x01C8, r22
    2840:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t temp_bg = textbgcolour;

	ili9341_settextcolour(colour, colour);
	for (uint8_t i = 0; i < n; i++)
	{
		ili9341_setcursor(cursor_x - textsize * 6, cursor_y);
    2842:	fa ef       	ldi	r31, 0xFA	; 250
    2844:	cf 2e       	mov	r12, r31
    2846:	ff ef       	ldi	r31, 0xFF	; 255
    2848:	df 2e       	mov	r13, r31
    284a:	3d c0       	rjmp	.+122    	; 0x28c6 <ili9341_backspace+0xb8>
    284c:	20 91 ce 01 	lds	r18, 0x01CE
    2850:	30 91 cf 01 	lds	r19, 0x01CF
    2854:	80 91 d0 01 	lds	r24, 0x01D0
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	ac 01       	movw	r20, r24
    285c:	4c 9d       	mul	r20, r12
    285e:	c0 01       	movw	r24, r0
    2860:	4d 9d       	mul	r20, r13
    2862:	90 0d       	add	r25, r0
    2864:	5c 9d       	mul	r21, r12
    2866:	90 0d       	add	r25, r0
    2868:	11 24       	eor	r1, r1
    286a:	82 0f       	add	r24, r18
    286c:	93 1f       	adc	r25, r19
    286e:	20 91 ca 01 	lds	r18, 0x01CA
    2872:	30 91 cb 01 	lds	r19, 0x01CB
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x = x;
    2876:	90 93 cf 01 	sts	0x01CF, r25
    287a:	80 93 ce 01 	sts	0x01CE, r24
	cursor_y = y;
    287e:	30 93 cb 01 	sts	0x01CB, r19
    2882:	20 93 ca 01 	sts	0x01CA, r18

	ili9341_settextcolour(colour, colour);
	for (uint8_t i = 0; i < n; i++)
	{
		ili9341_setcursor(cursor_x - textsize * 6, cursor_y);
		ili9341_write('\0');
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	7c df       	rcall	.-264    	; 0x2782 <ili9341_write>
		ili9341_setcursor(cursor_x - textsize * 6, cursor_y);
    288a:	20 91 ce 01 	lds	r18, 0x01CE
    288e:	30 91 cf 01 	lds	r19, 0x01CF
    2892:	80 91 d0 01 	lds	r24, 0x01D0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	ac 01       	movw	r20, r24
    289a:	4c 9d       	mul	r20, r12
    289c:	c0 01       	movw	r24, r0
    289e:	4d 9d       	mul	r20, r13
    28a0:	90 0d       	add	r25, r0
    28a2:	5c 9d       	mul	r21, r12
    28a4:	90 0d       	add	r25, r0
    28a6:	11 24       	eor	r1, r1
    28a8:	82 0f       	add	r24, r18
    28aa:	93 1f       	adc	r25, r19
    28ac:	20 91 ca 01 	lds	r18, 0x01CA
    28b0:	30 91 cb 01 	lds	r19, 0x01CB
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x = x;
    28b4:	90 93 cf 01 	sts	0x01CF, r25
    28b8:	80 93 ce 01 	sts	0x01CE, r24
	cursor_y = y;
    28bc:	30 93 cb 01 	sts	0x01CB, r19
    28c0:	20 93 ca 01 	sts	0x01CA, r18
{
	uint16_t temp_c = textcolour;
	uint16_t temp_bg = textbgcolour;

	ili9341_settextcolour(colour, colour);
	for (uint8_t i = 0; i < n; i++)
    28c4:	1f 5f       	subi	r17, 0xFF	; 255
    28c6:	10 17       	cp	r17, r16
    28c8:	08 f2       	brcs	.-126    	; 0x284c <ili9341_backspace+0x3e>
	cursor_y = y;
}

void ili9341_settextcolour(uint16_t x,uint16_t y)//set text colour and text background colour
{
	textcolour = x;
    28ca:	f0 92 cd 01 	sts	0x01CD, r15
    28ce:	e0 92 cc 01 	sts	0x01CC, r14
	textbgcolour = y;
    28d2:	d0 93 c9 01 	sts	0x01C9, r29
    28d6:	c0 93 c8 01 	sts	0x01C8, r28
		ili9341_write('\0');
		ili9341_setcursor(cursor_x - textsize * 6, cursor_y);
	}
	ili9341_settextcolour(temp_c, temp_bg);
	return;
}
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	1f 91       	pop	r17
    28e0:	0f 91       	pop	r16
    28e2:	ff 90       	pop	r15
    28e4:	ef 90       	pop	r14
    28e6:	df 90       	pop	r13
    28e8:	cf 90       	pop	r12
    28ea:	08 95       	ret

000028ec <ili9341_cursor_blink>:
		cursor_x += textsize*6;
	}
}

void ili9341_cursor_blink(void)
{
    28ec:	cf 93       	push	r28
    28ee:	df 93       	push	r29
	uint16_t temp = cursor_x;
    28f0:	c0 91 ce 01 	lds	r28, 0x01CE
    28f4:	d0 91 cf 01 	lds	r29, 0x01CF
	ili9341_write('|');
    28f8:	8c e7       	ldi	r24, 0x7C	; 124
    28fa:	43 df       	rcall	.-378    	; 0x2782 <ili9341_write>
	ili9341_setcursor(temp, cursor_y);
    28fc:	80 91 ca 01 	lds	r24, 0x01CA
    2900:	90 91 cb 01 	lds	r25, 0x01CB
}


void ili9341_setcursor(uint16_t x,uint16_t y)//set cursor at desired location to print data
{
	cursor_x = x;
    2904:	d0 93 cf 01 	sts	0x01CF, r29
    2908:	c0 93 ce 01 	sts	0x01CE, r28
	cursor_y = y;
    290c:	90 93 cb 01 	sts	0x01CB, r25
    2910:	80 93 ca 01 	sts	0x01CA, r24
    2914:	88 e8       	ldi	r24, 0x88	; 136
    2916:	93 e1       	ldi	r25, 0x13	; 19
    2918:	28 ec       	ldi	r18, 0xC8	; 200
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	f9 01       	movw	r30, r18
    291e:	31 97       	sbiw	r30, 0x01	; 1
    2920:	f1 f7       	brne	.-4      	; 0x291e <ili9341_cursor_blink+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2922:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2924:	d9 f7       	brne	.-10     	; 0x291c <ili9341_cursor_blink+0x30>
{
	uint16_t temp = cursor_x;
	ili9341_write('|');
	ili9341_setcursor(temp, cursor_y);
	_delay_ms(500);
	ili9341_write('\0');
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	2c df       	rcall	.-424    	; 0x2782 <ili9341_write>
    292a:	88 e8       	ldi	r24, 0x88	; 136
    292c:	93 e1       	ldi	r25, 0x13	; 19
    292e:	28 ec       	ldi	r18, 0xC8	; 200
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	f9 01       	movw	r30, r18
    2934:	31 97       	sbiw	r30, 0x01	; 1
    2936:	f1 f7       	brne	.-4      	; 0x2934 <ili9341_cursor_blink+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2938:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293a:	d9 f7       	brne	.-10     	; 0x2932 <ili9341_cursor_blink+0x46>
	_delay_ms(500);
	cursor_x = temp;
    293c:	d0 93 cf 01 	sts	0x01CF, r29
    2940:	c0 93 ce 01 	sts	0x01CE, r28
	return;
}
    2944:	df 91       	pop	r29
    2946:	cf 91       	pop	r28
    2948:	08 95       	ret

0000294a <ili9341_putchar_printf>:

//static FILE mydata = FDEV_SETUP_STREAM(ili9341_putchar_printf, NULL, _FDEV_SETUP_WRITE);//mydata declaration and converting it into stream
 
int16_t ili9341_putchar_printf(char var, FILE *stream)//this function will be called whenever printf is used
{
	ili9341_write(var);
    294a:	1b df       	rcall	.-458    	; 0x2782 <ili9341_write>
}
    294c:	08 95       	ret

0000294e <__udivmodqi4>:
    294e:	99 1b       	sub	r25, r25
    2950:	79 e0       	ldi	r23, 0x09	; 9
    2952:	04 c0       	rjmp	.+8      	; 0x295c <__udivmodqi4_ep>

00002954 <__udivmodqi4_loop>:
    2954:	99 1f       	adc	r25, r25
    2956:	96 17       	cp	r25, r22
    2958:	08 f0       	brcs	.+2      	; 0x295c <__udivmodqi4_ep>
    295a:	96 1b       	sub	r25, r22

0000295c <__udivmodqi4_ep>:
    295c:	88 1f       	adc	r24, r24
    295e:	7a 95       	dec	r23
    2960:	c9 f7       	brne	.-14     	; 0x2954 <__udivmodqi4_loop>
    2962:	80 95       	com	r24
    2964:	08 95       	ret

00002966 <__udivmodhi4>:
    2966:	aa 1b       	sub	r26, r26
    2968:	bb 1b       	sub	r27, r27
    296a:	51 e1       	ldi	r21, 0x11	; 17
    296c:	07 c0       	rjmp	.+14     	; 0x297c <__udivmodhi4_ep>

0000296e <__udivmodhi4_loop>:
    296e:	aa 1f       	adc	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	a6 17       	cp	r26, r22
    2974:	b7 07       	cpc	r27, r23
    2976:	10 f0       	brcs	.+4      	; 0x297c <__udivmodhi4_ep>
    2978:	a6 1b       	sub	r26, r22
    297a:	b7 0b       	sbc	r27, r23

0000297c <__udivmodhi4_ep>:
    297c:	88 1f       	adc	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	5a 95       	dec	r21
    2982:	a9 f7       	brne	.-22     	; 0x296e <__udivmodhi4_loop>
    2984:	80 95       	com	r24
    2986:	90 95       	com	r25
    2988:	bc 01       	movw	r22, r24
    298a:	cd 01       	movw	r24, r26
    298c:	08 95       	ret

0000298e <printf>:
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	ed ec       	ldi	r30, 0xCD	; 205
    2994:	f4 e1       	ldi	r31, 0x14	; 20
    2996:	0c 94 9e 17 	jmp	0x2f3c	; 0x2f3c <__prologue_saves__+0x20>
    299a:	fe 01       	movw	r30, r28
    299c:	35 96       	adiw	r30, 0x05	; 5
    299e:	61 91       	ld	r22, Z+
    29a0:	71 91       	ld	r23, Z+
    29a2:	80 91 d3 01 	lds	r24, 0x01D3
    29a6:	90 91 d4 01 	lds	r25, 0x01D4
    29aa:	af 01       	movw	r20, r30
    29ac:	0e 94 11 15 	call	0x2a22	; 0x2a22 <vfprintf>
    29b0:	20 96       	adiw	r28, 0x00	; 0
    29b2:	e2 e0       	ldi	r30, 0x02	; 2
    29b4:	0c 94 ba 17 	jmp	0x2f74	; 0x2f74 <__epilogue_restores__+0x20>

000029b8 <puts>:
    29b8:	0f 93       	push	r16
    29ba:	1f 93       	push	r17
    29bc:	cf 93       	push	r28
    29be:	df 93       	push	r29
    29c0:	8c 01       	movw	r16, r24
    29c2:	e0 91 d3 01 	lds	r30, 0x01D3
    29c6:	f0 91 d4 01 	lds	r31, 0x01D4
    29ca:	83 81       	ldd	r24, Z+3	; 0x03
    29cc:	81 ff       	sbrs	r24, 1
    29ce:	21 c0       	rjmp	.+66     	; 0x2a12 <puts+0x5a>
    29d0:	c0 e0       	ldi	r28, 0x00	; 0
    29d2:	d0 e0       	ldi	r29, 0x00	; 0
    29d4:	0d c0       	rjmp	.+26     	; 0x29f0 <puts+0x38>
    29d6:	e0 91 d3 01 	lds	r30, 0x01D3
    29da:	f0 91 d4 01 	lds	r31, 0x01D4
    29de:	20 85       	ldd	r18, Z+8	; 0x08
    29e0:	31 85       	ldd	r19, Z+9	; 0x09
    29e2:	bf 01       	movw	r22, r30
    29e4:	f9 01       	movw	r30, r18
    29e6:	09 95       	icall
    29e8:	89 2b       	or	r24, r25
    29ea:	11 f0       	breq	.+4      	; 0x29f0 <puts+0x38>
    29ec:	cf ef       	ldi	r28, 0xFF	; 255
    29ee:	df ef       	ldi	r29, 0xFF	; 255
    29f0:	f8 01       	movw	r30, r16
    29f2:	81 91       	ld	r24, Z+
    29f4:	8f 01       	movw	r16, r30
    29f6:	88 23       	and	r24, r24
    29f8:	71 f7       	brne	.-36     	; 0x29d6 <puts+0x1e>
    29fa:	e0 91 d3 01 	lds	r30, 0x01D3
    29fe:	f0 91 d4 01 	lds	r31, 0x01D4
    2a02:	20 85       	ldd	r18, Z+8	; 0x08
    2a04:	31 85       	ldd	r19, Z+9	; 0x09
    2a06:	8a e0       	ldi	r24, 0x0A	; 10
    2a08:	bf 01       	movw	r22, r30
    2a0a:	f9 01       	movw	r30, r18
    2a0c:	09 95       	icall
    2a0e:	89 2b       	or	r24, r25
    2a10:	11 f0       	breq	.+4      	; 0x2a16 <puts+0x5e>
    2a12:	cf ef       	ldi	r28, 0xFF	; 255
    2a14:	df ef       	ldi	r29, 0xFF	; 255
    2a16:	ce 01       	movw	r24, r28
    2a18:	df 91       	pop	r29
    2a1a:	cf 91       	pop	r28
    2a1c:	1f 91       	pop	r17
    2a1e:	0f 91       	pop	r16
    2a20:	08 95       	ret

00002a22 <vfprintf>:
    2a22:	ab e0       	ldi	r26, 0x0B	; 11
    2a24:	b0 e0       	ldi	r27, 0x00	; 0
    2a26:	e7 e1       	ldi	r30, 0x17	; 23
    2a28:	f5 e1       	ldi	r31, 0x15	; 21
    2a2a:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__prologue_saves__>
    2a2e:	3c 01       	movw	r6, r24
    2a30:	2b 01       	movw	r4, r22
    2a32:	5a 01       	movw	r10, r20
    2a34:	fc 01       	movw	r30, r24
    2a36:	17 82       	std	Z+7, r1	; 0x07
    2a38:	16 82       	std	Z+6, r1	; 0x06
    2a3a:	83 81       	ldd	r24, Z+3	; 0x03
    2a3c:	81 fd       	sbrc	r24, 1
    2a3e:	03 c0       	rjmp	.+6      	; 0x2a46 <vfprintf+0x24>
    2a40:	6f ef       	ldi	r22, 0xFF	; 255
    2a42:	7f ef       	ldi	r23, 0xFF	; 255
    2a44:	c6 c1       	rjmp	.+908    	; 0x2dd2 <vfprintf+0x3b0>
    2a46:	9a e0       	ldi	r25, 0x0A	; 10
    2a48:	89 2e       	mov	r8, r25
    2a4a:	1e 01       	movw	r2, r28
    2a4c:	08 94       	sec
    2a4e:	21 1c       	adc	r2, r1
    2a50:	31 1c       	adc	r3, r1
    2a52:	f3 01       	movw	r30, r6
    2a54:	23 81       	ldd	r18, Z+3	; 0x03
    2a56:	f2 01       	movw	r30, r4
    2a58:	23 fd       	sbrc	r18, 3
    2a5a:	85 91       	lpm	r24, Z+
    2a5c:	23 ff       	sbrs	r18, 3
    2a5e:	81 91       	ld	r24, Z+
    2a60:	2f 01       	movw	r4, r30
    2a62:	88 23       	and	r24, r24
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <vfprintf+0x46>
    2a66:	b2 c1       	rjmp	.+868    	; 0x2dcc <vfprintf+0x3aa>
    2a68:	85 32       	cpi	r24, 0x25	; 37
    2a6a:	39 f4       	brne	.+14     	; 0x2a7a <vfprintf+0x58>
    2a6c:	23 fd       	sbrc	r18, 3
    2a6e:	85 91       	lpm	r24, Z+
    2a70:	23 ff       	sbrs	r18, 3
    2a72:	81 91       	ld	r24, Z+
    2a74:	2f 01       	movw	r4, r30
    2a76:	85 32       	cpi	r24, 0x25	; 37
    2a78:	29 f4       	brne	.+10     	; 0x2a84 <vfprintf+0x62>
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	b3 01       	movw	r22, r6
    2a7e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2a82:	e7 cf       	rjmp	.-50     	; 0x2a52 <vfprintf+0x30>
    2a84:	98 2f       	mov	r25, r24
    2a86:	ff 24       	eor	r15, r15
    2a88:	ee 24       	eor	r14, r14
    2a8a:	99 24       	eor	r9, r9
    2a8c:	ff e1       	ldi	r31, 0x1F	; 31
    2a8e:	ff 15       	cp	r31, r15
    2a90:	d0 f0       	brcs	.+52     	; 0x2ac6 <vfprintf+0xa4>
    2a92:	9b 32       	cpi	r25, 0x2B	; 43
    2a94:	69 f0       	breq	.+26     	; 0x2ab0 <vfprintf+0x8e>
    2a96:	9c 32       	cpi	r25, 0x2C	; 44
    2a98:	28 f4       	brcc	.+10     	; 0x2aa4 <vfprintf+0x82>
    2a9a:	90 32       	cpi	r25, 0x20	; 32
    2a9c:	59 f0       	breq	.+22     	; 0x2ab4 <vfprintf+0x92>
    2a9e:	93 32       	cpi	r25, 0x23	; 35
    2aa0:	91 f4       	brne	.+36     	; 0x2ac6 <vfprintf+0xa4>
    2aa2:	0e c0       	rjmp	.+28     	; 0x2ac0 <vfprintf+0x9e>
    2aa4:	9d 32       	cpi	r25, 0x2D	; 45
    2aa6:	49 f0       	breq	.+18     	; 0x2aba <vfprintf+0x98>
    2aa8:	90 33       	cpi	r25, 0x30	; 48
    2aaa:	69 f4       	brne	.+26     	; 0x2ac6 <vfprintf+0xa4>
    2aac:	41 e0       	ldi	r20, 0x01	; 1
    2aae:	24 c0       	rjmp	.+72     	; 0x2af8 <vfprintf+0xd6>
    2ab0:	52 e0       	ldi	r21, 0x02	; 2
    2ab2:	f5 2a       	or	r15, r21
    2ab4:	84 e0       	ldi	r24, 0x04	; 4
    2ab6:	f8 2a       	or	r15, r24
    2ab8:	28 c0       	rjmp	.+80     	; 0x2b0a <vfprintf+0xe8>
    2aba:	98 e0       	ldi	r25, 0x08	; 8
    2abc:	f9 2a       	or	r15, r25
    2abe:	25 c0       	rjmp	.+74     	; 0x2b0a <vfprintf+0xe8>
    2ac0:	e0 e1       	ldi	r30, 0x10	; 16
    2ac2:	fe 2a       	or	r15, r30
    2ac4:	22 c0       	rjmp	.+68     	; 0x2b0a <vfprintf+0xe8>
    2ac6:	f7 fc       	sbrc	r15, 7
    2ac8:	29 c0       	rjmp	.+82     	; 0x2b1c <vfprintf+0xfa>
    2aca:	89 2f       	mov	r24, r25
    2acc:	80 53       	subi	r24, 0x30	; 48
    2ace:	8a 30       	cpi	r24, 0x0A	; 10
    2ad0:	70 f4       	brcc	.+28     	; 0x2aee <vfprintf+0xcc>
    2ad2:	f6 fe       	sbrs	r15, 6
    2ad4:	05 c0       	rjmp	.+10     	; 0x2ae0 <vfprintf+0xbe>
    2ad6:	98 9c       	mul	r9, r8
    2ad8:	90 2c       	mov	r9, r0
    2ada:	11 24       	eor	r1, r1
    2adc:	98 0e       	add	r9, r24
    2ade:	15 c0       	rjmp	.+42     	; 0x2b0a <vfprintf+0xe8>
    2ae0:	e8 9c       	mul	r14, r8
    2ae2:	e0 2c       	mov	r14, r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	e8 0e       	add	r14, r24
    2ae8:	f0 e2       	ldi	r31, 0x20	; 32
    2aea:	ff 2a       	or	r15, r31
    2aec:	0e c0       	rjmp	.+28     	; 0x2b0a <vfprintf+0xe8>
    2aee:	9e 32       	cpi	r25, 0x2E	; 46
    2af0:	29 f4       	brne	.+10     	; 0x2afc <vfprintf+0xda>
    2af2:	f6 fc       	sbrc	r15, 6
    2af4:	6b c1       	rjmp	.+726    	; 0x2dcc <vfprintf+0x3aa>
    2af6:	40 e4       	ldi	r20, 0x40	; 64
    2af8:	f4 2a       	or	r15, r20
    2afa:	07 c0       	rjmp	.+14     	; 0x2b0a <vfprintf+0xe8>
    2afc:	9c 36       	cpi	r25, 0x6C	; 108
    2afe:	19 f4       	brne	.+6      	; 0x2b06 <vfprintf+0xe4>
    2b00:	50 e8       	ldi	r21, 0x80	; 128
    2b02:	f5 2a       	or	r15, r21
    2b04:	02 c0       	rjmp	.+4      	; 0x2b0a <vfprintf+0xe8>
    2b06:	98 36       	cpi	r25, 0x68	; 104
    2b08:	49 f4       	brne	.+18     	; 0x2b1c <vfprintf+0xfa>
    2b0a:	f2 01       	movw	r30, r4
    2b0c:	23 fd       	sbrc	r18, 3
    2b0e:	95 91       	lpm	r25, Z+
    2b10:	23 ff       	sbrs	r18, 3
    2b12:	91 91       	ld	r25, Z+
    2b14:	2f 01       	movw	r4, r30
    2b16:	99 23       	and	r25, r25
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <vfprintf+0xfa>
    2b1a:	b8 cf       	rjmp	.-144    	; 0x2a8c <vfprintf+0x6a>
    2b1c:	89 2f       	mov	r24, r25
    2b1e:	85 54       	subi	r24, 0x45	; 69
    2b20:	83 30       	cpi	r24, 0x03	; 3
    2b22:	18 f0       	brcs	.+6      	; 0x2b2a <vfprintf+0x108>
    2b24:	80 52       	subi	r24, 0x20	; 32
    2b26:	83 30       	cpi	r24, 0x03	; 3
    2b28:	38 f4       	brcc	.+14     	; 0x2b38 <vfprintf+0x116>
    2b2a:	44 e0       	ldi	r20, 0x04	; 4
    2b2c:	50 e0       	ldi	r21, 0x00	; 0
    2b2e:	a4 0e       	add	r10, r20
    2b30:	b5 1e       	adc	r11, r21
    2b32:	5f e3       	ldi	r21, 0x3F	; 63
    2b34:	59 83       	std	Y+1, r21	; 0x01
    2b36:	0f c0       	rjmp	.+30     	; 0x2b56 <vfprintf+0x134>
    2b38:	93 36       	cpi	r25, 0x63	; 99
    2b3a:	31 f0       	breq	.+12     	; 0x2b48 <vfprintf+0x126>
    2b3c:	93 37       	cpi	r25, 0x73	; 115
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <vfprintf+0x13c>
    2b40:	93 35       	cpi	r25, 0x53	; 83
    2b42:	09 f0       	breq	.+2      	; 0x2b46 <vfprintf+0x124>
    2b44:	56 c0       	rjmp	.+172    	; 0x2bf2 <vfprintf+0x1d0>
    2b46:	20 c0       	rjmp	.+64     	; 0x2b88 <vfprintf+0x166>
    2b48:	f5 01       	movw	r30, r10
    2b4a:	80 81       	ld	r24, Z
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	42 e0       	ldi	r20, 0x02	; 2
    2b50:	50 e0       	ldi	r21, 0x00	; 0
    2b52:	a4 0e       	add	r10, r20
    2b54:	b5 1e       	adc	r11, r21
    2b56:	61 01       	movw	r12, r2
    2b58:	01 e0       	ldi	r16, 0x01	; 1
    2b5a:	10 e0       	ldi	r17, 0x00	; 0
    2b5c:	12 c0       	rjmp	.+36     	; 0x2b82 <vfprintf+0x160>
    2b5e:	f5 01       	movw	r30, r10
    2b60:	c0 80       	ld	r12, Z
    2b62:	d1 80       	ldd	r13, Z+1	; 0x01
    2b64:	f6 fc       	sbrc	r15, 6
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <vfprintf+0x14c>
    2b68:	6f ef       	ldi	r22, 0xFF	; 255
    2b6a:	7f ef       	ldi	r23, 0xFF	; 255
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <vfprintf+0x150>
    2b6e:	69 2d       	mov	r22, r9
    2b70:	70 e0       	ldi	r23, 0x00	; 0
    2b72:	42 e0       	ldi	r20, 0x02	; 2
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	a4 0e       	add	r10, r20
    2b78:	b5 1e       	adc	r11, r21
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <strnlen>
    2b80:	8c 01       	movw	r16, r24
    2b82:	5f e7       	ldi	r21, 0x7F	; 127
    2b84:	f5 22       	and	r15, r21
    2b86:	14 c0       	rjmp	.+40     	; 0x2bb0 <vfprintf+0x18e>
    2b88:	f5 01       	movw	r30, r10
    2b8a:	c0 80       	ld	r12, Z
    2b8c:	d1 80       	ldd	r13, Z+1	; 0x01
    2b8e:	f6 fc       	sbrc	r15, 6
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <vfprintf+0x176>
    2b92:	6f ef       	ldi	r22, 0xFF	; 255
    2b94:	7f ef       	ldi	r23, 0xFF	; 255
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <vfprintf+0x17a>
    2b98:	69 2d       	mov	r22, r9
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	42 e0       	ldi	r20, 0x02	; 2
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	a4 0e       	add	r10, r20
    2ba2:	b5 1e       	adc	r11, r21
    2ba4:	c6 01       	movw	r24, r12
    2ba6:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <strnlen_P>
    2baa:	8c 01       	movw	r16, r24
    2bac:	50 e8       	ldi	r21, 0x80	; 128
    2bae:	f5 2a       	or	r15, r21
    2bb0:	f3 fe       	sbrs	r15, 3
    2bb2:	07 c0       	rjmp	.+14     	; 0x2bc2 <vfprintf+0x1a0>
    2bb4:	1a c0       	rjmp	.+52     	; 0x2bea <vfprintf+0x1c8>
    2bb6:	80 e2       	ldi	r24, 0x20	; 32
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	b3 01       	movw	r22, r6
    2bbc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2bc0:	ea 94       	dec	r14
    2bc2:	8e 2d       	mov	r24, r14
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	08 17       	cp	r16, r24
    2bc8:	19 07       	cpc	r17, r25
    2bca:	a8 f3       	brcs	.-22     	; 0x2bb6 <vfprintf+0x194>
    2bcc:	0e c0       	rjmp	.+28     	; 0x2bea <vfprintf+0x1c8>
    2bce:	f6 01       	movw	r30, r12
    2bd0:	f7 fc       	sbrc	r15, 7
    2bd2:	85 91       	lpm	r24, Z+
    2bd4:	f7 fe       	sbrs	r15, 7
    2bd6:	81 91       	ld	r24, Z+
    2bd8:	6f 01       	movw	r12, r30
    2bda:	90 e0       	ldi	r25, 0x00	; 0
    2bdc:	b3 01       	movw	r22, r6
    2bde:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2be2:	e1 10       	cpse	r14, r1
    2be4:	ea 94       	dec	r14
    2be6:	01 50       	subi	r16, 0x01	; 1
    2be8:	10 40       	sbci	r17, 0x00	; 0
    2bea:	01 15       	cp	r16, r1
    2bec:	11 05       	cpc	r17, r1
    2bee:	79 f7       	brne	.-34     	; 0x2bce <vfprintf+0x1ac>
    2bf0:	ea c0       	rjmp	.+468    	; 0x2dc6 <vfprintf+0x3a4>
    2bf2:	94 36       	cpi	r25, 0x64	; 100
    2bf4:	11 f0       	breq	.+4      	; 0x2bfa <vfprintf+0x1d8>
    2bf6:	99 36       	cpi	r25, 0x69	; 105
    2bf8:	69 f5       	brne	.+90     	; 0x2c54 <vfprintf+0x232>
    2bfa:	f7 fe       	sbrs	r15, 7
    2bfc:	08 c0       	rjmp	.+16     	; 0x2c0e <vfprintf+0x1ec>
    2bfe:	f5 01       	movw	r30, r10
    2c00:	20 81       	ld	r18, Z
    2c02:	31 81       	ldd	r19, Z+1	; 0x01
    2c04:	42 81       	ldd	r20, Z+2	; 0x02
    2c06:	53 81       	ldd	r21, Z+3	; 0x03
    2c08:	84 e0       	ldi	r24, 0x04	; 4
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	0a c0       	rjmp	.+20     	; 0x2c22 <vfprintf+0x200>
    2c0e:	f5 01       	movw	r30, r10
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	9c 01       	movw	r18, r24
    2c16:	44 27       	eor	r20, r20
    2c18:	37 fd       	sbrc	r19, 7
    2c1a:	40 95       	com	r20
    2c1c:	54 2f       	mov	r21, r20
    2c1e:	82 e0       	ldi	r24, 0x02	; 2
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	a8 0e       	add	r10, r24
    2c24:	b9 1e       	adc	r11, r25
    2c26:	9f e6       	ldi	r25, 0x6F	; 111
    2c28:	f9 22       	and	r15, r25
    2c2a:	57 ff       	sbrs	r21, 7
    2c2c:	09 c0       	rjmp	.+18     	; 0x2c40 <vfprintf+0x21e>
    2c2e:	50 95       	com	r21
    2c30:	40 95       	com	r20
    2c32:	30 95       	com	r19
    2c34:	21 95       	neg	r18
    2c36:	3f 4f       	sbci	r19, 0xFF	; 255
    2c38:	4f 4f       	sbci	r20, 0xFF	; 255
    2c3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c3c:	e0 e8       	ldi	r30, 0x80	; 128
    2c3e:	fe 2a       	or	r15, r30
    2c40:	ca 01       	movw	r24, r20
    2c42:	b9 01       	movw	r22, r18
    2c44:	a1 01       	movw	r20, r2
    2c46:	2a e0       	ldi	r18, 0x0A	; 10
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__ultoa_invert>
    2c4e:	d8 2e       	mov	r13, r24
    2c50:	d2 18       	sub	r13, r2
    2c52:	40 c0       	rjmp	.+128    	; 0x2cd4 <vfprintf+0x2b2>
    2c54:	95 37       	cpi	r25, 0x75	; 117
    2c56:	29 f4       	brne	.+10     	; 0x2c62 <vfprintf+0x240>
    2c58:	1f 2d       	mov	r17, r15
    2c5a:	1f 7e       	andi	r17, 0xEF	; 239
    2c5c:	2a e0       	ldi	r18, 0x0A	; 10
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	1d c0       	rjmp	.+58     	; 0x2c9c <vfprintf+0x27a>
    2c62:	1f 2d       	mov	r17, r15
    2c64:	19 7f       	andi	r17, 0xF9	; 249
    2c66:	9f 36       	cpi	r25, 0x6F	; 111
    2c68:	61 f0       	breq	.+24     	; 0x2c82 <vfprintf+0x260>
    2c6a:	90 37       	cpi	r25, 0x70	; 112
    2c6c:	20 f4       	brcc	.+8      	; 0x2c76 <vfprintf+0x254>
    2c6e:	98 35       	cpi	r25, 0x58	; 88
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <vfprintf+0x252>
    2c72:	ac c0       	rjmp	.+344    	; 0x2dcc <vfprintf+0x3aa>
    2c74:	0f c0       	rjmp	.+30     	; 0x2c94 <vfprintf+0x272>
    2c76:	90 37       	cpi	r25, 0x70	; 112
    2c78:	39 f0       	breq	.+14     	; 0x2c88 <vfprintf+0x266>
    2c7a:	98 37       	cpi	r25, 0x78	; 120
    2c7c:	09 f0       	breq	.+2      	; 0x2c80 <vfprintf+0x25e>
    2c7e:	a6 c0       	rjmp	.+332    	; 0x2dcc <vfprintf+0x3aa>
    2c80:	04 c0       	rjmp	.+8      	; 0x2c8a <vfprintf+0x268>
    2c82:	28 e0       	ldi	r18, 0x08	; 8
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	0a c0       	rjmp	.+20     	; 0x2c9c <vfprintf+0x27a>
    2c88:	10 61       	ori	r17, 0x10	; 16
    2c8a:	14 fd       	sbrc	r17, 4
    2c8c:	14 60       	ori	r17, 0x04	; 4
    2c8e:	20 e1       	ldi	r18, 0x10	; 16
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	04 c0       	rjmp	.+8      	; 0x2c9c <vfprintf+0x27a>
    2c94:	14 fd       	sbrc	r17, 4
    2c96:	16 60       	ori	r17, 0x06	; 6
    2c98:	20 e1       	ldi	r18, 0x10	; 16
    2c9a:	32 e0       	ldi	r19, 0x02	; 2
    2c9c:	17 ff       	sbrs	r17, 7
    2c9e:	08 c0       	rjmp	.+16     	; 0x2cb0 <vfprintf+0x28e>
    2ca0:	f5 01       	movw	r30, r10
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	44 e0       	ldi	r20, 0x04	; 4
    2cac:	50 e0       	ldi	r21, 0x00	; 0
    2cae:	08 c0       	rjmp	.+16     	; 0x2cc0 <vfprintf+0x29e>
    2cb0:	f5 01       	movw	r30, r10
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	80 e0       	ldi	r24, 0x00	; 0
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	42 e0       	ldi	r20, 0x02	; 2
    2cbe:	50 e0       	ldi	r21, 0x00	; 0
    2cc0:	a4 0e       	add	r10, r20
    2cc2:	b5 1e       	adc	r11, r21
    2cc4:	a1 01       	movw	r20, r2
    2cc6:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__ultoa_invert>
    2cca:	d8 2e       	mov	r13, r24
    2ccc:	d2 18       	sub	r13, r2
    2cce:	8f e7       	ldi	r24, 0x7F	; 127
    2cd0:	f8 2e       	mov	r15, r24
    2cd2:	f1 22       	and	r15, r17
    2cd4:	f6 fe       	sbrs	r15, 6
    2cd6:	0b c0       	rjmp	.+22     	; 0x2cee <vfprintf+0x2cc>
    2cd8:	5e ef       	ldi	r21, 0xFE	; 254
    2cda:	f5 22       	and	r15, r21
    2cdc:	d9 14       	cp	r13, r9
    2cde:	38 f4       	brcc	.+14     	; 0x2cee <vfprintf+0x2cc>
    2ce0:	f4 fe       	sbrs	r15, 4
    2ce2:	07 c0       	rjmp	.+14     	; 0x2cf2 <vfprintf+0x2d0>
    2ce4:	f2 fc       	sbrc	r15, 2
    2ce6:	05 c0       	rjmp	.+10     	; 0x2cf2 <vfprintf+0x2d0>
    2ce8:	8f ee       	ldi	r24, 0xEF	; 239
    2cea:	f8 22       	and	r15, r24
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <vfprintf+0x2d0>
    2cee:	1d 2d       	mov	r17, r13
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <vfprintf+0x2d2>
    2cf2:	19 2d       	mov	r17, r9
    2cf4:	f4 fe       	sbrs	r15, 4
    2cf6:	0d c0       	rjmp	.+26     	; 0x2d12 <vfprintf+0x2f0>
    2cf8:	fe 01       	movw	r30, r28
    2cfa:	ed 0d       	add	r30, r13
    2cfc:	f1 1d       	adc	r31, r1
    2cfe:	80 81       	ld	r24, Z
    2d00:	80 33       	cpi	r24, 0x30	; 48
    2d02:	19 f4       	brne	.+6      	; 0x2d0a <vfprintf+0x2e8>
    2d04:	99 ee       	ldi	r25, 0xE9	; 233
    2d06:	f9 22       	and	r15, r25
    2d08:	08 c0       	rjmp	.+16     	; 0x2d1a <vfprintf+0x2f8>
    2d0a:	1f 5f       	subi	r17, 0xFF	; 255
    2d0c:	f2 fe       	sbrs	r15, 2
    2d0e:	05 c0       	rjmp	.+10     	; 0x2d1a <vfprintf+0x2f8>
    2d10:	03 c0       	rjmp	.+6      	; 0x2d18 <vfprintf+0x2f6>
    2d12:	8f 2d       	mov	r24, r15
    2d14:	86 78       	andi	r24, 0x86	; 134
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <vfprintf+0x2f8>
    2d18:	1f 5f       	subi	r17, 0xFF	; 255
    2d1a:	0f 2d       	mov	r16, r15
    2d1c:	f3 fc       	sbrc	r15, 3
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <vfprintf+0x326>
    2d20:	f0 fe       	sbrs	r15, 0
    2d22:	0f c0       	rjmp	.+30     	; 0x2d42 <vfprintf+0x320>
    2d24:	1e 15       	cp	r17, r14
    2d26:	10 f0       	brcs	.+4      	; 0x2d2c <vfprintf+0x30a>
    2d28:	9d 2c       	mov	r9, r13
    2d2a:	0b c0       	rjmp	.+22     	; 0x2d42 <vfprintf+0x320>
    2d2c:	9d 2c       	mov	r9, r13
    2d2e:	9e 0c       	add	r9, r14
    2d30:	91 1a       	sub	r9, r17
    2d32:	1e 2d       	mov	r17, r14
    2d34:	06 c0       	rjmp	.+12     	; 0x2d42 <vfprintf+0x320>
    2d36:	80 e2       	ldi	r24, 0x20	; 32
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	b3 01       	movw	r22, r6
    2d3c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2d40:	1f 5f       	subi	r17, 0xFF	; 255
    2d42:	1e 15       	cp	r17, r14
    2d44:	c0 f3       	brcs	.-16     	; 0x2d36 <vfprintf+0x314>
    2d46:	04 c0       	rjmp	.+8      	; 0x2d50 <vfprintf+0x32e>
    2d48:	1e 15       	cp	r17, r14
    2d4a:	10 f4       	brcc	.+4      	; 0x2d50 <vfprintf+0x32e>
    2d4c:	e1 1a       	sub	r14, r17
    2d4e:	01 c0       	rjmp	.+2      	; 0x2d52 <vfprintf+0x330>
    2d50:	ee 24       	eor	r14, r14
    2d52:	04 ff       	sbrs	r16, 4
    2d54:	0f c0       	rjmp	.+30     	; 0x2d74 <vfprintf+0x352>
    2d56:	80 e3       	ldi	r24, 0x30	; 48
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	b3 01       	movw	r22, r6
    2d5c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2d60:	02 ff       	sbrs	r16, 2
    2d62:	1d c0       	rjmp	.+58     	; 0x2d9e <vfprintf+0x37c>
    2d64:	01 fd       	sbrc	r16, 1
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <vfprintf+0x34c>
    2d68:	88 e7       	ldi	r24, 0x78	; 120
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e c0       	rjmp	.+28     	; 0x2d8a <vfprintf+0x368>
    2d6e:	88 e5       	ldi	r24, 0x58	; 88
    2d70:	90 e0       	ldi	r25, 0x00	; 0
    2d72:	0b c0       	rjmp	.+22     	; 0x2d8a <vfprintf+0x368>
    2d74:	80 2f       	mov	r24, r16
    2d76:	86 78       	andi	r24, 0x86	; 134
    2d78:	91 f0       	breq	.+36     	; 0x2d9e <vfprintf+0x37c>
    2d7a:	01 ff       	sbrs	r16, 1
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <vfprintf+0x360>
    2d7e:	8b e2       	ldi	r24, 0x2B	; 43
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <vfprintf+0x362>
    2d82:	80 e2       	ldi	r24, 0x20	; 32
    2d84:	f7 fc       	sbrc	r15, 7
    2d86:	8d e2       	ldi	r24, 0x2D	; 45
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	b3 01       	movw	r22, r6
    2d8c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2d90:	06 c0       	rjmp	.+12     	; 0x2d9e <vfprintf+0x37c>
    2d92:	80 e3       	ldi	r24, 0x30	; 48
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	b3 01       	movw	r22, r6
    2d98:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2d9c:	9a 94       	dec	r9
    2d9e:	d9 14       	cp	r13, r9
    2da0:	c0 f3       	brcs	.-16     	; 0x2d92 <vfprintf+0x370>
    2da2:	da 94       	dec	r13
    2da4:	f1 01       	movw	r30, r2
    2da6:	ed 0d       	add	r30, r13
    2da8:	f1 1d       	adc	r31, r1
    2daa:	80 81       	ld	r24, Z
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	b3 01       	movw	r22, r6
    2db0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2db4:	dd 20       	and	r13, r13
    2db6:	a9 f7       	brne	.-22     	; 0x2da2 <vfprintf+0x380>
    2db8:	06 c0       	rjmp	.+12     	; 0x2dc6 <vfprintf+0x3a4>
    2dba:	80 e2       	ldi	r24, 0x20	; 32
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	b3 01       	movw	r22, r6
    2dc0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <fputc>
    2dc4:	ea 94       	dec	r14
    2dc6:	ee 20       	and	r14, r14
    2dc8:	c1 f7       	brne	.-16     	; 0x2dba <vfprintf+0x398>
    2dca:	43 ce       	rjmp	.-890    	; 0x2a52 <vfprintf+0x30>
    2dcc:	f3 01       	movw	r30, r6
    2dce:	66 81       	ldd	r22, Z+6	; 0x06
    2dd0:	77 81       	ldd	r23, Z+7	; 0x07
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	2b 96       	adiw	r28, 0x0b	; 11
    2dd6:	e2 e1       	ldi	r30, 0x12	; 18
    2dd8:	0c 94 aa 17 	jmp	0x2f54	; 0x2f54 <__epilogue_restores__>

00002ddc <strnlen_P>:
    2ddc:	fc 01       	movw	r30, r24
    2dde:	05 90       	lpm	r0, Z+
    2de0:	61 50       	subi	r22, 0x01	; 1
    2de2:	70 40       	sbci	r23, 0x00	; 0
    2de4:	01 10       	cpse	r0, r1
    2de6:	d8 f7       	brcc	.-10     	; 0x2dde <strnlen_P+0x2>
    2de8:	80 95       	com	r24
    2dea:	90 95       	com	r25
    2dec:	8e 0f       	add	r24, r30
    2dee:	9f 1f       	adc	r25, r31
    2df0:	08 95       	ret

00002df2 <strnlen>:
    2df2:	fc 01       	movw	r30, r24
    2df4:	61 50       	subi	r22, 0x01	; 1
    2df6:	70 40       	sbci	r23, 0x00	; 0
    2df8:	01 90       	ld	r0, Z+
    2dfa:	01 10       	cpse	r0, r1
    2dfc:	d8 f7       	brcc	.-10     	; 0x2df4 <strnlen+0x2>
    2dfe:	80 95       	com	r24
    2e00:	90 95       	com	r25
    2e02:	8e 0f       	add	r24, r30
    2e04:	9f 1f       	adc	r25, r31
    2e06:	08 95       	ret

00002e08 <fputc>:
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	8c 01       	movw	r16, r24
    2e12:	eb 01       	movw	r28, r22
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	81 ff       	sbrs	r24, 1
    2e18:	1b c0       	rjmp	.+54     	; 0x2e50 <fputc+0x48>
    2e1a:	82 ff       	sbrs	r24, 2
    2e1c:	0d c0       	rjmp	.+26     	; 0x2e38 <fputc+0x30>
    2e1e:	2e 81       	ldd	r18, Y+6	; 0x06
    2e20:	3f 81       	ldd	r19, Y+7	; 0x07
    2e22:	8c 81       	ldd	r24, Y+4	; 0x04
    2e24:	9d 81       	ldd	r25, Y+5	; 0x05
    2e26:	28 17       	cp	r18, r24
    2e28:	39 07       	cpc	r19, r25
    2e2a:	64 f4       	brge	.+24     	; 0x2e44 <fputc+0x3c>
    2e2c:	e8 81       	ld	r30, Y
    2e2e:	f9 81       	ldd	r31, Y+1	; 0x01
    2e30:	01 93       	st	Z+, r16
    2e32:	f9 83       	std	Y+1, r31	; 0x01
    2e34:	e8 83       	st	Y, r30
    2e36:	06 c0       	rjmp	.+12     	; 0x2e44 <fputc+0x3c>
    2e38:	e8 85       	ldd	r30, Y+8	; 0x08
    2e3a:	f9 85       	ldd	r31, Y+9	; 0x09
    2e3c:	80 2f       	mov	r24, r16
    2e3e:	09 95       	icall
    2e40:	89 2b       	or	r24, r25
    2e42:	31 f4       	brne	.+12     	; 0x2e50 <fputc+0x48>
    2e44:	8e 81       	ldd	r24, Y+6	; 0x06
    2e46:	9f 81       	ldd	r25, Y+7	; 0x07
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	9f 83       	std	Y+7, r25	; 0x07
    2e4c:	8e 83       	std	Y+6, r24	; 0x06
    2e4e:	02 c0       	rjmp	.+4      	; 0x2e54 <fputc+0x4c>
    2e50:	0f ef       	ldi	r16, 0xFF	; 255
    2e52:	1f ef       	ldi	r17, 0xFF	; 255
    2e54:	c8 01       	movw	r24, r16
    2e56:	df 91       	pop	r29
    2e58:	cf 91       	pop	r28
    2e5a:	1f 91       	pop	r17
    2e5c:	0f 91       	pop	r16
    2e5e:	08 95       	ret

00002e60 <__ultoa_invert>:
    2e60:	fa 01       	movw	r30, r20
    2e62:	aa 27       	eor	r26, r26
    2e64:	28 30       	cpi	r18, 0x08	; 8
    2e66:	51 f1       	breq	.+84     	; 0x2ebc <__ultoa_invert+0x5c>
    2e68:	20 31       	cpi	r18, 0x10	; 16
    2e6a:	81 f1       	breq	.+96     	; 0x2ecc <__ultoa_invert+0x6c>
    2e6c:	e8 94       	clt
    2e6e:	6f 93       	push	r22
    2e70:	6e 7f       	andi	r22, 0xFE	; 254
    2e72:	6e 5f       	subi	r22, 0xFE	; 254
    2e74:	7f 4f       	sbci	r23, 0xFF	; 255
    2e76:	8f 4f       	sbci	r24, 0xFF	; 255
    2e78:	9f 4f       	sbci	r25, 0xFF	; 255
    2e7a:	af 4f       	sbci	r26, 0xFF	; 255
    2e7c:	b1 e0       	ldi	r27, 0x01	; 1
    2e7e:	3e d0       	rcall	.+124    	; 0x2efc <__ultoa_invert+0x9c>
    2e80:	b4 e0       	ldi	r27, 0x04	; 4
    2e82:	3c d0       	rcall	.+120    	; 0x2efc <__ultoa_invert+0x9c>
    2e84:	67 0f       	add	r22, r23
    2e86:	78 1f       	adc	r23, r24
    2e88:	89 1f       	adc	r24, r25
    2e8a:	9a 1f       	adc	r25, r26
    2e8c:	a1 1d       	adc	r26, r1
    2e8e:	68 0f       	add	r22, r24
    2e90:	79 1f       	adc	r23, r25
    2e92:	8a 1f       	adc	r24, r26
    2e94:	91 1d       	adc	r25, r1
    2e96:	a1 1d       	adc	r26, r1
    2e98:	6a 0f       	add	r22, r26
    2e9a:	71 1d       	adc	r23, r1
    2e9c:	81 1d       	adc	r24, r1
    2e9e:	91 1d       	adc	r25, r1
    2ea0:	a1 1d       	adc	r26, r1
    2ea2:	20 d0       	rcall	.+64     	; 0x2ee4 <__ultoa_invert+0x84>
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <__ultoa_invert+0x48>
    2ea6:	68 94       	set
    2ea8:	3f 91       	pop	r19
    2eaa:	2a e0       	ldi	r18, 0x0A	; 10
    2eac:	26 9f       	mul	r18, r22
    2eae:	11 24       	eor	r1, r1
    2eb0:	30 19       	sub	r19, r0
    2eb2:	30 5d       	subi	r19, 0xD0	; 208
    2eb4:	31 93       	st	Z+, r19
    2eb6:	de f6       	brtc	.-74     	; 0x2e6e <__ultoa_invert+0xe>
    2eb8:	cf 01       	movw	r24, r30
    2eba:	08 95       	ret
    2ebc:	46 2f       	mov	r20, r22
    2ebe:	47 70       	andi	r20, 0x07	; 7
    2ec0:	40 5d       	subi	r20, 0xD0	; 208
    2ec2:	41 93       	st	Z+, r20
    2ec4:	b3 e0       	ldi	r27, 0x03	; 3
    2ec6:	0f d0       	rcall	.+30     	; 0x2ee6 <__ultoa_invert+0x86>
    2ec8:	c9 f7       	brne	.-14     	; 0x2ebc <__ultoa_invert+0x5c>
    2eca:	f6 cf       	rjmp	.-20     	; 0x2eb8 <__ultoa_invert+0x58>
    2ecc:	46 2f       	mov	r20, r22
    2ece:	4f 70       	andi	r20, 0x0F	; 15
    2ed0:	40 5d       	subi	r20, 0xD0	; 208
    2ed2:	4a 33       	cpi	r20, 0x3A	; 58
    2ed4:	18 f0       	brcs	.+6      	; 0x2edc <__ultoa_invert+0x7c>
    2ed6:	49 5d       	subi	r20, 0xD9	; 217
    2ed8:	31 fd       	sbrc	r19, 1
    2eda:	40 52       	subi	r20, 0x20	; 32
    2edc:	41 93       	st	Z+, r20
    2ede:	02 d0       	rcall	.+4      	; 0x2ee4 <__ultoa_invert+0x84>
    2ee0:	a9 f7       	brne	.-22     	; 0x2ecc <__ultoa_invert+0x6c>
    2ee2:	ea cf       	rjmp	.-44     	; 0x2eb8 <__ultoa_invert+0x58>
    2ee4:	b4 e0       	ldi	r27, 0x04	; 4
    2ee6:	a6 95       	lsr	r26
    2ee8:	97 95       	ror	r25
    2eea:	87 95       	ror	r24
    2eec:	77 95       	ror	r23
    2eee:	67 95       	ror	r22
    2ef0:	ba 95       	dec	r27
    2ef2:	c9 f7       	brne	.-14     	; 0x2ee6 <__ultoa_invert+0x86>
    2ef4:	00 97       	sbiw	r24, 0x00	; 0
    2ef6:	61 05       	cpc	r22, r1
    2ef8:	71 05       	cpc	r23, r1
    2efa:	08 95       	ret
    2efc:	9b 01       	movw	r18, r22
    2efe:	ac 01       	movw	r20, r24
    2f00:	0a 2e       	mov	r0, r26
    2f02:	06 94       	lsr	r0
    2f04:	57 95       	ror	r21
    2f06:	47 95       	ror	r20
    2f08:	37 95       	ror	r19
    2f0a:	27 95       	ror	r18
    2f0c:	ba 95       	dec	r27
    2f0e:	c9 f7       	brne	.-14     	; 0x2f02 <__ultoa_invert+0xa2>
    2f10:	62 0f       	add	r22, r18
    2f12:	73 1f       	adc	r23, r19
    2f14:	84 1f       	adc	r24, r20
    2f16:	95 1f       	adc	r25, r21
    2f18:	a0 1d       	adc	r26, r0
    2f1a:	08 95       	ret

00002f1c <__prologue_saves__>:
    2f1c:	2f 92       	push	r2
    2f1e:	3f 92       	push	r3
    2f20:	4f 92       	push	r4
    2f22:	5f 92       	push	r5
    2f24:	6f 92       	push	r6
    2f26:	7f 92       	push	r7
    2f28:	8f 92       	push	r8
    2f2a:	9f 92       	push	r9
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	ca 1b       	sub	r28, r26
    2f46:	db 0b       	sbc	r29, r27
    2f48:	0f b6       	in	r0, 0x3f	; 63
    2f4a:	f8 94       	cli
    2f4c:	de bf       	out	0x3e, r29	; 62
    2f4e:	0f be       	out	0x3f, r0	; 63
    2f50:	cd bf       	out	0x3d, r28	; 61
    2f52:	09 94       	ijmp

00002f54 <__epilogue_restores__>:
    2f54:	2a 88       	ldd	r2, Y+18	; 0x12
    2f56:	39 88       	ldd	r3, Y+17	; 0x11
    2f58:	48 88       	ldd	r4, Y+16	; 0x10
    2f5a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f5c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f5e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f60:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f62:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f64:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f66:	b9 84       	ldd	r11, Y+9	; 0x09
    2f68:	c8 84       	ldd	r12, Y+8	; 0x08
    2f6a:	df 80       	ldd	r13, Y+7	; 0x07
    2f6c:	ee 80       	ldd	r14, Y+6	; 0x06
    2f6e:	fd 80       	ldd	r15, Y+5	; 0x05
    2f70:	0c 81       	ldd	r16, Y+4	; 0x04
    2f72:	1b 81       	ldd	r17, Y+3	; 0x03
    2f74:	aa 81       	ldd	r26, Y+2	; 0x02
    2f76:	b9 81       	ldd	r27, Y+1	; 0x01
    2f78:	ce 0f       	add	r28, r30
    2f7a:	d1 1d       	adc	r29, r1
    2f7c:	0f b6       	in	r0, 0x3f	; 63
    2f7e:	f8 94       	cli
    2f80:	de bf       	out	0x3e, r29	; 62
    2f82:	0f be       	out	0x3f, r0	; 63
    2f84:	cd bf       	out	0x3d, r28	; 61
    2f86:	ed 01       	movw	r28, r26
    2f88:	08 95       	ret

00002f8a <_exit>:
    2f8a:	f8 94       	cli

00002f8c <__stop_program>:
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <__stop_program>
